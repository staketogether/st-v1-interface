/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IELAdapter,
  IELAdapterInterface,
} from "../../../../contracts/eigen-layer/interfaces/IELAdapter";

const _abi = [
  {
    inputs: [],
    name: "AdapterOracleExists",
    type: "error",
  },
  {
    inputs: [],
    name: "AdapterOracleNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "L2RouterAlreadySet",
    type: "error",
  },
  {
    inputs: [],
    name: "NotEnoughBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "NotEnoughBalanceForValidator",
    type: "error",
  },
  {
    inputs: [],
    name: "NotIsCurrentAdapterOracle",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyAdapterOracle",
    type: "error",
  },
  {
    inputs: [],
    name: "ValidatorExists",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroedGasLimit",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "AddAdapterOracle",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oracle",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "publicKey",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "withdrawalCredentials",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "depositDataRoot",
        type: "bytes32",
      },
    ],
    name: "AddValidator",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "minGasLimit",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "extraData",
        type: "bytes",
      },
    ],
    name: "L2Withdraw",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "NextAdapterOracle",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "ReceiveEther",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "RemoveAdapterOracle",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "validatorSize",
            type: "uint256",
          },
        ],
        indexed: true,
        internalType: "struct IELAdapter.Config",
        name: "config",
        type: "tuple",
      },
    ],
    name: "SetConfig",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "l2Router",
        type: "address",
      },
    ],
    name: "SetL2Router",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "validatorSize",
            type: "uint256",
          },
        ],
        internalType: "struct IELAdapter.Config",
        name: "_config",
        type: "tuple",
      },
    ],
    name: "setConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IELAdapter__factory {
  static readonly abi = _abi;
  static createInterface(): IELAdapterInterface {
    return new Interface(_abi) as IELAdapterInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IELAdapter {
    return new Contract(address, _abi, runner) as unknown as IELAdapter;
  }
}
