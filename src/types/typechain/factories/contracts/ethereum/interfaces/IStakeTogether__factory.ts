/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from 'ethers'
import type { IStakeTogether, IStakeTogetherInterface } from '../../../../contracts/ethereum/interfaces/IStakeTogether'

const _abi = [
  {
    inputs: [],
    name: 'DepositLimitReached',
    type: 'error'
  },
  {
    inputs: [],
    name: 'EarlyTransfer',
    type: 'error'
  },
  {
    inputs: [],
    name: 'FeatureDisabled',
    type: 'error'
  },
  {
    inputs: [],
    name: 'FlashLoan',
    type: 'error'
  },
  {
    inputs: [],
    name: 'InsufficientAccountBalance',
    type: 'error'
  },
  {
    inputs: [],
    name: 'InsufficientAllowance',
    type: 'error'
  },
  {
    inputs: [],
    name: 'InsufficientBeaconBalance',
    type: 'error'
  },
  {
    inputs: [],
    name: 'InsufficientPoolBalance',
    type: 'error'
  },
  {
    inputs: [],
    name: 'InsufficientShares',
    type: 'error'
  },
  {
    inputs: [],
    name: 'InvalidLength',
    type: 'error'
  },
  {
    inputs: [],
    name: 'InvalidSize',
    type: 'error'
  },
  {
    inputs: [],
    name: 'InvalidSum',
    type: 'error'
  },
  {
    inputs: [],
    name: 'InvalidTotalPercentage',
    type: 'error'
  },
  {
    inputs: [],
    name: 'InvalidTotalSupply',
    type: 'error'
  },
  {
    inputs: [],
    name: 'InvalidValue',
    type: 'error'
  },
  {
    inputs: [],
    name: 'LessThanMinimumDeposit',
    type: 'error'
  },
  {
    inputs: [],
    name: 'LessThanMinimumWithdraw',
    type: 'error'
  },
  {
    inputs: [],
    name: 'ListedInAntiFraud',
    type: 'error'
  },
  {
    inputs: [],
    name: 'MaxDelegations',
    type: 'error'
  },
  {
    inputs: [],
    name: 'NotAuthorized',
    type: 'error'
  },
  {
    inputs: [],
    name: 'NotEnoughBalanceOnPool',
    type: 'error'
  },
  {
    inputs: [],
    name: 'NotEnoughPoolBalance',
    type: 'error'
  },
  {
    inputs: [],
    name: 'NotInAntiFraudList',
    type: 'error'
  },
  {
    inputs: [],
    name: 'NotIsCurrentValidatorOracle',
    type: 'error'
  },
  {
    inputs: [],
    name: 'OnlyAirdrop',
    type: 'error'
  },
  {
    inputs: [],
    name: 'OnlyRouter',
    type: 'error'
  },
  {
    inputs: [],
    name: 'OnlyValidatorOracle',
    type: 'error'
  },
  {
    inputs: [],
    name: 'PoolExists',
    type: 'error'
  },
  {
    inputs: [],
    name: 'PoolNotFound',
    type: 'error'
  },
  {
    inputs: [],
    name: 'RouterAlreadyHaveBalance',
    type: 'error'
  },
  {
    inputs: [],
    name: 'ShouldAnticipateWithdraw',
    type: 'error'
  },
  {
    inputs: [],
    name: 'ShouldBeZeroLength',
    type: 'error'
  },
  {
    inputs: [],
    name: 'ValidatorExists',
    type: 'error'
  },
  {
    inputs: [],
    name: 'ValidatorOracleExists',
    type: 'error'
  },
  {
    inputs: [],
    name: 'ValidatorOracleNotFound',
    type: 'error'
  },
  {
    inputs: [],
    name: 'WithdrawFromPool',
    type: 'error'
  },
  {
    inputs: [],
    name: 'WithdrawZeroBalance',
    type: 'error'
  },
  {
    inputs: [],
    name: 'WithdrawalsPoolLimitReached',
    type: 'error'
  },
  {
    inputs: [],
    name: 'WithdrawalsValidatorLimitWasReached',
    type: 'error'
  },
  {
    inputs: [],
    name: 'ZeroAddress',
    type: 'error'
  },
  {
    inputs: [],
    name: 'ZeroAmount',
    type: 'error'
  },
  {
    inputs: [],
    name: 'ZeroSupply',
    type: 'error'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'pool',
        type: 'address'
      },
      {
        indexed: false,
        internalType: 'bool',
        name: 'listed',
        type: 'bool'
      },
      {
        indexed: false,
        internalType: 'bool',
        name: 'social',
        type: 'bool'
      },
      {
        indexed: false,
        internalType: 'bool',
        name: 'index',
        type: 'bool'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256'
      }
    ],
    name: 'AddPool',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'oracle',
        type: 'address'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256'
      },
      {
        indexed: false,
        internalType: 'bytes',
        name: 'publicKey',
        type: 'bytes'
      },
      {
        indexed: false,
        internalType: 'bytes',
        name: 'withdrawalCredentials',
        type: 'bytes'
      },
      {
        indexed: false,
        internalType: 'bytes',
        name: 'signature',
        type: 'bytes'
      },
      {
        indexed: false,
        internalType: 'bytes32',
        name: 'depositDataRoot',
        type: 'bytes32'
      }
    ],
    name: 'AddValidator',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'account',
        type: 'address'
      }
    ],
    name: 'AddValidatorOracle',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'oracle',
        type: 'address'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256'
      }
    ],
    name: 'AnticipateWithdrawBeacon',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'account',
        type: 'address'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'sharesAmount',
        type: 'uint256'
      }
    ],
    name: 'BurnShares',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'to',
        type: 'address'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256'
      },
      {
        indexed: false,
        internalType: 'enum IStakeTogether.DepositType',
        name: 'depositType',
        type: 'uint8'
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'pool',
        type: 'address'
      },
      {
        indexed: true,
        internalType: 'bytes',
        name: 'referral',
        type: 'bytes'
      }
    ],
    name: 'DepositBase',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'sender',
        type: 'address'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256'
      }
    ],
    name: 'DepositLimitWasReached',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'to',
        type: 'address'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'sharesAmount',
        type: 'uint256'
      },
      {
        indexed: true,
        internalType: 'enum IStakeTogether.FeeType',
        name: 'feeType',
        type: 'uint8'
      },
      {
        indexed: true,
        internalType: 'enum IStakeTogether.FeeRole',
        name: 'feeRole',
        type: 'uint8'
      }
    ],
    name: 'MintFeeShares',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'to',
        type: 'address'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'sharesAmount',
        type: 'uint256'
      }
    ],
    name: 'MintShares',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'index',
        type: 'uint256'
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'account',
        type: 'address'
      }
    ],
    name: 'NextValidatorOracle',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256'
      },
      {
        indexed: true,
        internalType: 'uint256',
        name: 'sharesAmount',
        type: 'uint256'
      }
    ],
    name: 'ProcessStakeRewards',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'account',
        type: 'address'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256'
      }
    ],
    name: 'ProcessStakeValidator',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256'
      }
    ],
    name: 'ReceiveEther',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'pool',
        type: 'address'
      }
    ],
    name: 'RemovePool',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'account',
        type: 'address'
      }
    ],
    name: 'RemoveValidatorOracle',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'sender',
        type: 'address'
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'account',
        type: 'address'
      },
      {
        indexed: false,
        internalType: 'bool',
        name: 'isListed',
        type: 'bool'
      }
    ],
    name: 'SetAntiFraudStatus',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256'
      }
    ],
    name: 'SetBeaconBalance',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'blocksPerDay',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'depositLimit',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'maxDelegations',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'minDepositAmount',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'minWithdrawAmount',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'poolSize',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'validatorSize',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'withdrawalPoolLimit',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'withdrawalValidatorLimit',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'withdrawDelay',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'withdrawBeaconDelay',
            type: 'uint256'
          },
          {
            components: [
              {
                internalType: 'bool',
                name: 'AddPool',
                type: 'bool'
              },
              {
                internalType: 'bool',
                name: 'Deposit',
                type: 'bool'
              },
              {
                internalType: 'bool',
                name: 'WithdrawPool',
                type: 'bool'
              },
              {
                internalType: 'bool',
                name: 'WithdrawBeacon',
                type: 'bool'
              }
            ],
            internalType: 'struct IStakeTogether.Feature',
            name: 'feature',
            type: 'tuple'
          }
        ],
        indexed: true,
        internalType: 'struct IStakeTogether.Config',
        name: 'config',
        type: 'tuple'
      }
    ],
    name: 'SetConfig',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'enum IStakeTogether.FeeType',
        name: 'feeType',
        type: 'uint8'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256'
      },
      {
        indexed: false,
        internalType: 'uint256[]',
        name: 'allocations',
        type: 'uint256[]'
      }
    ],
    name: 'SetFee',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'enum IStakeTogether.FeeRole',
        name: 'role',
        type: 'uint8'
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'account',
        type: 'address'
      }
    ],
    name: 'SetFeeAddress',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'router',
        type: 'address'
      }
    ],
    name: 'SetRouter',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'stakeTogether',
        type: 'address'
      }
    ],
    name: 'SetStakeTogether',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'newValidatorSize',
        type: 'uint256'
      }
    ],
    name: 'SetValidatorSize',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256'
      }
    ],
    name: 'SetWithdrawBalance',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'bytes',
        name: 'withdrawalCredentials',
        type: 'bytes'
      }
    ],
    name: 'SetWithdrawalsCredentials',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'from',
        type: 'address'
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'to',
        type: 'address'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'sharesAmount',
        type: 'uint256'
      }
    ],
    name: 'TransferShares',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'account',
        type: 'address'
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'pool',
            type: 'address'
          },
          {
            internalType: 'uint256',
            name: 'percentage',
            type: 'uint256'
          }
        ],
        indexed: false,
        internalType: 'struct IStakeTogether.Delegation[]',
        name: 'delegations',
        type: 'tuple[]'
      }
    ],
    name: 'UpdateDelegations',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'account',
        type: 'address'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256'
      },
      {
        indexed: false,
        internalType: 'enum IStakeTogether.WithdrawType',
        name: 'withdrawType',
        type: 'uint8'
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'pool',
        type: 'address'
      }
    ],
    name: 'WithdrawBase',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'sender',
        type: 'address'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256'
      },
      {
        indexed: false,
        internalType: 'enum IStakeTogether.WithdrawType',
        name: 'withdrawType',
        type: 'uint8'
      }
    ],
    name: 'WithdrawalsLimitWasReached',
    type: 'event'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_pool',
        type: 'address'
      },
      {
        internalType: 'bool',
        name: '_listed',
        type: 'bool'
      },
      {
        internalType: 'bool',
        name: '_social',
        type: 'bool'
      },
      {
        internalType: 'bool',
        name: '_index',
        type: 'bool'
      }
    ],
    name: 'addPool',
    outputs: [],
    stateMutability: 'payable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_account',
        type: 'address'
      }
    ],
    name: 'addToAntiFraud',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: '_publicKey',
        type: 'bytes'
      },
      {
        internalType: 'bytes',
        name: '_signature',
        type: 'bytes'
      },
      {
        internalType: 'bytes32',
        name: '_depositDataRoot',
        type: 'bytes32'
      }
    ],
    name: 'addValidator',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_account',
        type: 'address'
      }
    ],
    name: 'addValidatorOracle',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_account',
        type: 'address'
      },
      {
        internalType: 'address',
        name: '_spender',
        type: 'address'
      }
    ],
    name: 'allowance',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [],
    name: 'anticipateWithdrawBeacon',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_spender',
        type: 'address'
      },
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256'
      }
    ],
    name: 'approve',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool'
      }
    ],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_account',
        type: 'address'
      }
    ],
    name: 'balanceOf',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [],
    name: 'beaconBalance',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_account',
        type: 'address'
      },
      {
        internalType: 'uint256',
        name: '_sharesAmount',
        type: 'uint256'
      }
    ],
    name: 'claimAirdrop',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_to',
        type: 'address'
      },
      {
        internalType: 'address',
        name: '_pool',
        type: 'address'
      },
      {
        internalType: 'bytes',
        name: '_referral',
        type: 'bytes'
      }
    ],
    name: 'depositDonation',
    outputs: [],
    stateMutability: 'payable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_pool',
        type: 'address'
      },
      {
        internalType: 'bytes',
        name: '_referral',
        type: 'bytes'
      }
    ],
    name: 'depositPool',
    outputs: [],
    stateMutability: 'payable',
    type: 'function'
  },
  {
    inputs: [],
    name: 'forceNextValidatorOracle',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'enum IStakeTogether.FeeRole',
        name: '_role',
        type: 'uint8'
      }
    ],
    name: 'getFeeAddress',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [],
    name: 'getFeesRoles',
    outputs: [
      {
        internalType: 'enum IStakeTogether.FeeRole[4]',
        name: '',
        type: 'uint8[4]'
      }
    ],
    stateMutability: 'pure',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_account',
        type: 'address'
      }
    ],
    name: 'getWithdrawBeaconBlock',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_account',
        type: 'address'
      }
    ],
    name: 'getWithdrawBlock',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_account',
        type: 'address'
      }
    ],
    name: 'isListedInAntiFraud',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_account',
        type: 'address'
      }
    ],
    name: 'isValidatorOracle',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [],
    name: 'pause',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_sharesAmount',
        type: 'uint256'
      }
    ],
    name: 'processFeeRewards',
    outputs: [],
    stateMutability: 'payable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_account',
        type: 'address'
      }
    ],
    name: 'removeFromAntiFraud',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_pool',
        type: 'address'
      }
    ],
    name: 'removePool',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_account',
        type: 'address'
      }
    ],
    name: 'removeValidatorOracle',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256'
      }
    ],
    name: 'setBeaconBalance',
    outputs: [],
    stateMutability: 'payable',
    type: 'function'
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'blocksPerDay',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'depositLimit',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'maxDelegations',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'minDepositAmount',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'minWithdrawAmount',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'poolSize',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'validatorSize',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'withdrawalPoolLimit',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'withdrawalValidatorLimit',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'withdrawDelay',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'withdrawBeaconDelay',
            type: 'uint256'
          },
          {
            components: [
              {
                internalType: 'bool',
                name: 'AddPool',
                type: 'bool'
              },
              {
                internalType: 'bool',
                name: 'Deposit',
                type: 'bool'
              },
              {
                internalType: 'bool',
                name: 'WithdrawPool',
                type: 'bool'
              },
              {
                internalType: 'bool',
                name: 'WithdrawBeacon',
                type: 'bool'
              }
            ],
            internalType: 'struct IStakeTogether.Feature',
            name: 'feature',
            type: 'tuple'
          }
        ],
        internalType: 'struct IStakeTogether.Config',
        name: '_config',
        type: 'tuple'
      }
    ],
    name: 'setConfig',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'enum IStakeTogether.FeeType',
        name: '_feeType',
        type: 'uint8'
      },
      {
        internalType: 'uint256',
        name: '_value',
        type: 'uint256'
      },
      {
        internalType: 'uint256[]',
        name: '_allocations',
        type: 'uint256[]'
      }
    ],
    name: 'setFee',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'enum IStakeTogether.FeeRole',
        name: '_role',
        type: 'uint8'
      },
      {
        internalType: 'address payable',
        name: '_address',
        type: 'address'
      }
    ],
    name: 'setFeeAddress',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256'
      }
    ],
    name: 'setWithdrawBalance',
    outputs: [],
    stateMutability: 'payable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256'
      }
    ],
    name: 'sharesByWei',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [],
    name: 'totalSupply',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_to',
        type: 'address'
      },
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256'
      }
    ],
    name: 'transfer',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool'
      }
    ],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_from',
        type: 'address'
      },
      {
        internalType: 'address',
        name: '_to',
        type: 'address'
      },
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256'
      }
    ],
    name: 'transferFrom',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool'
      }
    ],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [],
    name: 'unpause',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'pool',
            type: 'address'
          },
          {
            internalType: 'uint256',
            name: 'percentage',
            type: 'uint256'
          }
        ],
        internalType: 'struct IStakeTogether.Delegation[]',
        name: '_delegations',
        type: 'tuple[]'
      }
    ],
    name: 'updateDelegations',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_sharesAmount',
        type: 'uint256'
      }
    ],
    name: 'weiByShares',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [],
    name: 'withdrawBalance',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256'
      },
      {
        internalType: 'address',
        name: '_pool',
        type: 'address'
      }
    ],
    name: 'withdrawBeacon',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256'
      },
      {
        internalType: 'address',
        name: '_pool',
        type: 'address'
      }
    ],
    name: 'withdrawPool',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    stateMutability: 'payable',
    type: 'receive'
  }
] as const

export class IStakeTogether__factory {
  static readonly abi = _abi
  static createInterface(): IStakeTogetherInterface {
    return new Interface(_abi) as IStakeTogetherInterface
  }
  static connect(address: string, runner?: ContractRunner | null): IStakeTogether {
    return new Contract(address, _abi, runner) as unknown as IStakeTogether
  }
}
