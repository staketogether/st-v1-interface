/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener
} from 'ethers'
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod
} from '../../../common'

export declare namespace IELStakeTogether {
  export type FeatureStruct = {
    AddPool: boolean
    Deposit: boolean
    WithdrawPool: boolean
    WithdrawBeacon: boolean
  }

  export type FeatureStructOutput = [AddPool: boolean, Deposit: boolean, WithdrawPool: boolean, WithdrawBeacon: boolean] & {
    AddPool: boolean
    Deposit: boolean
    WithdrawPool: boolean
    WithdrawBeacon: boolean
  }

  export type ConfigStruct = {
    blocksPerDay: BigNumberish
    depositLimit: BigNumberish
    maxDelegations: BigNumberish
    minDepositAmount: BigNumberish
    minWithdrawAmount: BigNumberish
    poolSize: BigNumberish
    validatorSize: BigNumberish
    withdrawalPoolLimit: BigNumberish
    withdrawalValidatorLimit: BigNumberish
    withdrawDelay: BigNumberish
    withdrawBeaconDelay: BigNumberish
    feature: IELStakeTogether.FeatureStruct
  }

  export type ConfigStructOutput = [
    blocksPerDay: bigint,
    depositLimit: bigint,
    maxDelegations: bigint,
    minDepositAmount: bigint,
    minWithdrawAmount: bigint,
    poolSize: bigint,
    validatorSize: bigint,
    withdrawalPoolLimit: bigint,
    withdrawalValidatorLimit: bigint,
    withdrawDelay: bigint,
    withdrawBeaconDelay: bigint,
    feature: IELStakeTogether.FeatureStructOutput
  ] & {
    blocksPerDay: bigint
    depositLimit: bigint
    maxDelegations: bigint
    minDepositAmount: bigint
    minWithdrawAmount: bigint
    poolSize: bigint
    validatorSize: bigint
    withdrawalPoolLimit: bigint
    withdrawalValidatorLimit: bigint
    withdrawDelay: bigint
    withdrawBeaconDelay: bigint
    feature: IELStakeTogether.FeatureStructOutput
  }

  export type DelegationStruct = {
    pool: AddressLike
    percentage: BigNumberish
  }

  export type DelegationStructOutput = [pool: string, percentage: bigint] & {
    pool: string
    percentage: bigint
  }
}

export interface IELStakeTogetherInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'addPool'
      | 'addToAntiFraud'
      | 'addValidatorOracle'
      | 'allowance'
      | 'anticipateWithdrawBeacon'
      | 'approve'
      | 'balanceOf'
      | 'beaconBalance'
      | 'claimAirdrop'
      | 'depositDonation'
      | 'depositPool'
      | 'forceNextValidatorOracle'
      | 'getFeeAddress'
      | 'getFeesRoles'
      | 'getWithdrawBeaconBlock'
      | 'getWithdrawBlock'
      | 'isListedInAntiFraud'
      | 'isValidatorOracle'
      | 'pause'
      | 'processFeeRewards'
      | 'removeFromAntiFraud'
      | 'removePool'
      | 'removeValidatorOracle'
      | 'requestAddValidator'
      | 'setBeaconBalance'
      | 'setConfig'
      | 'setFee'
      | 'setFeeAddress'
      | 'setL1Adapter'
      | 'setWithdrawBalance'
      | 'sharesByWei'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'unpause'
      | 'updateDelegations'
      | 'weiByShares'
      | 'withdrawBalance'
      | 'withdrawBeacon'
      | 'withdrawPool'
  ): FunctionFragment

  getEvent(
    nameOrSignatureOrTopic:
      | 'AddPool'
      | 'AddValidatorOracle'
      | 'AnticipateWithdrawBeacon'
      | 'BurnShares'
      | 'DepositBase'
      | 'DepositLimitWasReached'
      | 'MintFeeShares'
      | 'MintShares'
      | 'NextValidatorOracle'
      | 'ProcessStakeRewards'
      | 'ProcessStakeValidator'
      | 'ReceiveEther'
      | 'RemovePool'
      | 'RemoveValidatorOracle'
      | 'RequestAddValidator'
      | 'SetAdapter'
      | 'SetAntiFraudStatus'
      | 'SetBeaconBalance'
      | 'SetConfig'
      | 'SetFee'
      | 'SetFeeAddress'
      | 'SetRouter'
      | 'SetStakeTogether'
      | 'SetValidatorSize'
      | 'SetWithdrawBalance'
      | 'SetWithdrawalsCredentials'
      | 'TransferShares'
      | 'UpdateDelegations'
      | 'WithdrawBase'
      | 'WithdrawalsLimitWasReached'
  ): EventFragment

  encodeFunctionData(functionFragment: 'addPool', values: [AddressLike, boolean, boolean, boolean]): string
  encodeFunctionData(functionFragment: 'addToAntiFraud', values: [AddressLike]): string
  encodeFunctionData(functionFragment: 'addValidatorOracle', values: [AddressLike]): string
  encodeFunctionData(functionFragment: 'allowance', values: [AddressLike, AddressLike]): string
  encodeFunctionData(functionFragment: 'anticipateWithdrawBeacon', values?: undefined): string
  encodeFunctionData(functionFragment: 'approve', values: [AddressLike, BigNumberish]): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [AddressLike]): string
  encodeFunctionData(functionFragment: 'beaconBalance', values?: undefined): string
  encodeFunctionData(functionFragment: 'claimAirdrop', values: [AddressLike, BigNumberish]): string
  encodeFunctionData(functionFragment: 'depositDonation', values: [AddressLike, AddressLike, BytesLike]): string
  encodeFunctionData(functionFragment: 'depositPool', values: [AddressLike, BytesLike]): string
  encodeFunctionData(functionFragment: 'forceNextValidatorOracle', values?: undefined): string
  encodeFunctionData(functionFragment: 'getFeeAddress', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'getFeesRoles', values?: undefined): string
  encodeFunctionData(functionFragment: 'getWithdrawBeaconBlock', values: [AddressLike]): string
  encodeFunctionData(functionFragment: 'getWithdrawBlock', values: [AddressLike]): string
  encodeFunctionData(functionFragment: 'isListedInAntiFraud', values: [AddressLike]): string
  encodeFunctionData(functionFragment: 'isValidatorOracle', values: [AddressLike]): string
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string
  encodeFunctionData(functionFragment: 'processFeeRewards', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'removeFromAntiFraud', values: [AddressLike]): string
  encodeFunctionData(functionFragment: 'removePool', values: [AddressLike]): string
  encodeFunctionData(functionFragment: 'removeValidatorOracle', values: [AddressLike]): string
  encodeFunctionData(functionFragment: 'requestAddValidator', values: [BigNumberish, BytesLike]): string
  encodeFunctionData(functionFragment: 'setBeaconBalance', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'setConfig', values: [IELStakeTogether.ConfigStruct]): string
  encodeFunctionData(functionFragment: 'setFee', values: [BigNumberish, BigNumberish, BigNumberish[]]): string
  encodeFunctionData(functionFragment: 'setFeeAddress', values: [BigNumberish, AddressLike]): string
  encodeFunctionData(functionFragment: 'setL1Adapter', values: [AddressLike]): string
  encodeFunctionData(functionFragment: 'setWithdrawBalance', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'sharesByWei', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string
  encodeFunctionData(functionFragment: 'transfer', values: [AddressLike, BigNumberish]): string
  encodeFunctionData(functionFragment: 'transferFrom', values: [AddressLike, AddressLike, BigNumberish]): string
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string
  encodeFunctionData(functionFragment: 'updateDelegations', values: [IELStakeTogether.DelegationStruct[]]): string
  encodeFunctionData(functionFragment: 'weiByShares', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'withdrawBalance', values?: undefined): string
  encodeFunctionData(functionFragment: 'withdrawBeacon', values: [BigNumberish, AddressLike]): string
  encodeFunctionData(functionFragment: 'withdrawPool', values: [BigNumberish, AddressLike]): string

  decodeFunctionResult(functionFragment: 'addPool', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addToAntiFraud', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addValidatorOracle', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'anticipateWithdrawBeacon', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'beaconBalance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimAirdrop', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'depositDonation', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'depositPool', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'forceNextValidatorOracle', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getFeeAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getFeesRoles', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getWithdrawBeaconBlock', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getWithdrawBlock', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isListedInAntiFraud', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isValidatorOracle', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'processFeeRewards', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'removeFromAntiFraud', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'removePool', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'removeValidatorOracle', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'requestAddValidator', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setBeaconBalance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setConfig', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setFee', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setFeeAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setL1Adapter', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setWithdrawBalance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'sharesByWei', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'updateDelegations', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'weiByShares', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawBalance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawBeacon', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawPool', data: BytesLike): Result
}

export namespace AddPoolEvent {
  export type InputTuple = [pool: AddressLike, listed: boolean, social: boolean, index: boolean, amount: BigNumberish]
  export type OutputTuple = [pool: string, listed: boolean, social: boolean, index: boolean, amount: bigint]
  export interface OutputObject {
    pool: string
    listed: boolean
    social: boolean
    index: boolean
    amount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace AddValidatorOracleEvent {
  export type InputTuple = [account: AddressLike]
  export type OutputTuple = [account: string]
  export interface OutputObject {
    account: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace AnticipateWithdrawBeaconEvent {
  export type InputTuple = [oracle: AddressLike, amount: BigNumberish]
  export type OutputTuple = [oracle: string, amount: bigint]
  export interface OutputObject {
    oracle: string
    amount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace BurnSharesEvent {
  export type InputTuple = [account: AddressLike, sharesAmount: BigNumberish]
  export type OutputTuple = [account: string, sharesAmount: bigint]
  export interface OutputObject {
    account: string
    sharesAmount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace DepositBaseEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish, depositType: BigNumberish, pool: AddressLike, referral: BytesLike]
  export type OutputTuple = [to: string, amount: bigint, depositType: bigint, pool: string, referral: string]
  export interface OutputObject {
    to: string
    amount: bigint
    depositType: bigint
    pool: string
    referral: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace DepositLimitWasReachedEvent {
  export type InputTuple = [sender: AddressLike, amount: BigNumberish]
  export type OutputTuple = [sender: string, amount: bigint]
  export interface OutputObject {
    sender: string
    amount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace MintFeeSharesEvent {
  export type InputTuple = [to: AddressLike, sharesAmount: BigNumberish, feeType: BigNumberish, feeRole: BigNumberish]
  export type OutputTuple = [to: string, sharesAmount: bigint, feeType: bigint, feeRole: bigint]
  export interface OutputObject {
    to: string
    sharesAmount: bigint
    feeType: bigint
    feeRole: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace MintSharesEvent {
  export type InputTuple = [to: AddressLike, sharesAmount: BigNumberish]
  export type OutputTuple = [to: string, sharesAmount: bigint]
  export interface OutputObject {
    to: string
    sharesAmount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace NextValidatorOracleEvent {
  export type InputTuple = [index: BigNumberish, account: AddressLike]
  export type OutputTuple = [index: bigint, account: string]
  export interface OutputObject {
    index: bigint
    account: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace ProcessStakeRewardsEvent {
  export type InputTuple = [amount: BigNumberish, sharesAmount: BigNumberish]
  export type OutputTuple = [amount: bigint, sharesAmount: bigint]
  export interface OutputObject {
    amount: bigint
    sharesAmount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace ProcessStakeValidatorEvent {
  export type InputTuple = [account: AddressLike, amount: BigNumberish]
  export type OutputTuple = [account: string, amount: bigint]
  export interface OutputObject {
    account: string
    amount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace ReceiveEtherEvent {
  export type InputTuple = [amount: BigNumberish]
  export type OutputTuple = [amount: bigint]
  export interface OutputObject {
    amount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace RemovePoolEvent {
  export type InputTuple = [pool: AddressLike]
  export type OutputTuple = [pool: string]
  export interface OutputObject {
    pool: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace RemoveValidatorOracleEvent {
  export type InputTuple = [account: AddressLike]
  export type OutputTuple = [account: string]
  export interface OutputObject {
    account: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace RequestAddValidatorEvent {
  export type InputTuple = [oracle: AddressLike, amount: BigNumberish, minGasLimit: BigNumberish, extraData: BytesLike]
  export type OutputTuple = [oracle: string, amount: bigint, minGasLimit: bigint, extraData: string]
  export interface OutputObject {
    oracle: string
    amount: bigint
    minGasLimit: bigint
    extraData: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace SetAdapterEvent {
  export type InputTuple = [adapter: AddressLike]
  export type OutputTuple = [adapter: string]
  export interface OutputObject {
    adapter: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace SetAntiFraudStatusEvent {
  export type InputTuple = [sender: AddressLike, account: AddressLike, isListed: boolean]
  export type OutputTuple = [sender: string, account: string, isListed: boolean]
  export interface OutputObject {
    sender: string
    account: string
    isListed: boolean
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace SetBeaconBalanceEvent {
  export type InputTuple = [amount: BigNumberish]
  export type OutputTuple = [amount: bigint]
  export interface OutputObject {
    amount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace SetConfigEvent {
  export type InputTuple = [config: IELStakeTogether.ConfigStruct]
  export type OutputTuple = [config: IELStakeTogether.ConfigStructOutput]
  export interface OutputObject {
    config: IELStakeTogether.ConfigStructOutput
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace SetFeeEvent {
  export type InputTuple = [feeType: BigNumberish, value: BigNumberish, allocations: BigNumberish[]]
  export type OutputTuple = [feeType: bigint, value: bigint, allocations: bigint[]]
  export interface OutputObject {
    feeType: bigint
    value: bigint
    allocations: bigint[]
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace SetFeeAddressEvent {
  export type InputTuple = [role: BigNumberish, account: AddressLike]
  export type OutputTuple = [role: bigint, account: string]
  export interface OutputObject {
    role: bigint
    account: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace SetRouterEvent {
  export type InputTuple = [router: AddressLike]
  export type OutputTuple = [router: string]
  export interface OutputObject {
    router: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace SetStakeTogetherEvent {
  export type InputTuple = [stakeTogether: AddressLike]
  export type OutputTuple = [stakeTogether: string]
  export interface OutputObject {
    stakeTogether: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace SetValidatorSizeEvent {
  export type InputTuple = [newValidatorSize: BigNumberish]
  export type OutputTuple = [newValidatorSize: bigint]
  export interface OutputObject {
    newValidatorSize: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace SetWithdrawBalanceEvent {
  export type InputTuple = [amount: BigNumberish]
  export type OutputTuple = [amount: bigint]
  export interface OutputObject {
    amount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace SetWithdrawalsCredentialsEvent {
  export type InputTuple = [withdrawalCredentials: BytesLike]
  export type OutputTuple = [withdrawalCredentials: string]
  export interface OutputObject {
    withdrawalCredentials: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace TransferSharesEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike, sharesAmount: BigNumberish]
  export type OutputTuple = [from: string, to: string, sharesAmount: bigint]
  export interface OutputObject {
    from: string
    to: string
    sharesAmount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace UpdateDelegationsEvent {
  export type InputTuple = [account: AddressLike, delegations: IELStakeTogether.DelegationStruct[]]
  export type OutputTuple = [account: string, delegations: IELStakeTogether.DelegationStructOutput[]]
  export interface OutputObject {
    account: string
    delegations: IELStakeTogether.DelegationStructOutput[]
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace WithdrawBaseEvent {
  export type InputTuple = [account: AddressLike, amount: BigNumberish, withdrawType: BigNumberish, pool: AddressLike]
  export type OutputTuple = [account: string, amount: bigint, withdrawType: bigint, pool: string]
  export interface OutputObject {
    account: string
    amount: bigint
    withdrawType: bigint
    pool: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace WithdrawalsLimitWasReachedEvent {
  export type InputTuple = [sender: AddressLike, amount: BigNumberish, withdrawType: BigNumberish]
  export type OutputTuple = [sender: string, amount: bigint, withdrawType: bigint]
  export interface OutputObject {
    sender: string
    amount: bigint
    withdrawType: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export interface IELStakeTogether extends BaseContract {
  connect(runner?: ContractRunner | null): IELStakeTogether
  waitForDeployment(): Promise<this>

  interface: IELStakeTogetherInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>

  addPool: TypedContractMethod<[_pool: AddressLike, _listed: boolean, _social: boolean, _index: boolean], [void], 'payable'>

  addToAntiFraud: TypedContractMethod<[_account: AddressLike], [void], 'nonpayable'>

  addValidatorOracle: TypedContractMethod<[_account: AddressLike], [void], 'nonpayable'>

  allowance: TypedContractMethod<[_account: AddressLike, _spender: AddressLike], [bigint], 'view'>

  anticipateWithdrawBeacon: TypedContractMethod<[], [void], 'nonpayable'>

  approve: TypedContractMethod<[_spender: AddressLike, _amount: BigNumberish], [boolean], 'nonpayable'>

  balanceOf: TypedContractMethod<[_account: AddressLike], [bigint], 'view'>

  beaconBalance: TypedContractMethod<[], [bigint], 'view'>

  claimAirdrop: TypedContractMethod<[_account: AddressLike, _sharesAmount: BigNumberish], [void], 'nonpayable'>

  depositDonation: TypedContractMethod<[_to: AddressLike, _pool: AddressLike, _referral: BytesLike], [void], 'payable'>

  depositPool: TypedContractMethod<[_pool: AddressLike, _referral: BytesLike], [void], 'payable'>

  forceNextValidatorOracle: TypedContractMethod<[], [void], 'nonpayable'>

  getFeeAddress: TypedContractMethod<[_role: BigNumberish], [string], 'view'>

  getFeesRoles: TypedContractMethod<[], [[bigint, bigint, bigint, bigint]], 'view'>

  getWithdrawBeaconBlock: TypedContractMethod<[_account: AddressLike], [bigint], 'view'>

  getWithdrawBlock: TypedContractMethod<[_account: AddressLike], [bigint], 'view'>

  isListedInAntiFraud: TypedContractMethod<[_account: AddressLike], [boolean], 'view'>

  isValidatorOracle: TypedContractMethod<[_account: AddressLike], [boolean], 'view'>

  pause: TypedContractMethod<[], [void], 'nonpayable'>

  processFeeRewards: TypedContractMethod<[_sharesAmount: BigNumberish], [void], 'payable'>

  removeFromAntiFraud: TypedContractMethod<[_account: AddressLike], [void], 'nonpayable'>

  removePool: TypedContractMethod<[_pool: AddressLike], [void], 'nonpayable'>

  removeValidatorOracle: TypedContractMethod<[_account: AddressLike], [void], 'nonpayable'>

  requestAddValidator: TypedContractMethod<[_minGasLimit: BigNumberish, _extraData: BytesLike], [void], 'nonpayable'>

  setBeaconBalance: TypedContractMethod<[_amount: BigNumberish], [void], 'payable'>

  setConfig: TypedContractMethod<[_config: IELStakeTogether.ConfigStruct], [void], 'nonpayable'>

  setFee: TypedContractMethod<[_feeType: BigNumberish, _value: BigNumberish, _allocations: BigNumberish[]], [void], 'nonpayable'>

  setFeeAddress: TypedContractMethod<[_role: BigNumberish, _address: AddressLike], [void], 'nonpayable'>

  setL1Adapter: TypedContractMethod<[_l1adapter: AddressLike], [void], 'nonpayable'>

  setWithdrawBalance: TypedContractMethod<[_amount: BigNumberish], [void], 'payable'>

  sharesByWei: TypedContractMethod<[_amount: BigNumberish], [bigint], 'view'>

  totalSupply: TypedContractMethod<[], [bigint], 'view'>

  transfer: TypedContractMethod<[_to: AddressLike, _amount: BigNumberish], [boolean], 'nonpayable'>

  transferFrom: TypedContractMethod<[_from: AddressLike, _to: AddressLike, _amount: BigNumberish], [boolean], 'nonpayable'>

  unpause: TypedContractMethod<[], [void], 'nonpayable'>

  updateDelegations: TypedContractMethod<[_delegations: IELStakeTogether.DelegationStruct[]], [void], 'nonpayable'>

  weiByShares: TypedContractMethod<[_sharesAmount: BigNumberish], [bigint], 'view'>

  withdrawBalance: TypedContractMethod<[], [bigint], 'view'>

  withdrawBeacon: TypedContractMethod<[_amount: BigNumberish, _pool: AddressLike], [void], 'nonpayable'>

  withdrawPool: TypedContractMethod<[_amount: BigNumberish, _pool: AddressLike], [void], 'nonpayable'>

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T

  getFunction(
    nameOrSignature: 'addPool'
  ): TypedContractMethod<[_pool: AddressLike, _listed: boolean, _social: boolean, _index: boolean], [void], 'payable'>
  getFunction(nameOrSignature: 'addToAntiFraud'): TypedContractMethod<[_account: AddressLike], [void], 'nonpayable'>
  getFunction(nameOrSignature: 'addValidatorOracle'): TypedContractMethod<[_account: AddressLike], [void], 'nonpayable'>
  getFunction(nameOrSignature: 'allowance'): TypedContractMethod<[_account: AddressLike, _spender: AddressLike], [bigint], 'view'>
  getFunction(nameOrSignature: 'anticipateWithdrawBeacon'): TypedContractMethod<[], [void], 'nonpayable'>
  getFunction(nameOrSignature: 'approve'): TypedContractMethod<[_spender: AddressLike, _amount: BigNumberish], [boolean], 'nonpayable'>
  getFunction(nameOrSignature: 'balanceOf'): TypedContractMethod<[_account: AddressLike], [bigint], 'view'>
  getFunction(nameOrSignature: 'beaconBalance'): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'claimAirdrop'
  ): TypedContractMethod<[_account: AddressLike, _sharesAmount: BigNumberish], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'depositDonation'
  ): TypedContractMethod<[_to: AddressLike, _pool: AddressLike, _referral: BytesLike], [void], 'payable'>
  getFunction(nameOrSignature: 'depositPool'): TypedContractMethod<[_pool: AddressLike, _referral: BytesLike], [void], 'payable'>
  getFunction(nameOrSignature: 'forceNextValidatorOracle'): TypedContractMethod<[], [void], 'nonpayable'>
  getFunction(nameOrSignature: 'getFeeAddress'): TypedContractMethod<[_role: BigNumberish], [string], 'view'>
  getFunction(nameOrSignature: 'getFeesRoles'): TypedContractMethod<[], [[bigint, bigint, bigint, bigint]], 'view'>
  getFunction(nameOrSignature: 'getWithdrawBeaconBlock'): TypedContractMethod<[_account: AddressLike], [bigint], 'view'>
  getFunction(nameOrSignature: 'getWithdrawBlock'): TypedContractMethod<[_account: AddressLike], [bigint], 'view'>
  getFunction(nameOrSignature: 'isListedInAntiFraud'): TypedContractMethod<[_account: AddressLike], [boolean], 'view'>
  getFunction(nameOrSignature: 'isValidatorOracle'): TypedContractMethod<[_account: AddressLike], [boolean], 'view'>
  getFunction(nameOrSignature: 'pause'): TypedContractMethod<[], [void], 'nonpayable'>
  getFunction(nameOrSignature: 'processFeeRewards'): TypedContractMethod<[_sharesAmount: BigNumberish], [void], 'payable'>
  getFunction(nameOrSignature: 'removeFromAntiFraud'): TypedContractMethod<[_account: AddressLike], [void], 'nonpayable'>
  getFunction(nameOrSignature: 'removePool'): TypedContractMethod<[_pool: AddressLike], [void], 'nonpayable'>
  getFunction(nameOrSignature: 'removeValidatorOracle'): TypedContractMethod<[_account: AddressLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'requestAddValidator'
  ): TypedContractMethod<[_minGasLimit: BigNumberish, _extraData: BytesLike], [void], 'nonpayable'>
  getFunction(nameOrSignature: 'setBeaconBalance'): TypedContractMethod<[_amount: BigNumberish], [void], 'payable'>
  getFunction(nameOrSignature: 'setConfig'): TypedContractMethod<[_config: IELStakeTogether.ConfigStruct], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'setFee'
  ): TypedContractMethod<[_feeType: BigNumberish, _value: BigNumberish, _allocations: BigNumberish[]], [void], 'nonpayable'>
  getFunction(nameOrSignature: 'setFeeAddress'): TypedContractMethod<[_role: BigNumberish, _address: AddressLike], [void], 'nonpayable'>
  getFunction(nameOrSignature: 'setL1Adapter'): TypedContractMethod<[_l1adapter: AddressLike], [void], 'nonpayable'>
  getFunction(nameOrSignature: 'setWithdrawBalance'): TypedContractMethod<[_amount: BigNumberish], [void], 'payable'>
  getFunction(nameOrSignature: 'sharesByWei'): TypedContractMethod<[_amount: BigNumberish], [bigint], 'view'>
  getFunction(nameOrSignature: 'totalSupply'): TypedContractMethod<[], [bigint], 'view'>
  getFunction(nameOrSignature: 'transfer'): TypedContractMethod<[_to: AddressLike, _amount: BigNumberish], [boolean], 'nonpayable'>
  getFunction(
    nameOrSignature: 'transferFrom'
  ): TypedContractMethod<[_from: AddressLike, _to: AddressLike, _amount: BigNumberish], [boolean], 'nonpayable'>
  getFunction(nameOrSignature: 'unpause'): TypedContractMethod<[], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'updateDelegations'
  ): TypedContractMethod<[_delegations: IELStakeTogether.DelegationStruct[]], [void], 'nonpayable'>
  getFunction(nameOrSignature: 'weiByShares'): TypedContractMethod<[_sharesAmount: BigNumberish], [bigint], 'view'>
  getFunction(nameOrSignature: 'withdrawBalance'): TypedContractMethod<[], [bigint], 'view'>
  getFunction(nameOrSignature: 'withdrawBeacon'): TypedContractMethod<[_amount: BigNumberish, _pool: AddressLike], [void], 'nonpayable'>
  getFunction(nameOrSignature: 'withdrawPool'): TypedContractMethod<[_amount: BigNumberish, _pool: AddressLike], [void], 'nonpayable'>

  getEvent(key: 'AddPool'): TypedContractEvent<AddPoolEvent.InputTuple, AddPoolEvent.OutputTuple, AddPoolEvent.OutputObject>
  getEvent(
    key: 'AddValidatorOracle'
  ): TypedContractEvent<AddValidatorOracleEvent.InputTuple, AddValidatorOracleEvent.OutputTuple, AddValidatorOracleEvent.OutputObject>
  getEvent(
    key: 'AnticipateWithdrawBeacon'
  ): TypedContractEvent<
    AnticipateWithdrawBeaconEvent.InputTuple,
    AnticipateWithdrawBeaconEvent.OutputTuple,
    AnticipateWithdrawBeaconEvent.OutputObject
  >
  getEvent(key: 'BurnShares'): TypedContractEvent<BurnSharesEvent.InputTuple, BurnSharesEvent.OutputTuple, BurnSharesEvent.OutputObject>
  getEvent(key: 'DepositBase'): TypedContractEvent<DepositBaseEvent.InputTuple, DepositBaseEvent.OutputTuple, DepositBaseEvent.OutputObject>
  getEvent(
    key: 'DepositLimitWasReached'
  ): TypedContractEvent<
    DepositLimitWasReachedEvent.InputTuple,
    DepositLimitWasReachedEvent.OutputTuple,
    DepositLimitWasReachedEvent.OutputObject
  >
  getEvent(
    key: 'MintFeeShares'
  ): TypedContractEvent<MintFeeSharesEvent.InputTuple, MintFeeSharesEvent.OutputTuple, MintFeeSharesEvent.OutputObject>
  getEvent(key: 'MintShares'): TypedContractEvent<MintSharesEvent.InputTuple, MintSharesEvent.OutputTuple, MintSharesEvent.OutputObject>
  getEvent(
    key: 'NextValidatorOracle'
  ): TypedContractEvent<NextValidatorOracleEvent.InputTuple, NextValidatorOracleEvent.OutputTuple, NextValidatorOracleEvent.OutputObject>
  getEvent(
    key: 'ProcessStakeRewards'
  ): TypedContractEvent<ProcessStakeRewardsEvent.InputTuple, ProcessStakeRewardsEvent.OutputTuple, ProcessStakeRewardsEvent.OutputObject>
  getEvent(
    key: 'ProcessStakeValidator'
  ): TypedContractEvent<
    ProcessStakeValidatorEvent.InputTuple,
    ProcessStakeValidatorEvent.OutputTuple,
    ProcessStakeValidatorEvent.OutputObject
  >
  getEvent(
    key: 'ReceiveEther'
  ): TypedContractEvent<ReceiveEtherEvent.InputTuple, ReceiveEtherEvent.OutputTuple, ReceiveEtherEvent.OutputObject>
  getEvent(key: 'RemovePool'): TypedContractEvent<RemovePoolEvent.InputTuple, RemovePoolEvent.OutputTuple, RemovePoolEvent.OutputObject>
  getEvent(
    key: 'RemoveValidatorOracle'
  ): TypedContractEvent<
    RemoveValidatorOracleEvent.InputTuple,
    RemoveValidatorOracleEvent.OutputTuple,
    RemoveValidatorOracleEvent.OutputObject
  >
  getEvent(
    key: 'RequestAddValidator'
  ): TypedContractEvent<RequestAddValidatorEvent.InputTuple, RequestAddValidatorEvent.OutputTuple, RequestAddValidatorEvent.OutputObject>
  getEvent(key: 'SetAdapter'): TypedContractEvent<SetAdapterEvent.InputTuple, SetAdapterEvent.OutputTuple, SetAdapterEvent.OutputObject>
  getEvent(
    key: 'SetAntiFraudStatus'
  ): TypedContractEvent<SetAntiFraudStatusEvent.InputTuple, SetAntiFraudStatusEvent.OutputTuple, SetAntiFraudStatusEvent.OutputObject>
  getEvent(
    key: 'SetBeaconBalance'
  ): TypedContractEvent<SetBeaconBalanceEvent.InputTuple, SetBeaconBalanceEvent.OutputTuple, SetBeaconBalanceEvent.OutputObject>
  getEvent(key: 'SetConfig'): TypedContractEvent<SetConfigEvent.InputTuple, SetConfigEvent.OutputTuple, SetConfigEvent.OutputObject>
  getEvent(key: 'SetFee'): TypedContractEvent<SetFeeEvent.InputTuple, SetFeeEvent.OutputTuple, SetFeeEvent.OutputObject>
  getEvent(
    key: 'SetFeeAddress'
  ): TypedContractEvent<SetFeeAddressEvent.InputTuple, SetFeeAddressEvent.OutputTuple, SetFeeAddressEvent.OutputObject>
  getEvent(key: 'SetRouter'): TypedContractEvent<SetRouterEvent.InputTuple, SetRouterEvent.OutputTuple, SetRouterEvent.OutputObject>
  getEvent(
    key: 'SetStakeTogether'
  ): TypedContractEvent<SetStakeTogetherEvent.InputTuple, SetStakeTogetherEvent.OutputTuple, SetStakeTogetherEvent.OutputObject>
  getEvent(
    key: 'SetValidatorSize'
  ): TypedContractEvent<SetValidatorSizeEvent.InputTuple, SetValidatorSizeEvent.OutputTuple, SetValidatorSizeEvent.OutputObject>
  getEvent(
    key: 'SetWithdrawBalance'
  ): TypedContractEvent<SetWithdrawBalanceEvent.InputTuple, SetWithdrawBalanceEvent.OutputTuple, SetWithdrawBalanceEvent.OutputObject>
  getEvent(
    key: 'SetWithdrawalsCredentials'
  ): TypedContractEvent<
    SetWithdrawalsCredentialsEvent.InputTuple,
    SetWithdrawalsCredentialsEvent.OutputTuple,
    SetWithdrawalsCredentialsEvent.OutputObject
  >
  getEvent(
    key: 'TransferShares'
  ): TypedContractEvent<TransferSharesEvent.InputTuple, TransferSharesEvent.OutputTuple, TransferSharesEvent.OutputObject>
  getEvent(
    key: 'UpdateDelegations'
  ): TypedContractEvent<UpdateDelegationsEvent.InputTuple, UpdateDelegationsEvent.OutputTuple, UpdateDelegationsEvent.OutputObject>
  getEvent(
    key: 'WithdrawBase'
  ): TypedContractEvent<WithdrawBaseEvent.InputTuple, WithdrawBaseEvent.OutputTuple, WithdrawBaseEvent.OutputObject>
  getEvent(
    key: 'WithdrawalsLimitWasReached'
  ): TypedContractEvent<
    WithdrawalsLimitWasReachedEvent.InputTuple,
    WithdrawalsLimitWasReachedEvent.OutputTuple,
    WithdrawalsLimitWasReachedEvent.OutputObject
  >

  filters: {
    'AddPool(address,bool,bool,bool,uint256)': TypedContractEvent<
      AddPoolEvent.InputTuple,
      AddPoolEvent.OutputTuple,
      AddPoolEvent.OutputObject
    >
    AddPool: TypedContractEvent<AddPoolEvent.InputTuple, AddPoolEvent.OutputTuple, AddPoolEvent.OutputObject>

    'AddValidatorOracle(address)': TypedContractEvent<
      AddValidatorOracleEvent.InputTuple,
      AddValidatorOracleEvent.OutputTuple,
      AddValidatorOracleEvent.OutputObject
    >
    AddValidatorOracle: TypedContractEvent<
      AddValidatorOracleEvent.InputTuple,
      AddValidatorOracleEvent.OutputTuple,
      AddValidatorOracleEvent.OutputObject
    >

    'AnticipateWithdrawBeacon(address,uint256)': TypedContractEvent<
      AnticipateWithdrawBeaconEvent.InputTuple,
      AnticipateWithdrawBeaconEvent.OutputTuple,
      AnticipateWithdrawBeaconEvent.OutputObject
    >
    AnticipateWithdrawBeacon: TypedContractEvent<
      AnticipateWithdrawBeaconEvent.InputTuple,
      AnticipateWithdrawBeaconEvent.OutputTuple,
      AnticipateWithdrawBeaconEvent.OutputObject
    >

    'BurnShares(address,uint256)': TypedContractEvent<BurnSharesEvent.InputTuple, BurnSharesEvent.OutputTuple, BurnSharesEvent.OutputObject>
    BurnShares: TypedContractEvent<BurnSharesEvent.InputTuple, BurnSharesEvent.OutputTuple, BurnSharesEvent.OutputObject>

    'DepositBase(address,uint256,uint8,address,bytes)': TypedContractEvent<
      DepositBaseEvent.InputTuple,
      DepositBaseEvent.OutputTuple,
      DepositBaseEvent.OutputObject
    >
    DepositBase: TypedContractEvent<DepositBaseEvent.InputTuple, DepositBaseEvent.OutputTuple, DepositBaseEvent.OutputObject>

    'DepositLimitWasReached(address,uint256)': TypedContractEvent<
      DepositLimitWasReachedEvent.InputTuple,
      DepositLimitWasReachedEvent.OutputTuple,
      DepositLimitWasReachedEvent.OutputObject
    >
    DepositLimitWasReached: TypedContractEvent<
      DepositLimitWasReachedEvent.InputTuple,
      DepositLimitWasReachedEvent.OutputTuple,
      DepositLimitWasReachedEvent.OutputObject
    >

    'MintFeeShares(address,uint256,uint8,uint8)': TypedContractEvent<
      MintFeeSharesEvent.InputTuple,
      MintFeeSharesEvent.OutputTuple,
      MintFeeSharesEvent.OutputObject
    >
    MintFeeShares: TypedContractEvent<MintFeeSharesEvent.InputTuple, MintFeeSharesEvent.OutputTuple, MintFeeSharesEvent.OutputObject>

    'MintShares(address,uint256)': TypedContractEvent<MintSharesEvent.InputTuple, MintSharesEvent.OutputTuple, MintSharesEvent.OutputObject>
    MintShares: TypedContractEvent<MintSharesEvent.InputTuple, MintSharesEvent.OutputTuple, MintSharesEvent.OutputObject>

    'NextValidatorOracle(uint256,address)': TypedContractEvent<
      NextValidatorOracleEvent.InputTuple,
      NextValidatorOracleEvent.OutputTuple,
      NextValidatorOracleEvent.OutputObject
    >
    NextValidatorOracle: TypedContractEvent<
      NextValidatorOracleEvent.InputTuple,
      NextValidatorOracleEvent.OutputTuple,
      NextValidatorOracleEvent.OutputObject
    >

    'ProcessStakeRewards(uint256,uint256)': TypedContractEvent<
      ProcessStakeRewardsEvent.InputTuple,
      ProcessStakeRewardsEvent.OutputTuple,
      ProcessStakeRewardsEvent.OutputObject
    >
    ProcessStakeRewards: TypedContractEvent<
      ProcessStakeRewardsEvent.InputTuple,
      ProcessStakeRewardsEvent.OutputTuple,
      ProcessStakeRewardsEvent.OutputObject
    >

    'ProcessStakeValidator(address,uint256)': TypedContractEvent<
      ProcessStakeValidatorEvent.InputTuple,
      ProcessStakeValidatorEvent.OutputTuple,
      ProcessStakeValidatorEvent.OutputObject
    >
    ProcessStakeValidator: TypedContractEvent<
      ProcessStakeValidatorEvent.InputTuple,
      ProcessStakeValidatorEvent.OutputTuple,
      ProcessStakeValidatorEvent.OutputObject
    >

    'ReceiveEther(uint256)': TypedContractEvent<ReceiveEtherEvent.InputTuple, ReceiveEtherEvent.OutputTuple, ReceiveEtherEvent.OutputObject>
    ReceiveEther: TypedContractEvent<ReceiveEtherEvent.InputTuple, ReceiveEtherEvent.OutputTuple, ReceiveEtherEvent.OutputObject>

    'RemovePool(address)': TypedContractEvent<RemovePoolEvent.InputTuple, RemovePoolEvent.OutputTuple, RemovePoolEvent.OutputObject>
    RemovePool: TypedContractEvent<RemovePoolEvent.InputTuple, RemovePoolEvent.OutputTuple, RemovePoolEvent.OutputObject>

    'RemoveValidatorOracle(address)': TypedContractEvent<
      RemoveValidatorOracleEvent.InputTuple,
      RemoveValidatorOracleEvent.OutputTuple,
      RemoveValidatorOracleEvent.OutputObject
    >
    RemoveValidatorOracle: TypedContractEvent<
      RemoveValidatorOracleEvent.InputTuple,
      RemoveValidatorOracleEvent.OutputTuple,
      RemoveValidatorOracleEvent.OutputObject
    >

    'RequestAddValidator(address,uint256,uint32,bytes)': TypedContractEvent<
      RequestAddValidatorEvent.InputTuple,
      RequestAddValidatorEvent.OutputTuple,
      RequestAddValidatorEvent.OutputObject
    >
    RequestAddValidator: TypedContractEvent<
      RequestAddValidatorEvent.InputTuple,
      RequestAddValidatorEvent.OutputTuple,
      RequestAddValidatorEvent.OutputObject
    >

    'SetAdapter(address)': TypedContractEvent<SetAdapterEvent.InputTuple, SetAdapterEvent.OutputTuple, SetAdapterEvent.OutputObject>
    SetAdapter: TypedContractEvent<SetAdapterEvent.InputTuple, SetAdapterEvent.OutputTuple, SetAdapterEvent.OutputObject>

    'SetAntiFraudStatus(address,address,bool)': TypedContractEvent<
      SetAntiFraudStatusEvent.InputTuple,
      SetAntiFraudStatusEvent.OutputTuple,
      SetAntiFraudStatusEvent.OutputObject
    >
    SetAntiFraudStatus: TypedContractEvent<
      SetAntiFraudStatusEvent.InputTuple,
      SetAntiFraudStatusEvent.OutputTuple,
      SetAntiFraudStatusEvent.OutputObject
    >

    'SetBeaconBalance(uint256)': TypedContractEvent<
      SetBeaconBalanceEvent.InputTuple,
      SetBeaconBalanceEvent.OutputTuple,
      SetBeaconBalanceEvent.OutputObject
    >
    SetBeaconBalance: TypedContractEvent<
      SetBeaconBalanceEvent.InputTuple,
      SetBeaconBalanceEvent.OutputTuple,
      SetBeaconBalanceEvent.OutputObject
    >

    'SetConfig(tuple)': TypedContractEvent<SetConfigEvent.InputTuple, SetConfigEvent.OutputTuple, SetConfigEvent.OutputObject>
    SetConfig: TypedContractEvent<SetConfigEvent.InputTuple, SetConfigEvent.OutputTuple, SetConfigEvent.OutputObject>

    'SetFee(uint8,uint256,uint256[])': TypedContractEvent<SetFeeEvent.InputTuple, SetFeeEvent.OutputTuple, SetFeeEvent.OutputObject>
    SetFee: TypedContractEvent<SetFeeEvent.InputTuple, SetFeeEvent.OutputTuple, SetFeeEvent.OutputObject>

    'SetFeeAddress(uint8,address)': TypedContractEvent<
      SetFeeAddressEvent.InputTuple,
      SetFeeAddressEvent.OutputTuple,
      SetFeeAddressEvent.OutputObject
    >
    SetFeeAddress: TypedContractEvent<SetFeeAddressEvent.InputTuple, SetFeeAddressEvent.OutputTuple, SetFeeAddressEvent.OutputObject>

    'SetRouter(address)': TypedContractEvent<SetRouterEvent.InputTuple, SetRouterEvent.OutputTuple, SetRouterEvent.OutputObject>
    SetRouter: TypedContractEvent<SetRouterEvent.InputTuple, SetRouterEvent.OutputTuple, SetRouterEvent.OutputObject>

    'SetStakeTogether(address)': TypedContractEvent<
      SetStakeTogetherEvent.InputTuple,
      SetStakeTogetherEvent.OutputTuple,
      SetStakeTogetherEvent.OutputObject
    >
    SetStakeTogether: TypedContractEvent<
      SetStakeTogetherEvent.InputTuple,
      SetStakeTogetherEvent.OutputTuple,
      SetStakeTogetherEvent.OutputObject
    >

    'SetValidatorSize(uint256)': TypedContractEvent<
      SetValidatorSizeEvent.InputTuple,
      SetValidatorSizeEvent.OutputTuple,
      SetValidatorSizeEvent.OutputObject
    >
    SetValidatorSize: TypedContractEvent<
      SetValidatorSizeEvent.InputTuple,
      SetValidatorSizeEvent.OutputTuple,
      SetValidatorSizeEvent.OutputObject
    >

    'SetWithdrawBalance(uint256)': TypedContractEvent<
      SetWithdrawBalanceEvent.InputTuple,
      SetWithdrawBalanceEvent.OutputTuple,
      SetWithdrawBalanceEvent.OutputObject
    >
    SetWithdrawBalance: TypedContractEvent<
      SetWithdrawBalanceEvent.InputTuple,
      SetWithdrawBalanceEvent.OutputTuple,
      SetWithdrawBalanceEvent.OutputObject
    >

    'SetWithdrawalsCredentials(bytes)': TypedContractEvent<
      SetWithdrawalsCredentialsEvent.InputTuple,
      SetWithdrawalsCredentialsEvent.OutputTuple,
      SetWithdrawalsCredentialsEvent.OutputObject
    >
    SetWithdrawalsCredentials: TypedContractEvent<
      SetWithdrawalsCredentialsEvent.InputTuple,
      SetWithdrawalsCredentialsEvent.OutputTuple,
      SetWithdrawalsCredentialsEvent.OutputObject
    >

    'TransferShares(address,address,uint256)': TypedContractEvent<
      TransferSharesEvent.InputTuple,
      TransferSharesEvent.OutputTuple,
      TransferSharesEvent.OutputObject
    >
    TransferShares: TypedContractEvent<TransferSharesEvent.InputTuple, TransferSharesEvent.OutputTuple, TransferSharesEvent.OutputObject>

    'UpdateDelegations(address,tuple[])': TypedContractEvent<
      UpdateDelegationsEvent.InputTuple,
      UpdateDelegationsEvent.OutputTuple,
      UpdateDelegationsEvent.OutputObject
    >
    UpdateDelegations: TypedContractEvent<
      UpdateDelegationsEvent.InputTuple,
      UpdateDelegationsEvent.OutputTuple,
      UpdateDelegationsEvent.OutputObject
    >

    'WithdrawBase(address,uint256,uint8,address)': TypedContractEvent<
      WithdrawBaseEvent.InputTuple,
      WithdrawBaseEvent.OutputTuple,
      WithdrawBaseEvent.OutputObject
    >
    WithdrawBase: TypedContractEvent<WithdrawBaseEvent.InputTuple, WithdrawBaseEvent.OutputTuple, WithdrawBaseEvent.OutputObject>

    'WithdrawalsLimitWasReached(address,uint256,uint8)': TypedContractEvent<
      WithdrawalsLimitWasReachedEvent.InputTuple,
      WithdrawalsLimitWasReachedEvent.OutputTuple,
      WithdrawalsLimitWasReachedEvent.OutputObject
    >
    WithdrawalsLimitWasReached: TypedContractEvent<
      WithdrawalsLimitWasReachedEvent.InputTuple,
      WithdrawalsLimitWasReachedEvent.OutputTuple,
      WithdrawalsLimitWasReachedEvent.OutputObject
    >
  }
}
