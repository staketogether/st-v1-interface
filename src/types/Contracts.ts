// Generated by @wagmi/cli@1.3.0 on 15/08/2023 at 16:12:53
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig
} from 'wagmi'
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Airdrop
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const airdropABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'merkleRoot', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'AddAirdropMerkleRoot'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'poolsRoot', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'operatorsRoot', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'stakeRoot', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'withdrawalsRoot', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'rewardsRoot', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'AddMerkleRoots'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'AdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ClaimAirdrop'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'claimer', internalType: 'address', type: 'address', indexed: true },
      { name: 'numClaims', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'totalAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ClaimAirdropBatch'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '_epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: '_account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ClaimRewards'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'claimer', internalType: 'address', type: 'address', indexed: true },
      { name: 'numClaims', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'totalAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ClaimRewardsBatch'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ReceiveEther'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true }
    ],
    name: 'RoleAdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleGranted'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleRevoked'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'maxBatchSize', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetMaxBatchSize'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'router', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetRouter'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'stakeTogether', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetStakeTogether'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_epoch', internalType: 'uint256', type: 'uint256' },
      { name: 'merkleRoot', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'addAirdropMerkleRoot',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'airdropsMerkleRoots',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_epoch', internalType: 'uint256', type: 'uint256' },
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' }
    ],
    name: 'claimAirdrop',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_epochs', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_accounts', internalType: 'address[]', type: 'address[]' },
      { name: '_sharesAmounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'merkleProofs', internalType: 'bytes32[][]', type: 'bytes32[][]' }
    ],
    name: 'claimAirdropBatch',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'grantRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'initialize', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_epoch', internalType: 'uint256', type: 'uint256' },
      { name: '_account', internalType: 'address', type: 'address' }
    ],
    name: 'isAirdropClaimed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxBatchSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'renounceRole',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'revokeRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'router',
    outputs: [{ name: '', internalType: 'contract Router', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_maxBatchSize', internalType: 'uint256', type: 'uint256' }],
    name: 'setMaxBatchSize',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_router', internalType: 'address', type: 'address' }],
    name: 'setRouter',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_stakeTogether', internalType: 'address', type: 'address' }],
    name: 'setStakeTogether',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogether',
    outputs: [{ name: '', internalType: 'contract StakeTogether', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'upgradeToAndCall',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'payable', type: 'receive' }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StakeTogether
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stakeTogetherABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'pool', internalType: 'address', type: 'address', indexed: false },
      { name: 'listed', internalType: 'bool', type: 'bool', indexed: false },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'AddPool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: true }],
    name: 'AddValidatorOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'AdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BurnShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ClaimRewards'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'creator', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'publicKey', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'withdrawalCredentials', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'signature', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'depositDataRoot', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'CreateValidator'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'depositType', internalType: 'enum IStakeTogether.DepositType', type: 'uint8', indexed: false },
      { name: 'referral', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'DepositBase'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'DepositLimitReached'
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'feeType', internalType: 'enum IStakeTogether.FeeType', type: 'uint8', indexed: false },
      { name: 'feeRole', internalType: 'enum IStakeTogether.FeeRole', type: 'uint8', indexed: false }
    ],
    name: 'MintRewards'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ReceiveEther'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'RefundPool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'pool', internalType: 'address', type: 'address', indexed: false }],
    name: 'RemovePool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'publicKey', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'receivedAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'RemoveValidator'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: true }],
    name: 'RemoveValidatorOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true }
    ],
    name: 'RoleAdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleGranted'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleRevoked'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetBeaconBalance'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'config',
        internalType: 'struct IStakeTogether.Config',
        type: 'tuple',
        components: [
          { name: 'blocksPerDay', internalType: 'uint256', type: 'uint256' },
          { name: 'depositLimit', internalType: 'uint256', type: 'uint256' },
          { name: 'maxDelegations', internalType: 'uint256', type: 'uint256' },
          { name: 'minDepositAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'minWithdrawAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'poolSize', internalType: 'uint256', type: 'uint256' },
          { name: 'validatorSize', internalType: 'uint256', type: 'uint256' },
          { name: 'withdrawalLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'feature',
            internalType: 'struct IStakeTogether.Feature',
            type: 'tuple',
            components: [
              { name: 'AddPool', internalType: 'bool', type: 'bool' },
              { name: 'Deposit', internalType: 'bool', type: 'bool' },
              { name: 'WithdrawPool', internalType: 'bool', type: 'bool' },
              { name: 'WithdrawValidator', internalType: 'bool', type: 'bool' }
            ]
          }
        ],
        indexed: false
      }
    ],
    name: 'SetConfig'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'feeType', internalType: 'enum IStakeTogether.FeeType', type: 'uint8', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'mathType', internalType: 'enum IStakeTogether.FeeMath', type: 'uint8', indexed: false },
      { name: 'allocations', internalType: 'uint256[]', type: 'uint256[]', indexed: false }
    ],
    name: 'SetFee'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'enum IStakeTogether.FeeRole', type: 'uint8', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'SetFeeAddress'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'router', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetRouter'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'stakeTogether', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetStakeTogether'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'newValidatorSize', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetValidatorSize'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'withdrawalCredentials', internalType: 'bytes', type: 'bytes', indexed: true }],
    name: 'SetWithdrawalsCredentials'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'delegations',
        internalType: 'struct IStakeTogether.Delegation[]',
        type: 'tuple[]',
        components: [
          { name: 'pool', internalType: 'address', type: 'address' },
          { name: 'shares', internalType: 'uint256', type: 'uint256' }
        ],
        indexed: false
      }
    ],
    name: 'UpdateDelegations'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'withdrawType', internalType: 'enum IStakeTogether.WithdrawType', type: 'uint8', indexed: false }
    ],
    name: 'WithdrawBase'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'WithdrawalsLimitReached'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ORACLE_VALIDATOR_MANAGER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ORACLE_VALIDATOR_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ORACLE_VALIDATOR_SENTINEL_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'POOL_MANAGER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_pool', internalType: 'address', type: 'address' },
      { name: '_listed', internalType: 'bool', type: 'bool' }
    ],
    name: 'addPool',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_oracleAddress', internalType: 'address', type: 'address' }],
    name: 'addValidatorOracle',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'beaconBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'burnFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'claimRewards',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'config',
    outputs: [
      { name: 'blocksPerDay', internalType: 'uint256', type: 'uint256' },
      { name: 'depositLimit', internalType: 'uint256', type: 'uint256' },
      { name: 'maxDelegations', internalType: 'uint256', type: 'uint256' },
      { name: 'minDepositAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minWithdrawAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'poolSize', internalType: 'uint256', type: 'uint256' },
      { name: 'validatorSize', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawalLimit', internalType: 'uint256', type: 'uint256' },
      {
        name: 'feature',
        internalType: 'struct IStakeTogether.Feature',
        type: 'tuple',
        components: [
          { name: 'AddPool', internalType: 'bool', type: 'bool' },
          { name: 'Deposit', internalType: 'bool', type: 'bool' },
          { name: 'WithdrawPool', internalType: 'bool', type: 'bool' },
          { name: 'WithdrawValidator', internalType: 'bool', type: 'bool' }
        ]
      }
    ]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_publicKey', internalType: 'bytes', type: 'bytes' },
      { name: '_signature', internalType: 'bytes', type: 'bytes' },
      { name: '_depositDataRoot', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'createValidator',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'currentOracleIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'deposit',
    outputs: [{ name: '', internalType: 'contract IDepositContract', type: 'address' }]
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_referral', internalType: 'address', type: 'address' }
    ],
    name: 'depositDonation',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: '_delegations',
        internalType: 'struct IStakeTogether.Delegation[]',
        type: 'tuple[]',
        components: [
          { name: 'pool', internalType: 'address', type: 'address' },
          { name: 'shares', internalType: 'uint256', type: 'uint256' }
        ]
      },
      { name: '_referral', internalType: 'address', type: 'address' }
    ],
    name: 'depositPool',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_feeType', internalType: 'enum IStakeTogether.FeeType', type: 'uint8' }],
    name: 'estimateFeeFixed',
    outputs: [
      { name: '_shares', internalType: 'uint256[4]', type: 'uint256[4]' },
      { name: '_amounts', internalType: 'uint256[4]', type: 'uint256[4]' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_feeType', internalType: 'enum IStakeTogether.FeeType', type: 'uint8' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'estimateFeePercentage',
    outputs: [
      { name: '_shares', internalType: 'uint256[4]', type: 'uint256[4]' },
      { name: '_amounts', internalType: 'uint256[4]', type: 'uint256[4]' }
    ]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'forceNextValidatorOracle',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_role', internalType: 'enum IStakeTogether.FeeRole', type: 'uint8' }],
    name: 'getFeeAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getFeesRoles',
    outputs: [{ name: '', internalType: 'enum IStakeTogether.FeeRole[4]', type: 'uint8[4]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'grantRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_router', internalType: 'address', type: 'address' },
      { name: '_withdrawals', internalType: 'address', type: 'address' },
      { name: '_deposit', internalType: 'address', type: 'address' },
      { name: '_withdrawalCredentials', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'initialize',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_oracleAddress', internalType: 'address', type: 'address' }],
    name: 'isValidatorOracle',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lastResetBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_address', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' },
      { name: '_feeType', internalType: 'enum IStakeTogether.FeeType', type: 'uint8' },
      { name: '_feeRole', internalType: 'enum IStakeTogether.FeeRole', type: 'uint8' }
    ],
    name: 'mintRewards',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'permit',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'refundPool', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_pool', internalType: 'address', type: 'address' }],
    name: 'removePool',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_epoch', internalType: 'uint256', type: 'uint256' },
      { name: '_publicKey', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'removeValidator',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_oracleAddress', internalType: 'address', type: 'address' }],
    name: 'removeValidatorOracle',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'renounceRole',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'revokeRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'router',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'setBeaconBalance',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_config',
        internalType: 'struct IStakeTogether.Config',
        type: 'tuple',
        components: [
          { name: 'blocksPerDay', internalType: 'uint256', type: 'uint256' },
          { name: 'depositLimit', internalType: 'uint256', type: 'uint256' },
          { name: 'maxDelegations', internalType: 'uint256', type: 'uint256' },
          { name: 'minDepositAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'minWithdrawAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'poolSize', internalType: 'uint256', type: 'uint256' },
          { name: 'validatorSize', internalType: 'uint256', type: 'uint256' },
          { name: 'withdrawalLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'feature',
            internalType: 'struct IStakeTogether.Feature',
            type: 'tuple',
            components: [
              { name: 'AddPool', internalType: 'bool', type: 'bool' },
              { name: 'Deposit', internalType: 'bool', type: 'bool' },
              { name: 'WithdrawPool', internalType: 'bool', type: 'bool' },
              { name: 'WithdrawValidator', internalType: 'bool', type: 'bool' }
            ]
          }
        ]
      }
    ],
    name: 'setConfig',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_feeType', internalType: 'enum IStakeTogether.FeeType', type: 'uint8' },
      { name: '_value', internalType: 'uint256', type: 'uint256' },
      { name: '_mathType', internalType: 'enum IStakeTogether.FeeMath', type: 'uint8' },
      { name: '_allocations', internalType: 'uint256[]', type: 'uint256[]' }
    ],
    name: 'setFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_role', internalType: 'enum IStakeTogether.FeeRole', type: 'uint8' },
      { name: '_address', internalType: 'address payable', type: 'address' }
    ],
    name: 'setFeeAddress',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'shares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'sharesByWei',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalDeposited',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalWithdrawn',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_delegations',
        internalType: 'struct IStakeTogether.Delegation[]',
        type: 'tuple[]',
        components: [
          { name: 'pool', internalType: 'address', type: 'address' },
          { name: 'shares', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ],
    name: 'updateDelegations',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'upgradeToAndCall',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'weiByShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      {
        name: '_delegations',
        internalType: 'struct IStakeTogether.Delegation[]',
        type: 'tuple[]',
        components: [
          { name: 'pool', internalType: 'address', type: 'address' },
          { name: 'shares', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ],
    name: 'withdrawPool',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      {
        name: '_delegations',
        internalType: 'struct IStakeTogether.Delegation[]',
        type: 'tuple[]',
        components: [
          { name: 'pool', internalType: 'address', type: 'address' },
          { name: 'shares', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ],
    name: 'withdrawValidator',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'withdrawalCredentials',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'withdrawals',
    outputs: [{ name: '', internalType: 'contract Withdrawals', type: 'address' }]
  },
  { stateMutability: 'payable', type: 'receive' }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Router
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const routerABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'oracle', internalType: 'address', type: 'address', indexed: true }],
    name: 'AddReportOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'AdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'penalties', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BlacklistReportOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'penalties', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BlacklistReportOracleManually'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'ConsensusApprove'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'ConsensusNotReached'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false },
      {
        name: 'report',
        internalType: 'struct IRouter.Report',
        type: 'tuple',
        components: [
          { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
          { name: 'epoch', internalType: 'uint256', type: 'uint256' },
          { name: 'profitAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'lossAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'merkleRoot', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'validatorsToExit',
            internalType: 'struct IRouter.ValidatorOracle[]',
            type: 'tuple[]',
            components: [
              { name: 'oracle', internalType: 'address', type: 'address' },
              { name: 'validators', internalType: 'bytes[]', type: 'bytes[]' }
            ]
          },
          { name: 'exitedValidators', internalType: 'bytes[]', type: 'bytes[]' },
          { name: 'withdrawAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'restWithdrawAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'routerExtraAmount', internalType: 'uint256', type: 'uint256' }
        ],
        indexed: false
      }
    ],
    name: 'ExecuteReport'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'InvalidateConsensus'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'penalties', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'blacklisted', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'PenalizeReportOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ReceiveEther'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'oracle', internalType: 'address', type: 'address', indexed: true }],
    name: 'RemoveReportOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'publicKeys', internalType: 'bytes[]', type: 'bytes[]', indexed: false }],
    name: 'RequestValidatorsExit'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'penalties', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'RewardReportOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true }
    ],
    name: 'RoleAdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleGranted'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleRevoked'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'config',
        internalType: 'struct IRouter.Config',
        type: 'tuple',
        components: [
          { name: 'bunkerMode', internalType: 'bool', type: 'bool' },
          { name: 'maxValidatorsToExit', internalType: 'uint256', type: 'uint256' },
          { name: 'minBlocksBeforeExecution', internalType: 'uint256', type: 'uint256' },
          { name: 'minReportOracleQuorum', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleBlackListLimit', internalType: 'uint256', type: 'uint256' },
          { name: 'reportBlockFrequency', internalType: 'uint256', type: 'uint256' },
          { name: 'reportOracleQuorum', internalType: 'uint256', type: 'uint256' }
        ],
        indexed: false
      }
    ],
    name: 'SetConfig'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetLastConsensusEpoch'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'stakeTogether', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetStakeTogether'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'SkipNextBlockInterval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'SubmitReport'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'penalties', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'UnBlacklistReportOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'quorum', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'UpdateReportOracleQuorum'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'validators',
        internalType: 'struct IRouter.ValidatorOracle[]',
        type: 'tuple[]',
        components: [
          { name: 'oracle', internalType: 'address', type: 'address' },
          { name: 'validators', internalType: 'bytes[]', type: 'bytes[]' }
        ],
        indexed: false
      }
    ],
    name: 'ValidatorsToExit'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ORACLE_REPORT_MANAGER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ORACLE_REPORT_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ORACLE_REPORT_SENTINEL_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_oracle', internalType: 'address', type: 'address' }],
    name: 'addReportOracle',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_sentinel', internalType: 'address', type: 'address' }],
    name: 'addSentinel',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'airdrop',
    outputs: [{ name: '', internalType: 'contract Airdrop', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: '_report',
        internalType: 'struct IRouter.Report',
        type: 'tuple',
        components: [
          { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
          { name: 'epoch', internalType: 'uint256', type: 'uint256' },
          { name: 'profitAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'lossAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'merkleRoot', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'validatorsToExit',
            internalType: 'struct IRouter.ValidatorOracle[]',
            type: 'tuple[]',
            components: [
              { name: 'oracle', internalType: 'address', type: 'address' },
              { name: 'validators', internalType: 'bytes[]', type: 'bytes[]' }
            ]
          },
          { name: 'exitedValidators', internalType: 'bytes[]', type: 'bytes[]' },
          { name: 'withdrawAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'restWithdrawAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'routerExtraAmount', internalType: 'uint256', type: 'uint256' }
        ]
      },
      { name: '_hash', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'auditReport',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_oracle', internalType: 'address', type: 'address' }],
    name: 'blacklistReportOracle',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'config',
    outputs: [
      { name: 'bunkerMode', internalType: 'bool', type: 'bool' },
      { name: 'maxValidatorsToExit', internalType: 'uint256', type: 'uint256' },
      { name: 'minBlocksBeforeExecution', internalType: 'uint256', type: 'uint256' },
      { name: 'minReportOracleQuorum', internalType: 'uint256', type: 'uint256' },
      { name: 'oracleBlackListLimit', internalType: 'uint256', type: 'uint256' },
      { name: 'reportBlockFrequency', internalType: 'uint256', type: 'uint256' },
      { name: 'reportOracleQuorum', internalType: 'uint256', type: 'uint256' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'consensusInvalidatedReport',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'consensusReport',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_hash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: '_report',
        internalType: 'struct IRouter.Report',
        type: 'tuple',
        components: [
          { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
          { name: 'epoch', internalType: 'uint256', type: 'uint256' },
          { name: 'profitAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'lossAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'merkleRoot', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'validatorsToExit',
            internalType: 'struct IRouter.ValidatorOracle[]',
            type: 'tuple[]',
            components: [
              { name: 'oracle', internalType: 'address', type: 'address' },
              { name: 'validators', internalType: 'bytes[]', type: 'bytes[]' }
            ]
          },
          { name: 'exitedValidators', internalType: 'bytes[]', type: 'bytes[]' },
          { name: 'withdrawAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'restWithdrawAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'routerExtraAmount', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ],
    name: 'executeReport',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'executedReports',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'grantRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_airdrop', internalType: 'address', type: 'address' },
      { name: '_withdrawals', internalType: 'address', type: 'address' }
    ],
    name: 'initialize',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_epoch', internalType: 'uint256', type: 'uint256' },
      { name: '_hash', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'invalidateConsensus',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_epoch', internalType: 'uint256', type: 'uint256' },
      { name: '_hash', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'isReadyToExecute',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_epoch', internalType: 'uint256', type: 'uint256' }],
    name: 'isReadyToSubmit',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_oracle', internalType: 'address', type: 'address' }],
    name: 'isReportOracle',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_oracle', internalType: 'address', type: 'address' }],
    name: 'isReportOracleBlackListed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lastConsensusEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lastExecutedConsensusEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: '', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'oracleReports',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'oracleReportsVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'oracle', internalType: 'address', type: 'address' }],
    name: 'removeReportOracle',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_sentinel', internalType: 'address', type: 'address' }],
    name: 'removeSentinel',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'renounceRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reportBlockNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'reportExecutionBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'reportHistoric',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'reportOraclesBlacklist',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'publicKeys', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'requestValidatorsExit',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'revokeRole',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_config',
        internalType: 'struct IRouter.Config',
        type: 'tuple',
        components: [
          { name: 'bunkerMode', internalType: 'bool', type: 'bool' },
          { name: 'maxValidatorsToExit', internalType: 'uint256', type: 'uint256' },
          { name: 'minBlocksBeforeExecution', internalType: 'uint256', type: 'uint256' },
          { name: 'minReportOracleQuorum', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleBlackListLimit', internalType: 'uint256', type: 'uint256' },
          { name: 'reportBlockFrequency', internalType: 'uint256', type: 'uint256' },
          { name: 'reportOracleQuorum', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ],
    name: 'setConfig',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_epoch', internalType: 'uint256', type: 'uint256' }],
    name: 'setLastConsensusEpoch',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_stakeTogether', internalType: 'address', type: 'address' }],
    name: 'setStakeTogether',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogether',
    outputs: [{ name: '', internalType: 'contract StakeTogether', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_epoch', internalType: 'uint256', type: 'uint256' },
      { name: '_hash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: '_report',
        internalType: 'struct IRouter.Report',
        type: 'tuple',
        components: [
          { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
          { name: 'epoch', internalType: 'uint256', type: 'uint256' },
          { name: 'profitAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'lossAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'merkleRoot', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'validatorsToExit',
            internalType: 'struct IRouter.ValidatorOracle[]',
            type: 'tuple[]',
            components: [
              { name: 'oracle', internalType: 'address', type: 'address' },
              { name: 'validators', internalType: 'bytes[]', type: 'bytes[]' }
            ]
          },
          { name: 'exitedValidators', internalType: 'bytes[]', type: 'bytes[]' },
          { name: 'withdrawAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'restWithdrawAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'routerExtraAmount', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ],
    name: 'submitReport',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalReportOracles',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_oracle', internalType: 'address', type: 'address' }],
    name: 'unBlacklistReportOracle',
    outputs: []
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'upgradeToAndCall',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'withdrawals',
    outputs: [{ name: '', internalType: 'contract Withdrawals', type: 'address' }]
  },
  { stateMutability: 'payable', type: 'receive' }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Withdrawals
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const withdrawalsABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'AdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded'
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ReceiveEther'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true }
    ],
    name: 'RoleAdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleGranted'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleRevoked'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'stakeTogether', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetStakeTogether'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Withdraw'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'burnFrom',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'grantRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'initialize', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'isWithdrawReady',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'mint',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'permit',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'renounceRole',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'revokeRole',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_stakeTogether', internalType: 'address', type: 'address' }],
    name: 'setStakeTogether',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogether',
    outputs: [{ name: '', internalType: 'contract StakeTogether', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'upgradeToAndCall',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'withdraw',
    outputs: []
  },
  { stateMutability: 'payable', type: 'receive' }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MockAirdrop
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mockAirdropABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'merkleRoot', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'AddAirdropMerkleRoot'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'poolsRoot', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'operatorsRoot', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'stakeRoot', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'withdrawalsRoot', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'rewardsRoot', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'AddMerkleRoots'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'AdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ClaimAirdrop'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'claimer', internalType: 'address', type: 'address', indexed: true },
      { name: 'numClaims', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'totalAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ClaimAirdropBatch'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '_epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: '_account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ClaimRewards'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'claimer', internalType: 'address', type: 'address', indexed: true },
      { name: 'numClaims', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'totalAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ClaimRewardsBatch'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ReceiveEther'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true }
    ],
    name: 'RoleAdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleGranted'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleRevoked'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'maxBatchSize', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetMaxBatchSize'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'router', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetRouter'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'stakeTogether', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetStakeTogether'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'airdropsMerkleRoots',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'grantRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'initializeV2', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxBatchSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'renounceRole',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'revokeRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'router',
    outputs: [{ name: '', internalType: 'contract Router', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogether',
    outputs: [{ name: '', internalType: 'contract StakeTogether', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'upgradeToAndCall',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MockRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mockRouterABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'oracle', internalType: 'address', type: 'address', indexed: true }],
    name: 'AddReportOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'AdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'penalties', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BlacklistReportOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'penalties', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BlacklistReportOracleManually'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'ConsensusApprove'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'ConsensusNotReached'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false },
      {
        name: 'report',
        internalType: 'struct IRouter.Report',
        type: 'tuple',
        components: [
          { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
          { name: 'epoch', internalType: 'uint256', type: 'uint256' },
          { name: 'profitAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'lossAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'merkleRoot', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'validatorsToExit',
            internalType: 'struct IRouter.ValidatorOracle[]',
            type: 'tuple[]',
            components: [
              { name: 'oracle', internalType: 'address', type: 'address' },
              { name: 'validators', internalType: 'bytes[]', type: 'bytes[]' }
            ]
          },
          { name: 'exitedValidators', internalType: 'bytes[]', type: 'bytes[]' },
          { name: 'withdrawAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'restWithdrawAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'routerExtraAmount', internalType: 'uint256', type: 'uint256' }
        ],
        indexed: false
      }
    ],
    name: 'ExecuteReport'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'InvalidateConsensus'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'penalties', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'blacklisted', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'PenalizeReportOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ReceiveEther'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'oracle', internalType: 'address', type: 'address', indexed: true }],
    name: 'RemoveReportOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'publicKeys', internalType: 'bytes[]', type: 'bytes[]', indexed: false }],
    name: 'RequestValidatorsExit'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'penalties', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'RewardReportOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true }
    ],
    name: 'RoleAdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleGranted'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleRevoked'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'config',
        internalType: 'struct IRouter.Config',
        type: 'tuple',
        components: [
          { name: 'bunkerMode', internalType: 'bool', type: 'bool' },
          { name: 'maxValidatorsToExit', internalType: 'uint256', type: 'uint256' },
          { name: 'minBlocksBeforeExecution', internalType: 'uint256', type: 'uint256' },
          { name: 'minReportOracleQuorum', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleBlackListLimit', internalType: 'uint256', type: 'uint256' },
          { name: 'reportBlockFrequency', internalType: 'uint256', type: 'uint256' },
          { name: 'reportOracleQuorum', internalType: 'uint256', type: 'uint256' }
        ],
        indexed: false
      }
    ],
    name: 'SetConfig'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetLastConsensusEpoch'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'stakeTogether', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetStakeTogether'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'SkipNextBlockInterval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'SubmitReport'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'penalties', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'UnBlacklistReportOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'quorum', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'UpdateReportOracleQuorum'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'validators',
        internalType: 'struct IRouter.ValidatorOracle[]',
        type: 'tuple[]',
        components: [
          { name: 'oracle', internalType: 'address', type: 'address' },
          { name: 'validators', internalType: 'bytes[]', type: 'bytes[]' }
        ],
        indexed: false
      }
    ],
    name: 'ValidatorsToExit'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ORACLE_REPORT_MANAGER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ORACLE_REPORT_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ORACLE_REPORT_SENTINEL_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'airdrop',
    outputs: [{ name: '', internalType: 'contract Airdrop', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'config',
    outputs: [
      { name: 'bunkerMode', internalType: 'bool', type: 'bool' },
      { name: 'maxValidatorsToExit', internalType: 'uint256', type: 'uint256' },
      { name: 'minBlocksBeforeExecution', internalType: 'uint256', type: 'uint256' },
      { name: 'minReportOracleQuorum', internalType: 'uint256', type: 'uint256' },
      { name: 'oracleBlackListLimit', internalType: 'uint256', type: 'uint256' },
      { name: 'reportBlockFrequency', internalType: 'uint256', type: 'uint256' },
      { name: 'reportOracleQuorum', internalType: 'uint256', type: 'uint256' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'consensusInvalidatedReport',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'consensusReport',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'executedReports',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'grantRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'initializeV2', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lastConsensusEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lastExecutedConsensusEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: '', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'oracleReports',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'oracleReportsVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'renounceRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reportBlockNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'reportExecutionBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'reportHistoric',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'reportOraclesBlacklist',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'revokeRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogether',
    outputs: [{ name: '', internalType: 'contract StakeTogether', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalReportOracles',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'upgradeToAndCall',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'withdrawals',
    outputs: [{ name: '', internalType: 'contract Withdrawals', type: 'address' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MockStakeTogether
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mockStakeTogetherABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'pool', internalType: 'address', type: 'address', indexed: false },
      { name: 'listed', internalType: 'bool', type: 'bool', indexed: false },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'AddPool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: true }],
    name: 'AddValidatorOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'AdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BurnShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ClaimRewards'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'creator', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'publicKey', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'withdrawalCredentials', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'signature', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'depositDataRoot', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'CreateValidator'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'depositType', internalType: 'enum IStakeTogether.DepositType', type: 'uint8', indexed: false },
      { name: 'referral', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'DepositBase'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'DepositLimitReached'
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'feeType', internalType: 'enum IStakeTogether.FeeType', type: 'uint8', indexed: false },
      { name: 'feeRole', internalType: 'enum IStakeTogether.FeeRole', type: 'uint8', indexed: false }
    ],
    name: 'MintRewards'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ReceiveEther'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'RefundPool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'pool', internalType: 'address', type: 'address', indexed: false }],
    name: 'RemovePool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'publicKey', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'receivedAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'RemoveValidator'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: true }],
    name: 'RemoveValidatorOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true }
    ],
    name: 'RoleAdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleGranted'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleRevoked'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetBeaconBalance'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'config',
        internalType: 'struct IStakeTogether.Config',
        type: 'tuple',
        components: [
          { name: 'blocksPerDay', internalType: 'uint256', type: 'uint256' },
          { name: 'depositLimit', internalType: 'uint256', type: 'uint256' },
          { name: 'maxDelegations', internalType: 'uint256', type: 'uint256' },
          { name: 'minDepositAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'minWithdrawAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'poolSize', internalType: 'uint256', type: 'uint256' },
          { name: 'validatorSize', internalType: 'uint256', type: 'uint256' },
          { name: 'withdrawalLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'feature',
            internalType: 'struct IStakeTogether.Feature',
            type: 'tuple',
            components: [
              { name: 'AddPool', internalType: 'bool', type: 'bool' },
              { name: 'Deposit', internalType: 'bool', type: 'bool' },
              { name: 'WithdrawPool', internalType: 'bool', type: 'bool' },
              { name: 'WithdrawValidator', internalType: 'bool', type: 'bool' }
            ]
          }
        ],
        indexed: false
      }
    ],
    name: 'SetConfig'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'feeType', internalType: 'enum IStakeTogether.FeeType', type: 'uint8', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'mathType', internalType: 'enum IStakeTogether.FeeMath', type: 'uint8', indexed: false },
      { name: 'allocations', internalType: 'uint256[]', type: 'uint256[]', indexed: false }
    ],
    name: 'SetFee'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'enum IStakeTogether.FeeRole', type: 'uint8', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'SetFeeAddress'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'router', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetRouter'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'stakeTogether', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetStakeTogether'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'newValidatorSize', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetValidatorSize'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'withdrawalCredentials', internalType: 'bytes', type: 'bytes', indexed: true }],
    name: 'SetWithdrawalsCredentials'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'delegations',
        internalType: 'struct IStakeTogether.Delegation[]',
        type: 'tuple[]',
        components: [
          { name: 'pool', internalType: 'address', type: 'address' },
          { name: 'shares', internalType: 'uint256', type: 'uint256' }
        ],
        indexed: false
      }
    ],
    name: 'UpdateDelegations'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'withdrawType', internalType: 'enum IStakeTogether.WithdrawType', type: 'uint8', indexed: false }
    ],
    name: 'WithdrawBase'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'WithdrawalsLimitReached'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ORACLE_VALIDATOR_MANAGER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ORACLE_VALIDATOR_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ORACLE_VALIDATOR_SENTINEL_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'POOL_MANAGER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'beaconBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'burnFrom',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'config',
    outputs: [
      { name: 'blocksPerDay', internalType: 'uint256', type: 'uint256' },
      { name: 'depositLimit', internalType: 'uint256', type: 'uint256' },
      { name: 'maxDelegations', internalType: 'uint256', type: 'uint256' },
      { name: 'minDepositAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minWithdrawAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'poolSize', internalType: 'uint256', type: 'uint256' },
      { name: 'validatorSize', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawalLimit', internalType: 'uint256', type: 'uint256' },
      {
        name: 'feature',
        internalType: 'struct IStakeTogether.Feature',
        type: 'tuple',
        components: [
          { name: 'AddPool', internalType: 'bool', type: 'bool' },
          { name: 'Deposit', internalType: 'bool', type: 'bool' },
          { name: 'WithdrawPool', internalType: 'bool', type: 'bool' },
          { name: 'WithdrawValidator', internalType: 'bool', type: 'bool' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'currentOracleIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'deposit',
    outputs: [{ name: '', internalType: 'contract IDepositContract', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'grantRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'initializeV2', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lastResetBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'permit',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'renounceRole',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'revokeRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'router',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'shares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalDeposited',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalWithdrawn',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'upgradeToAndCall',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'withdrawalCredentials',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'withdrawals',
    outputs: [{ name: '', internalType: 'contract Withdrawals', type: 'address' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MockWithdrawals
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mockWithdrawalsABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'AdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded'
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ReceiveEther'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true }
    ],
    name: 'RoleAdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleGranted'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleRevoked'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'stakeTogether', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetStakeTogether'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Withdraw'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'burnFrom',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'grantRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'initializeV2', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'permit',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'renounceRole',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'revokeRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogether',
    outputs: [{ name: '', internalType: 'contract StakeTogether', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'upgradeToAndCall',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAirdrop
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAirdropABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'merkleRoot', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'AddAirdropMerkleRoot'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'poolsRoot', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'operatorsRoot', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'stakeRoot', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'withdrawalsRoot', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'rewardsRoot', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'AddMerkleRoots'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ClaimAirdrop'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'claimer', internalType: 'address', type: 'address', indexed: true },
      { name: 'numClaims', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'totalAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ClaimAirdropBatch'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '_epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: '_account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ClaimRewards'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'claimer', internalType: 'address', type: 'address', indexed: true },
      { name: 'numClaims', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'totalAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ClaimRewardsBatch'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ReceiveEther'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'maxBatchSize', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetMaxBatchSize'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'router', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetRouter'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'stakeTogether', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetStakeTogether'
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IDepositContract
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iDepositContractABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'pubkey', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'withdrawal_credentials', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'amount', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'signature', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'index', internalType: 'bytes', type: 'bytes', indexed: false }
    ],
    name: 'DepositEvent'
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'pubkey', internalType: 'bytes', type: 'bytes' },
      { name: 'withdrawal_credentials', internalType: 'bytes', type: 'bytes' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
      { name: 'deposit_data_root', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'deposit',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'get_deposit_count',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'get_deposit_root',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iRouterABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'oracle', internalType: 'address', type: 'address', indexed: true }],
    name: 'AddReportOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'penalties', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BlacklistReportOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'penalties', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BlacklistReportOracleManually'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'ConsensusApprove'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'ConsensusNotReached'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false },
      {
        name: 'report',
        internalType: 'struct IRouter.Report',
        type: 'tuple',
        components: [
          { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
          { name: 'epoch', internalType: 'uint256', type: 'uint256' },
          { name: 'profitAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'lossAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'merkleRoot', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'validatorsToExit',
            internalType: 'struct IRouter.ValidatorOracle[]',
            type: 'tuple[]',
            components: [
              { name: 'oracle', internalType: 'address', type: 'address' },
              { name: 'validators', internalType: 'bytes[]', type: 'bytes[]' }
            ]
          },
          { name: 'exitedValidators', internalType: 'bytes[]', type: 'bytes[]' },
          { name: 'withdrawAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'restWithdrawAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'routerExtraAmount', internalType: 'uint256', type: 'uint256' }
        ],
        indexed: false
      }
    ],
    name: 'ExecuteReport'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'InvalidateConsensus'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'penalties', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'blacklisted', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'PenalizeReportOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ReceiveEther'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'oracle', internalType: 'address', type: 'address', indexed: true }],
    name: 'RemoveReportOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'publicKeys', internalType: 'bytes[]', type: 'bytes[]', indexed: false }],
    name: 'RequestValidatorsExit'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'penalties', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'RewardReportOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'config',
        internalType: 'struct IRouter.Config',
        type: 'tuple',
        components: [
          { name: 'bunkerMode', internalType: 'bool', type: 'bool' },
          { name: 'maxValidatorsToExit', internalType: 'uint256', type: 'uint256' },
          { name: 'minBlocksBeforeExecution', internalType: 'uint256', type: 'uint256' },
          { name: 'minReportOracleQuorum', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleBlackListLimit', internalType: 'uint256', type: 'uint256' },
          { name: 'reportBlockFrequency', internalType: 'uint256', type: 'uint256' },
          { name: 'reportOracleQuorum', internalType: 'uint256', type: 'uint256' }
        ],
        indexed: false
      }
    ],
    name: 'SetConfig'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetLastConsensusEpoch'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'stakeTogether', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetStakeTogether'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'SkipNextBlockInterval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'SubmitReport'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'penalties', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'UnBlacklistReportOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'quorum', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'UpdateReportOracleQuorum'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'validators',
        internalType: 'struct IRouter.ValidatorOracle[]',
        type: 'tuple[]',
        components: [
          { name: 'oracle', internalType: 'address', type: 'address' },
          { name: 'validators', internalType: 'bytes[]', type: 'bytes[]' }
        ],
        indexed: false
      }
    ],
    name: 'ValidatorsToExit'
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IStakeTogether
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iStakeTogetherABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'pool', internalType: 'address', type: 'address', indexed: false },
      { name: 'listed', internalType: 'bool', type: 'bool', indexed: false },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'AddPool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: true }],
    name: 'AddValidatorOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BurnShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ClaimRewards'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'creator', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'publicKey', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'withdrawalCredentials', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'signature', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'depositDataRoot', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'CreateValidator'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'depositType', internalType: 'enum IStakeTogether.DepositType', type: 'uint8', indexed: false },
      { name: 'referral', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'DepositBase'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'DepositLimitReached'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'feeType', internalType: 'enum IStakeTogether.FeeType', type: 'uint8', indexed: false },
      { name: 'feeRole', internalType: 'enum IStakeTogether.FeeRole', type: 'uint8', indexed: false }
    ],
    name: 'MintRewards'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ReceiveEther'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'RefundPool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'pool', internalType: 'address', type: 'address', indexed: false }],
    name: 'RemovePool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'publicKey', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'receivedAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'RemoveValidator'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: true }],
    name: 'RemoveValidatorOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetBeaconBalance'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'config',
        internalType: 'struct IStakeTogether.Config',
        type: 'tuple',
        components: [
          { name: 'blocksPerDay', internalType: 'uint256', type: 'uint256' },
          { name: 'depositLimit', internalType: 'uint256', type: 'uint256' },
          { name: 'maxDelegations', internalType: 'uint256', type: 'uint256' },
          { name: 'minDepositAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'minWithdrawAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'poolSize', internalType: 'uint256', type: 'uint256' },
          { name: 'validatorSize', internalType: 'uint256', type: 'uint256' },
          { name: 'withdrawalLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'feature',
            internalType: 'struct IStakeTogether.Feature',
            type: 'tuple',
            components: [
              { name: 'AddPool', internalType: 'bool', type: 'bool' },
              { name: 'Deposit', internalType: 'bool', type: 'bool' },
              { name: 'WithdrawPool', internalType: 'bool', type: 'bool' },
              { name: 'WithdrawValidator', internalType: 'bool', type: 'bool' }
            ]
          }
        ],
        indexed: false
      }
    ],
    name: 'SetConfig'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'feeType', internalType: 'enum IStakeTogether.FeeType', type: 'uint8', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'mathType', internalType: 'enum IStakeTogether.FeeMath', type: 'uint8', indexed: false },
      { name: 'allocations', internalType: 'uint256[]', type: 'uint256[]', indexed: false }
    ],
    name: 'SetFee'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'enum IStakeTogether.FeeRole', type: 'uint8', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'SetFeeAddress'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'router', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetRouter'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'stakeTogether', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetStakeTogether'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'newValidatorSize', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetValidatorSize'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'withdrawalCredentials', internalType: 'bytes', type: 'bytes', indexed: true }],
    name: 'SetWithdrawalsCredentials'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'delegations',
        internalType: 'struct IStakeTogether.Delegation[]',
        type: 'tuple[]',
        components: [
          { name: 'pool', internalType: 'address', type: 'address' },
          { name: 'shares', internalType: 'uint256', type: 'uint256' }
        ],
        indexed: false
      }
    ],
    name: 'UpdateDelegations'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'withdrawType', internalType: 'enum IStakeTogether.WithdrawType', type: 'uint8', indexed: false }
    ],
    name: 'WithdrawBase'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'WithdrawalsLimitReached'
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IWithdrawals
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iWithdrawalsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ReceiveEther'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'stakeTogether', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetStakeTogether'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Withdraw'
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AccessControlUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const accessControlUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true }
    ],
    name: 'RoleAdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleGranted'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleRevoked'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'grantRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'renounceRole',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'revokeRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAccessControlUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAccessControlUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true }
    ],
    name: 'RoleAdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleGranted'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleRevoked'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'grantRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'renounceRole',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'revokeRole',
    outputs: []
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1822ProxiableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1822ProxiableUpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1967Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1967UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'AdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded'
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC5267Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc5267UpgradeableABI = [
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PausableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pausableUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ReentrancyGuardUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const reentrancyGuardUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ContextUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const contextUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBeaconUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBeaconUpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1967UpgradeUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1967UpgradeUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'AdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded'
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Initializable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const initializableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UUPSUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const uupsUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'AdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'upgradeToAndCall',
    outputs: []
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EIP712Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const eip712UpgradeableABI = [
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165UpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20BurnableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20BurnableUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'burnFrom',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20PermitUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20PermitUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'permit',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20PermitUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20PermitUpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'permit',
    outputs: []
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20MetadataUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__.
 */
export function useAirdropRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: airdropABI, ...config } as UseContractReadConfig<
    typeof airdropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"ADMIN_ROLE"`.
 */
export function useAirdropAdminRole<
  TFunctionName extends 'ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: airdropABI, functionName: 'ADMIN_ROLE', ...config } as UseContractReadConfig<
    typeof airdropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useAirdropDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: airdropABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config
  } as UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"UPGRADER_ROLE"`.
 */
export function useAirdropUpgraderRole<
  TFunctionName extends 'UPGRADER_ROLE',
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: airdropABI, functionName: 'UPGRADER_ROLE', ...config } as UseContractReadConfig<
    typeof airdropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"airdropsMerkleRoots"`.
 */
export function useAirdropAirdropsMerkleRoots<
  TFunctionName extends 'airdropsMerkleRoots',
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: airdropABI,
    functionName: 'airdropsMerkleRoots',
    ...config
  } as UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useAirdropGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: airdropABI, functionName: 'getRoleAdmin', ...config } as UseContractReadConfig<
    typeof airdropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"hasRole"`.
 */
export function useAirdropHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: airdropABI, functionName: 'hasRole', ...config } as UseContractReadConfig<
    typeof airdropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"isAirdropClaimed"`.
 */
export function useAirdropIsAirdropClaimed<
  TFunctionName extends 'isAirdropClaimed',
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: airdropABI,
    functionName: 'isAirdropClaimed',
    ...config
  } as UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"maxBatchSize"`.
 */
export function useAirdropMaxBatchSize<
  TFunctionName extends 'maxBatchSize',
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: airdropABI, functionName: 'maxBatchSize', ...config } as UseContractReadConfig<
    typeof airdropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"paused"`.
 */
export function useAirdropPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: airdropABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof airdropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useAirdropProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: airdropABI, functionName: 'proxiableUUID', ...config } as UseContractReadConfig<
    typeof airdropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"router"`.
 */
export function useAirdropRouter<
  TFunctionName extends 'router',
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: airdropABI, functionName: 'router', ...config } as UseContractReadConfig<
    typeof airdropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"stakeTogether"`.
 */
export function useAirdropStakeTogether<
  TFunctionName extends 'stakeTogether',
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: airdropABI, functionName: 'stakeTogether', ...config } as UseContractReadConfig<
    typeof airdropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useAirdropSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: airdropABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"version"`.
 */
export function useAirdropVersion<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: airdropABI, functionName: 'version', ...config } as UseContractReadConfig<
    typeof airdropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__.
 */
export function useAirdropWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof airdropABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, TFunctionName, TMode>({ abi: airdropABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"addAirdropMerkleRoot"`.
 */
export function useAirdropAddAirdropMerkleRoot<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'addAirdropMerkleRoot'>['request']['abi'],
        'addAirdropMerkleRoot',
        TMode
      > & { functionName?: 'addAirdropMerkleRoot' }
    : UseContractWriteConfig<typeof airdropABI, 'addAirdropMerkleRoot', TMode> & {
        abi?: never
        functionName?: 'addAirdropMerkleRoot'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'addAirdropMerkleRoot', TMode>({
    abi: airdropABI,
    functionName: 'addAirdropMerkleRoot',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"claimAirdrop"`.
 */
export function useAirdropClaimAirdrop<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'claimAirdrop'>['request']['abi'],
        'claimAirdrop',
        TMode
      > & { functionName?: 'claimAirdrop' }
    : UseContractWriteConfig<typeof airdropABI, 'claimAirdrop', TMode> & {
        abi?: never
        functionName?: 'claimAirdrop'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'claimAirdrop', TMode>({
    abi: airdropABI,
    functionName: 'claimAirdrop',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"claimAirdropBatch"`.
 */
export function useAirdropClaimAirdropBatch<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'claimAirdropBatch'>['request']['abi'],
        'claimAirdropBatch',
        TMode
      > & { functionName?: 'claimAirdropBatch' }
    : UseContractWriteConfig<typeof airdropABI, 'claimAirdropBatch', TMode> & {
        abi?: never
        functionName?: 'claimAirdropBatch'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'claimAirdropBatch', TMode>({
    abi: airdropABI,
    functionName: 'claimAirdropBatch',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"grantRole"`.
 */
export function useAirdropGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'grantRole'>['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof airdropABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'grantRole', TMode>({
    abi: airdropABI,
    functionName: 'grantRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"initialize"`.
 */
export function useAirdropInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof airdropABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'initialize', TMode>({
    abi: airdropABI,
    functionName: 'initialize',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"pause"`.
 */
export function useAirdropPause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'pause'>['request']['abi'],
        'pause',
        TMode
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<typeof airdropABI, 'pause', TMode> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'pause', TMode>({
    abi: airdropABI,
    functionName: 'pause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useAirdropRenounceRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'renounceRole'>['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof airdropABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'renounceRole', TMode>({
    abi: airdropABI,
    functionName: 'renounceRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useAirdropRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'revokeRole'>['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof airdropABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'revokeRole', TMode>({
    abi: airdropABI,
    functionName: 'revokeRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"setMaxBatchSize"`.
 */
export function useAirdropSetMaxBatchSize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'setMaxBatchSize'>['request']['abi'],
        'setMaxBatchSize',
        TMode
      > & { functionName?: 'setMaxBatchSize' }
    : UseContractWriteConfig<typeof airdropABI, 'setMaxBatchSize', TMode> & {
        abi?: never
        functionName?: 'setMaxBatchSize'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'setMaxBatchSize', TMode>({
    abi: airdropABI,
    functionName: 'setMaxBatchSize',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"setRouter"`.
 */
export function useAirdropSetRouter<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'setRouter'>['request']['abi'],
        'setRouter',
        TMode
      > & { functionName?: 'setRouter' }
    : UseContractWriteConfig<typeof airdropABI, 'setRouter', TMode> & {
        abi?: never
        functionName?: 'setRouter'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'setRouter', TMode>({
    abi: airdropABI,
    functionName: 'setRouter',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"setStakeTogether"`.
 */
export function useAirdropSetStakeTogether<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'setStakeTogether'>['request']['abi'],
        'setStakeTogether',
        TMode
      > & { functionName?: 'setStakeTogether' }
    : UseContractWriteConfig<typeof airdropABI, 'setStakeTogether', TMode> & {
        abi?: never
        functionName?: 'setStakeTogether'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'setStakeTogether', TMode>({
    abi: airdropABI,
    functionName: 'setStakeTogether',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"unpause"`.
 */
export function useAirdropUnpause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'unpause'>['request']['abi'],
        'unpause',
        TMode
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<typeof airdropABI, 'unpause', TMode> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'unpause', TMode>({
    abi: airdropABI,
    functionName: 'unpause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useAirdropUpgradeTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof airdropABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'upgradeTo', TMode>({
    abi: airdropABI,
    functionName: 'upgradeTo',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useAirdropUpgradeToAndCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof airdropABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'upgradeToAndCall', TMode>({
    abi: airdropABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__.
 */
export function usePrepareAirdropWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof airdropABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: airdropABI, ...config } as UsePrepareContractWriteConfig<
    typeof airdropABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"addAirdropMerkleRoot"`.
 */
export function usePrepareAirdropAddAirdropMerkleRoot(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropABI, 'addAirdropMerkleRoot'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'addAirdropMerkleRoot',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'addAirdropMerkleRoot'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"claimAirdrop"`.
 */
export function usePrepareAirdropClaimAirdrop(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropABI, 'claimAirdrop'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'claimAirdrop',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'claimAirdrop'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"claimAirdropBatch"`.
 */
export function usePrepareAirdropClaimAirdropBatch(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropABI, 'claimAirdropBatch'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'claimAirdropBatch',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'claimAirdropBatch'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareAirdropGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'grantRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareAirdropInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'initialize',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareAirdropPause(
  config: Omit<UsePrepareContractWriteConfig<typeof airdropABI, 'pause'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'pause',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareAirdropRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'renounceRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareAirdropRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'revokeRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"setMaxBatchSize"`.
 */
export function usePrepareAirdropSetMaxBatchSize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropABI, 'setMaxBatchSize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'setMaxBatchSize',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'setMaxBatchSize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"setRouter"`.
 */
export function usePrepareAirdropSetRouter(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropABI, 'setRouter'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'setRouter',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'setRouter'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"setStakeTogether"`.
 */
export function usePrepareAirdropSetStakeTogether(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropABI, 'setStakeTogether'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'setStakeTogether',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'setStakeTogether'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareAirdropUnpause(
  config: Omit<UsePrepareContractWriteConfig<typeof airdropABI, 'unpause'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'unpause',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'unpause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareAirdropUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'upgradeTo',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareAirdropUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__.
 */
export function useAirdropEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof airdropABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, ...config } as UseContractEventConfig<
    typeof airdropABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"AddAirdropMerkleRoot"`.
 */
export function useAirdropAddAirdropMerkleRootEvent(
  config: Omit<
    UseContractEventConfig<typeof airdropABI, 'AddAirdropMerkleRoot'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: airdropABI,
    eventName: 'AddAirdropMerkleRoot',
    ...config
  } as UseContractEventConfig<typeof airdropABI, 'AddAirdropMerkleRoot'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"AddMerkleRoots"`.
 */
export function useAirdropAddMerkleRootsEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'AddMerkleRoots'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, eventName: 'AddMerkleRoots', ...config } as UseContractEventConfig<
    typeof airdropABI,
    'AddMerkleRoots'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useAirdropAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'AdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, eventName: 'AdminChanged', ...config } as UseContractEventConfig<
    typeof airdropABI,
    'AdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useAirdropBeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'BeaconUpgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, eventName: 'BeaconUpgraded', ...config } as UseContractEventConfig<
    typeof airdropABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"ClaimAirdrop"`.
 */
export function useAirdropClaimAirdropEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'ClaimAirdrop'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, eventName: 'ClaimAirdrop', ...config } as UseContractEventConfig<
    typeof airdropABI,
    'ClaimAirdrop'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"ClaimAirdropBatch"`.
 */
export function useAirdropClaimAirdropBatchEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'ClaimAirdropBatch'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: airdropABI,
    eventName: 'ClaimAirdropBatch',
    ...config
  } as UseContractEventConfig<typeof airdropABI, 'ClaimAirdropBatch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"ClaimRewards"`.
 */
export function useAirdropClaimRewardsEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'ClaimRewards'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, eventName: 'ClaimRewards', ...config } as UseContractEventConfig<
    typeof airdropABI,
    'ClaimRewards'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"ClaimRewardsBatch"`.
 */
export function useAirdropClaimRewardsBatchEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'ClaimRewardsBatch'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: airdropABI,
    eventName: 'ClaimRewardsBatch',
    ...config
  } as UseContractEventConfig<typeof airdropABI, 'ClaimRewardsBatch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"Initialized"`.
 */
export function useAirdropInitializedEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof airdropABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"Paused"`.
 */
export function useAirdropPausedEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof airdropABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"ReceiveEther"`.
 */
export function useAirdropReceiveEtherEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'ReceiveEther'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, eventName: 'ReceiveEther', ...config } as UseContractEventConfig<
    typeof airdropABI,
    'ReceiveEther'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useAirdropRoleAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'RoleAdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: airdropABI,
    eventName: 'RoleAdminChanged',
    ...config
  } as UseContractEventConfig<typeof airdropABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useAirdropRoleGrantedEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'RoleGranted'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, eventName: 'RoleGranted', ...config } as UseContractEventConfig<
    typeof airdropABI,
    'RoleGranted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useAirdropRoleRevokedEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'RoleRevoked'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, eventName: 'RoleRevoked', ...config } as UseContractEventConfig<
    typeof airdropABI,
    'RoleRevoked'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"SetMaxBatchSize"`.
 */
export function useAirdropSetMaxBatchSizeEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'SetMaxBatchSize'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: airdropABI,
    eventName: 'SetMaxBatchSize',
    ...config
  } as UseContractEventConfig<typeof airdropABI, 'SetMaxBatchSize'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"SetRouter"`.
 */
export function useAirdropSetRouterEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'SetRouter'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, eventName: 'SetRouter', ...config } as UseContractEventConfig<
    typeof airdropABI,
    'SetRouter'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"SetStakeTogether"`.
 */
export function useAirdropSetStakeTogetherEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'SetStakeTogether'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: airdropABI,
    eventName: 'SetStakeTogether',
    ...config
  } as UseContractEventConfig<typeof airdropABI, 'SetStakeTogether'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useAirdropUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, eventName: 'Unpaused', ...config } as UseContractEventConfig<
    typeof airdropABI,
    'Unpaused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useAirdropUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof airdropABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__.
 */
export function useStakeTogetherRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: stakeTogetherABI, ...config } as UseContractReadConfig<
    typeof stakeTogetherABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"ADMIN_ROLE"`.
 */
export function useStakeTogetherAdminRole<
  TFunctionName extends 'ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'ADMIN_ROLE',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useStakeTogetherDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useStakeTogetherDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"ORACLE_VALIDATOR_MANAGER_ROLE"`.
 */
export function useStakeTogetherOracleValidatorManagerRole<
  TFunctionName extends 'ORACLE_VALIDATOR_MANAGER_ROLE',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'ORACLE_VALIDATOR_MANAGER_ROLE',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"ORACLE_VALIDATOR_ROLE"`.
 */
export function useStakeTogetherOracleValidatorRole<
  TFunctionName extends 'ORACLE_VALIDATOR_ROLE',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'ORACLE_VALIDATOR_ROLE',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"ORACLE_VALIDATOR_SENTINEL_ROLE"`.
 */
export function useStakeTogetherOracleValidatorSentinelRole<
  TFunctionName extends 'ORACLE_VALIDATOR_SENTINEL_ROLE',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'ORACLE_VALIDATOR_SENTINEL_ROLE',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"POOL_MANAGER_ROLE"`.
 */
export function useStakeTogetherPoolManagerRole<
  TFunctionName extends 'POOL_MANAGER_ROLE',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'POOL_MANAGER_ROLE',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"UPGRADER_ROLE"`.
 */
export function useStakeTogetherUpgraderRole<
  TFunctionName extends 'UPGRADER_ROLE',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'UPGRADER_ROLE',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"allowance"`.
 */
export function useStakeTogetherAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useStakeTogetherBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"beaconBalance"`.
 */
export function useStakeTogetherBeaconBalance<
  TFunctionName extends 'beaconBalance',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'beaconBalance',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"config"`.
 */
export function useStakeTogetherConfig<
  TFunctionName extends 'config',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: stakeTogetherABI, functionName: 'config', ...config } as UseContractReadConfig<
    typeof stakeTogetherABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"currentOracleIndex"`.
 */
export function useStakeTogetherCurrentOracleIndex<
  TFunctionName extends 'currentOracleIndex',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'currentOracleIndex',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"decimals"`.
 */
export function useStakeTogetherDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'decimals',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"deposit"`.
 */
export function useStakeTogetherDeposit<
  TFunctionName extends 'deposit',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: stakeTogetherABI, functionName: 'deposit', ...config } as UseContractReadConfig<
    typeof stakeTogetherABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useStakeTogetherEip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"estimateFeeFixed"`.
 */
export function useStakeTogetherEstimateFeeFixed<
  TFunctionName extends 'estimateFeeFixed',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'estimateFeeFixed',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"estimateFeePercentage"`.
 */
export function useStakeTogetherEstimateFeePercentage<
  TFunctionName extends 'estimateFeePercentage',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'estimateFeePercentage',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"getFeeAddress"`.
 */
export function useStakeTogetherGetFeeAddress<
  TFunctionName extends 'getFeeAddress',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'getFeeAddress',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"getFeesRoles"`.
 */
export function useStakeTogetherGetFeesRoles<
  TFunctionName extends 'getFeesRoles',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'getFeesRoles',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useStakeTogetherGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'getRoleAdmin',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"hasRole"`.
 */
export function useStakeTogetherHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: stakeTogetherABI, functionName: 'hasRole', ...config } as UseContractReadConfig<
    typeof stakeTogetherABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"isValidatorOracle"`.
 */
export function useStakeTogetherIsValidatorOracle<
  TFunctionName extends 'isValidatorOracle',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'isValidatorOracle',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"lastResetBlock"`.
 */
export function useStakeTogetherLastResetBlock<
  TFunctionName extends 'lastResetBlock',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'lastResetBlock',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"name"`.
 */
export function useStakeTogetherName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: stakeTogetherABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof stakeTogetherABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"nonces"`.
 */
export function useStakeTogetherNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: stakeTogetherABI, functionName: 'nonces', ...config } as UseContractReadConfig<
    typeof stakeTogetherABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"paused"`.
 */
export function useStakeTogetherPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: stakeTogetherABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof stakeTogetherABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useStakeTogetherProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'proxiableUUID',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"router"`.
 */
export function useStakeTogetherRouter<
  TFunctionName extends 'router',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: stakeTogetherABI, functionName: 'router', ...config } as UseContractReadConfig<
    typeof stakeTogetherABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"shares"`.
 */
export function useStakeTogetherShares<
  TFunctionName extends 'shares',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: stakeTogetherABI, functionName: 'shares', ...config } as UseContractReadConfig<
    typeof stakeTogetherABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"sharesByWei"`.
 */
export function useStakeTogetherSharesByWei<
  TFunctionName extends 'sharesByWei',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'sharesByWei',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useStakeTogetherSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"symbol"`.
 */
export function useStakeTogetherSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: stakeTogetherABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof stakeTogetherABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"totalDeposited"`.
 */
export function useStakeTogetherTotalDeposited<
  TFunctionName extends 'totalDeposited',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'totalDeposited',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"totalShares"`.
 */
export function useStakeTogetherTotalShares<
  TFunctionName extends 'totalShares',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'totalShares',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useStakeTogetherTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"totalWithdrawn"`.
 */
export function useStakeTogetherTotalWithdrawn<
  TFunctionName extends 'totalWithdrawn',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'totalWithdrawn',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"version"`.
 */
export function useStakeTogetherVersion<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: stakeTogetherABI, functionName: 'version', ...config } as UseContractReadConfig<
    typeof stakeTogetherABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"weiByShares"`.
 */
export function useStakeTogetherWeiByShares<
  TFunctionName extends 'weiByShares',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'weiByShares',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawalCredentials"`.
 */
export function useStakeTogetherWithdrawalCredentials<
  TFunctionName extends 'withdrawalCredentials',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'withdrawalCredentials',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawals"`.
 */
export function useStakeTogetherWithdrawals<
  TFunctionName extends 'withdrawals',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'withdrawals',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__.
 */
export function useStakeTogetherWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof stakeTogetherABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, TFunctionName, TMode>({
    abi: stakeTogetherABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"addPool"`.
 */
export function useStakeTogetherAddPool<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'addPool'>['request']['abi'],
        'addPool',
        TMode
      > & { functionName?: 'addPool' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'addPool', TMode> & {
        abi?: never
        functionName?: 'addPool'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'addPool', TMode>({
    abi: stakeTogetherABI,
    functionName: 'addPool',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"addValidatorOracle"`.
 */
export function useStakeTogetherAddValidatorOracle<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'addValidatorOracle'>['request']['abi'],
        'addValidatorOracle',
        TMode
      > & { functionName?: 'addValidatorOracle' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'addValidatorOracle', TMode> & {
        abi?: never
        functionName?: 'addValidatorOracle'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'addValidatorOracle', TMode>({
    abi: stakeTogetherABI,
    functionName: 'addValidatorOracle',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"approve"`.
 */
export function useStakeTogetherApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'approve', TMode>({
    abi: stakeTogetherABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"burn"`.
 */
export function useStakeTogetherBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'burn'>['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'burn', TMode>({
    abi: stakeTogetherABI,
    functionName: 'burn',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useStakeTogetherBurnFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'burnFrom'>['request']['abi'],
        'burnFrom',
        TMode
      > & { functionName?: 'burnFrom' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'burnFrom', TMode> & {
        abi?: never
        functionName?: 'burnFrom'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'burnFrom', TMode>({
    abi: stakeTogetherABI,
    functionName: 'burnFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"claimRewards"`.
 */
export function useStakeTogetherClaimRewards<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'claimRewards'>['request']['abi'],
        'claimRewards',
        TMode
      > & { functionName?: 'claimRewards' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'claimRewards', TMode> & {
        abi?: never
        functionName?: 'claimRewards'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'claimRewards', TMode>({
    abi: stakeTogetherABI,
    functionName: 'claimRewards',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"createValidator"`.
 */
export function useStakeTogetherCreateValidator<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'createValidator'>['request']['abi'],
        'createValidator',
        TMode
      > & { functionName?: 'createValidator' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'createValidator', TMode> & {
        abi?: never
        functionName?: 'createValidator'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'createValidator', TMode>({
    abi: stakeTogetherABI,
    functionName: 'createValidator',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useStakeTogetherDecreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'decreaseAllowance'>['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'decreaseAllowance', TMode>({
    abi: stakeTogetherABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"depositDonation"`.
 */
export function useStakeTogetherDepositDonation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'depositDonation'>['request']['abi'],
        'depositDonation',
        TMode
      > & { functionName?: 'depositDonation' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'depositDonation', TMode> & {
        abi?: never
        functionName?: 'depositDonation'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'depositDonation', TMode>({
    abi: stakeTogetherABI,
    functionName: 'depositDonation',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"depositPool"`.
 */
export function useStakeTogetherDepositPool<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'depositPool'>['request']['abi'],
        'depositPool',
        TMode
      > & { functionName?: 'depositPool' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'depositPool', TMode> & {
        abi?: never
        functionName?: 'depositPool'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'depositPool', TMode>({
    abi: stakeTogetherABI,
    functionName: 'depositPool',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"forceNextValidatorOracle"`.
 */
export function useStakeTogetherForceNextValidatorOracle<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'forceNextValidatorOracle'>['request']['abi'],
        'forceNextValidatorOracle',
        TMode
      > & { functionName?: 'forceNextValidatorOracle' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'forceNextValidatorOracle', TMode> & {
        abi?: never
        functionName?: 'forceNextValidatorOracle'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'forceNextValidatorOracle', TMode>({
    abi: stakeTogetherABI,
    functionName: 'forceNextValidatorOracle',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"grantRole"`.
 */
export function useStakeTogetherGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'grantRole'>['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'grantRole', TMode>({
    abi: stakeTogetherABI,
    functionName: 'grantRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useStakeTogetherIncreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'increaseAllowance'>['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'increaseAllowance', TMode>({
    abi: stakeTogetherABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"initialize"`.
 */
export function useStakeTogetherInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'initialize', TMode>({
    abi: stakeTogetherABI,
    functionName: 'initialize',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"mintRewards"`.
 */
export function useStakeTogetherMintRewards<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'mintRewards'>['request']['abi'],
        'mintRewards',
        TMode
      > & { functionName?: 'mintRewards' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'mintRewards', TMode> & {
        abi?: never
        functionName?: 'mintRewards'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'mintRewards', TMode>({
    abi: stakeTogetherABI,
    functionName: 'mintRewards',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"pause"`.
 */
export function useStakeTogetherPause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'pause'>['request']['abi'],
        'pause',
        TMode
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'pause', TMode> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'pause', TMode>({
    abi: stakeTogetherABI,
    functionName: 'pause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"permit"`.
 */
export function useStakeTogetherPermit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'permit'>['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'permit', TMode>({
    abi: stakeTogetherABI,
    functionName: 'permit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"refundPool"`.
 */
export function useStakeTogetherRefundPool<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'refundPool'>['request']['abi'],
        'refundPool',
        TMode
      > & { functionName?: 'refundPool' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'refundPool', TMode> & {
        abi?: never
        functionName?: 'refundPool'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'refundPool', TMode>({
    abi: stakeTogetherABI,
    functionName: 'refundPool',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"removePool"`.
 */
export function useStakeTogetherRemovePool<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'removePool'>['request']['abi'],
        'removePool',
        TMode
      > & { functionName?: 'removePool' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'removePool', TMode> & {
        abi?: never
        functionName?: 'removePool'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'removePool', TMode>({
    abi: stakeTogetherABI,
    functionName: 'removePool',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"removeValidator"`.
 */
export function useStakeTogetherRemoveValidator<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'removeValidator'>['request']['abi'],
        'removeValidator',
        TMode
      > & { functionName?: 'removeValidator' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'removeValidator', TMode> & {
        abi?: never
        functionName?: 'removeValidator'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'removeValidator', TMode>({
    abi: stakeTogetherABI,
    functionName: 'removeValidator',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"removeValidatorOracle"`.
 */
export function useStakeTogetherRemoveValidatorOracle<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'removeValidatorOracle'>['request']['abi'],
        'removeValidatorOracle',
        TMode
      > & { functionName?: 'removeValidatorOracle' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'removeValidatorOracle', TMode> & {
        abi?: never
        functionName?: 'removeValidatorOracle'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'removeValidatorOracle', TMode>({
    abi: stakeTogetherABI,
    functionName: 'removeValidatorOracle',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useStakeTogetherRenounceRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'renounceRole'>['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'renounceRole', TMode>({
    abi: stakeTogetherABI,
    functionName: 'renounceRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useStakeTogetherRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'revokeRole'>['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'revokeRole', TMode>({
    abi: stakeTogetherABI,
    functionName: 'revokeRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setBeaconBalance"`.
 */
export function useStakeTogetherSetBeaconBalance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setBeaconBalance'>['request']['abi'],
        'setBeaconBalance',
        TMode
      > & { functionName?: 'setBeaconBalance' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setBeaconBalance', TMode> & {
        abi?: never
        functionName?: 'setBeaconBalance'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setBeaconBalance', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setBeaconBalance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setConfig"`.
 */
export function useStakeTogetherSetConfig<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setConfig'>['request']['abi'],
        'setConfig',
        TMode
      > & { functionName?: 'setConfig' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setConfig', TMode> & {
        abi?: never
        functionName?: 'setConfig'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setConfig', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setConfig',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setFee"`.
 */
export function useStakeTogetherSetFee<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setFee'>['request']['abi'],
        'setFee',
        TMode
      > & { functionName?: 'setFee' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setFee', TMode> & {
        abi?: never
        functionName?: 'setFee'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setFee', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setFeeAddress"`.
 */
export function useStakeTogetherSetFeeAddress<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setFeeAddress'>['request']['abi'],
        'setFeeAddress',
        TMode
      > & { functionName?: 'setFeeAddress' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setFeeAddress', TMode> & {
        abi?: never
        functionName?: 'setFeeAddress'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setFeeAddress', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setFeeAddress',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transfer"`.
 */
export function useStakeTogetherTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'transfer', TMode>({
    abi: stakeTogetherABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useStakeTogetherTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'transferFrom', TMode>({
    abi: stakeTogetherABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferShares"`.
 */
export function useStakeTogetherTransferShares<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'transferShares'>['request']['abi'],
        'transferShares',
        TMode
      > & { functionName?: 'transferShares' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'transferShares', TMode> & {
        abi?: never
        functionName?: 'transferShares'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'transferShares', TMode>({
    abi: stakeTogetherABI,
    functionName: 'transferShares',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"unpause"`.
 */
export function useStakeTogetherUnpause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'unpause'>['request']['abi'],
        'unpause',
        TMode
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'unpause', TMode> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'unpause', TMode>({
    abi: stakeTogetherABI,
    functionName: 'unpause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"updateDelegations"`.
 */
export function useStakeTogetherUpdateDelegations<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'updateDelegations'>['request']['abi'],
        'updateDelegations',
        TMode
      > & { functionName?: 'updateDelegations' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'updateDelegations', TMode> & {
        abi?: never
        functionName?: 'updateDelegations'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'updateDelegations', TMode>({
    abi: stakeTogetherABI,
    functionName: 'updateDelegations',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useStakeTogetherUpgradeTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'upgradeTo', TMode>({
    abi: stakeTogetherABI,
    functionName: 'upgradeTo',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useStakeTogetherUpgradeToAndCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'upgradeToAndCall', TMode>({
    abi: stakeTogetherABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawPool"`.
 */
export function useStakeTogetherWithdrawPool<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'withdrawPool'>['request']['abi'],
        'withdrawPool',
        TMode
      > & { functionName?: 'withdrawPool' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'withdrawPool', TMode> & {
        abi?: never
        functionName?: 'withdrawPool'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'withdrawPool', TMode>({
    abi: stakeTogetherABI,
    functionName: 'withdrawPool',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawValidator"`.
 */
export function useStakeTogetherWithdrawValidator<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'withdrawValidator'>['request']['abi'],
        'withdrawValidator',
        TMode
      > & { functionName?: 'withdrawValidator' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'withdrawValidator', TMode> & {
        abi?: never
        functionName?: 'withdrawValidator'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'withdrawValidator', TMode>({
    abi: stakeTogetherABI,
    functionName: 'withdrawValidator',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__.
 */
export function usePrepareStakeTogetherWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof stakeTogetherABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: stakeTogetherABI, ...config } as UsePrepareContractWriteConfig<
    typeof stakeTogetherABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"addPool"`.
 */
export function usePrepareStakeTogetherAddPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'addPool'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'addPool',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'addPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"addValidatorOracle"`.
 */
export function usePrepareStakeTogetherAddValidatorOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'addValidatorOracle'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'addValidatorOracle',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'addValidatorOracle'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareStakeTogetherApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareStakeTogetherBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'burn',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareStakeTogetherBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'burnFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'burnFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'burnFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"claimRewards"`.
 */
export function usePrepareStakeTogetherClaimRewards(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'claimRewards'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'claimRewards',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'claimRewards'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"createValidator"`.
 */
export function usePrepareStakeTogetherCreateValidator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'createValidator'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'createValidator',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'createValidator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareStakeTogetherDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"depositDonation"`.
 */
export function usePrepareStakeTogetherDepositDonation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'depositDonation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'depositDonation',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'depositDonation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"depositPool"`.
 */
export function usePrepareStakeTogetherDepositPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'depositPool'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'depositPool',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'depositPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"forceNextValidatorOracle"`.
 */
export function usePrepareStakeTogetherForceNextValidatorOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'forceNextValidatorOracle'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'forceNextValidatorOracle',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'forceNextValidatorOracle'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareStakeTogetherGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'grantRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareStakeTogetherIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareStakeTogetherInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'initialize',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"mintRewards"`.
 */
export function usePrepareStakeTogetherMintRewards(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'mintRewards'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'mintRewards',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'mintRewards'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareStakeTogetherPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'pause'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'pause',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareStakeTogetherPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'permit',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"refundPool"`.
 */
export function usePrepareStakeTogetherRefundPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'refundPool'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'refundPool',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'refundPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"removePool"`.
 */
export function usePrepareStakeTogetherRemovePool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'removePool'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'removePool',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'removePool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"removeValidator"`.
 */
export function usePrepareStakeTogetherRemoveValidator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'removeValidator'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'removeValidator',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'removeValidator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"removeValidatorOracle"`.
 */
export function usePrepareStakeTogetherRemoveValidatorOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'removeValidatorOracle'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'removeValidatorOracle',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'removeValidatorOracle'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareStakeTogetherRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'renounceRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareStakeTogetherRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'revokeRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setBeaconBalance"`.
 */
export function usePrepareStakeTogetherSetBeaconBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setBeaconBalance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setBeaconBalance',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setBeaconBalance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setConfig"`.
 */
export function usePrepareStakeTogetherSetConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setConfig'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setConfig',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setConfig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setFee"`.
 */
export function usePrepareStakeTogetherSetFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setFeeAddress"`.
 */
export function usePrepareStakeTogetherSetFeeAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setFeeAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setFeeAddress',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setFeeAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareStakeTogetherTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareStakeTogetherTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferShares"`.
 */
export function usePrepareStakeTogetherTransferShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferShares'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'transferShares',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferShares'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareStakeTogetherUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'unpause',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'unpause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"updateDelegations"`.
 */
export function usePrepareStakeTogetherUpdateDelegations(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'updateDelegations'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'updateDelegations',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'updateDelegations'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareStakeTogetherUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'upgradeTo',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareStakeTogetherUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawPool"`.
 */
export function usePrepareStakeTogetherWithdrawPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'withdrawPool'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'withdrawPool',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'withdrawPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawValidator"`.
 */
export function usePrepareStakeTogetherWithdrawValidator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'withdrawValidator'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'withdrawValidator',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'withdrawValidator'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__.
 */
export function useStakeTogetherEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: stakeTogetherABI, ...config } as UseContractEventConfig<
    typeof stakeTogetherABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"AddPool"`.
 */
export function useStakeTogetherAddPoolEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'AddPool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: stakeTogetherABI, eventName: 'AddPool', ...config } as UseContractEventConfig<
    typeof stakeTogetherABI,
    'AddPool'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"AddValidatorOracle"`.
 */
export function useStakeTogetherAddValidatorOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'AddValidatorOracle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'AddValidatorOracle',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'AddValidatorOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useStakeTogetherAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'AdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'AdminChanged',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Approval"`.
 */
export function useStakeTogetherApprovalEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: stakeTogetherABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof stakeTogetherABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useStakeTogetherBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'BeaconUpgraded',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"BurnShares"`.
 */
export function useStakeTogetherBurnSharesEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'BurnShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'BurnShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'BurnShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"ClaimRewards"`.
 */
export function useStakeTogetherClaimRewardsEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'ClaimRewards'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'ClaimRewards',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'ClaimRewards'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"CreateValidator"`.
 */
export function useStakeTogetherCreateValidatorEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'CreateValidator'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'CreateValidator',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'CreateValidator'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"DepositBase"`.
 */
export function useStakeTogetherDepositBaseEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'DepositBase'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'DepositBase',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'DepositBase'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"DepositLimitReached"`.
 */
export function useStakeTogetherDepositLimitReachedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'DepositLimitReached'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'DepositLimitReached',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'DepositLimitReached'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useStakeTogetherEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Initialized"`.
 */
export function useStakeTogetherInitializedEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"MintRewards"`.
 */
export function useStakeTogetherMintRewardsEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'MintRewards'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'MintRewards',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'MintRewards'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"MintShares"`.
 */
export function useStakeTogetherMintSharesEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'MintShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'MintShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'MintShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Paused"`.
 */
export function useStakeTogetherPausedEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: stakeTogetherABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof stakeTogetherABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"ReceiveEther"`.
 */
export function useStakeTogetherReceiveEtherEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'ReceiveEther'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'ReceiveEther',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'ReceiveEther'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"RefundPool"`.
 */
export function useStakeTogetherRefundPoolEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'RefundPool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'RefundPool',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'RefundPool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"RemovePool"`.
 */
export function useStakeTogetherRemovePoolEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'RemovePool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'RemovePool',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'RemovePool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"RemoveValidator"`.
 */
export function useStakeTogetherRemoveValidatorEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'RemoveValidator'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'RemoveValidator',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'RemoveValidator'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"RemoveValidatorOracle"`.
 */
export function useStakeTogetherRemoveValidatorOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'RemoveValidatorOracle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'RemoveValidatorOracle',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'RemoveValidatorOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useStakeTogetherRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'RoleAdminChanged',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useStakeTogetherRoleGrantedEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'RoleGranted'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'RoleGranted',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useStakeTogetherRoleRevokedEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'RoleRevoked'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'RoleRevoked',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetBeaconBalance"`.
 */
export function useStakeTogetherSetBeaconBalanceEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetBeaconBalance'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetBeaconBalance',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetBeaconBalance'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetConfig"`.
 */
export function useStakeTogetherSetConfigEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'SetConfig'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetConfig',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetConfig'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetFee"`.
 */
export function useStakeTogetherSetFeeEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'SetFee'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: stakeTogetherABI, eventName: 'SetFee', ...config } as UseContractEventConfig<
    typeof stakeTogetherABI,
    'SetFee'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetFeeAddress"`.
 */
export function useStakeTogetherSetFeeAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetFeeAddress'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetFeeAddress',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetFeeAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetRouter"`.
 */
export function useStakeTogetherSetRouterEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'SetRouter'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetRouter',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetRouter'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetStakeTogether"`.
 */
export function useStakeTogetherSetStakeTogetherEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetStakeTogether'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetStakeTogether',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetStakeTogether'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetValidatorSize"`.
 */
export function useStakeTogetherSetValidatorSizeEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetValidatorSize'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetValidatorSize',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetValidatorSize'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetWithdrawalsCredentials"`.
 */
export function useStakeTogetherSetWithdrawalsCredentialsEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetWithdrawalsCredentials'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetWithdrawalsCredentials',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetWithdrawalsCredentials'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Transfer"`.
 */
export function useStakeTogetherTransferEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: stakeTogetherABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof stakeTogetherABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"TransferShares"`.
 */
export function useStakeTogetherTransferSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'TransferShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'TransferShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'TransferShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useStakeTogetherUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: stakeTogetherABI, eventName: 'Unpaused', ...config } as UseContractEventConfig<
    typeof stakeTogetherABI,
    'Unpaused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"UpdateDelegations"`.
 */
export function useStakeTogetherUpdateDelegationsEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'UpdateDelegations'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'UpdateDelegations',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'UpdateDelegations'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useStakeTogetherUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: stakeTogetherABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof stakeTogetherABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"WithdrawBase"`.
 */
export function useStakeTogetherWithdrawBaseEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'WithdrawBase'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'WithdrawBase',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'WithdrawBase'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"WithdrawalsLimitReached"`.
 */
export function useStakeTogetherWithdrawalsLimitReachedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'WithdrawalsLimitReached'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'WithdrawalsLimitReached',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'WithdrawalsLimitReached'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__.
 */
export function useRouterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: routerABI, ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"ADMIN_ROLE"`.
 */
export function useRouterAdminRole<
  TFunctionName extends 'ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'ADMIN_ROLE', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useRouterDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"ORACLE_REPORT_MANAGER_ROLE"`.
 */
export function useRouterOracleReportManagerRole<
  TFunctionName extends 'ORACLE_REPORT_MANAGER_ROLE',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'ORACLE_REPORT_MANAGER_ROLE',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"ORACLE_REPORT_ROLE"`.
 */
export function useRouterOracleReportRole<
  TFunctionName extends 'ORACLE_REPORT_ROLE',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'ORACLE_REPORT_ROLE',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"ORACLE_REPORT_SENTINEL_ROLE"`.
 */
export function useRouterOracleReportSentinelRole<
  TFunctionName extends 'ORACLE_REPORT_SENTINEL_ROLE',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'ORACLE_REPORT_SENTINEL_ROLE',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"UPGRADER_ROLE"`.
 */
export function useRouterUpgraderRole<
  TFunctionName extends 'UPGRADER_ROLE',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'UPGRADER_ROLE', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"airdrop"`.
 */
export function useRouterAirdrop<
  TFunctionName extends 'airdrop',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'airdrop', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"auditReport"`.
 */
export function useRouterAuditReport<
  TFunctionName extends 'auditReport',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'auditReport', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"config"`.
 */
export function useRouterConfig<
  TFunctionName extends 'config',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'config', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"consensusInvalidatedReport"`.
 */
export function useRouterConsensusInvalidatedReport<
  TFunctionName extends 'consensusInvalidatedReport',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'consensusInvalidatedReport',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"consensusReport"`.
 */
export function useRouterConsensusReport<
  TFunctionName extends 'consensusReport',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'consensusReport',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"executedReports"`.
 */
export function useRouterExecutedReports<
  TFunctionName extends 'executedReports',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'executedReports',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useRouterGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'getRoleAdmin', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"hasRole"`.
 */
export function useRouterHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'hasRole', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"isReadyToExecute"`.
 */
export function useRouterIsReadyToExecute<
  TFunctionName extends 'isReadyToExecute',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'isReadyToExecute',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"isReadyToSubmit"`.
 */
export function useRouterIsReadyToSubmit<
  TFunctionName extends 'isReadyToSubmit',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'isReadyToSubmit',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"isReportOracle"`.
 */
export function useRouterIsReportOracle<
  TFunctionName extends 'isReportOracle',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'isReportOracle', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"isReportOracleBlackListed"`.
 */
export function useRouterIsReportOracleBlackListed<
  TFunctionName extends 'isReportOracleBlackListed',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'isReportOracleBlackListed',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"lastConsensusEpoch"`.
 */
export function useRouterLastConsensusEpoch<
  TFunctionName extends 'lastConsensusEpoch',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'lastConsensusEpoch',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"lastExecutedConsensusEpoch"`.
 */
export function useRouterLastExecutedConsensusEpoch<
  TFunctionName extends 'lastExecutedConsensusEpoch',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'lastExecutedConsensusEpoch',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"oracleReports"`.
 */
export function useRouterOracleReports<
  TFunctionName extends 'oracleReports',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'oracleReports', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"oracleReportsVotes"`.
 */
export function useRouterOracleReportsVotes<
  TFunctionName extends 'oracleReportsVotes',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'oracleReportsVotes',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"paused"`.
 */
export function useRouterPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useRouterProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'proxiableUUID', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"reportBlockNumber"`.
 */
export function useRouterReportBlockNumber<
  TFunctionName extends 'reportBlockNumber',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'reportBlockNumber',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"reportExecutionBlock"`.
 */
export function useRouterReportExecutionBlock<
  TFunctionName extends 'reportExecutionBlock',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'reportExecutionBlock',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"reportHistoric"`.
 */
export function useRouterReportHistoric<
  TFunctionName extends 'reportHistoric',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'reportHistoric', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"reportOraclesBlacklist"`.
 */
export function useRouterReportOraclesBlacklist<
  TFunctionName extends 'reportOraclesBlacklist',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'reportOraclesBlacklist',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"stakeTogether"`.
 */
export function useRouterStakeTogether<
  TFunctionName extends 'stakeTogether',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'stakeTogether', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useRouterSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"totalReportOracles"`.
 */
export function useRouterTotalReportOracles<
  TFunctionName extends 'totalReportOracles',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'totalReportOracles',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"version"`.
 */
export function useRouterVersion<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'version', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"withdrawals"`.
 */
export function useRouterWithdrawals<
  TFunctionName extends 'withdrawals',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'withdrawals', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__.
 */
export function useRouterWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof routerABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof routerABI, TFunctionName, TMode>({ abi: routerABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"addReportOracle"`.
 */
export function useRouterAddReportOracle<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'addReportOracle'>['request']['abi'],
        'addReportOracle',
        TMode
      > & { functionName?: 'addReportOracle' }
    : UseContractWriteConfig<typeof routerABI, 'addReportOracle', TMode> & {
        abi?: never
        functionName?: 'addReportOracle'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'addReportOracle', TMode>({
    abi: routerABI,
    functionName: 'addReportOracle',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"addSentinel"`.
 */
export function useRouterAddSentinel<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'addSentinel'>['request']['abi'],
        'addSentinel',
        TMode
      > & { functionName?: 'addSentinel' }
    : UseContractWriteConfig<typeof routerABI, 'addSentinel', TMode> & {
        abi?: never
        functionName?: 'addSentinel'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'addSentinel', TMode>({
    abi: routerABI,
    functionName: 'addSentinel',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"blacklistReportOracle"`.
 */
export function useRouterBlacklistReportOracle<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'blacklistReportOracle'>['request']['abi'],
        'blacklistReportOracle',
        TMode
      > & { functionName?: 'blacklistReportOracle' }
    : UseContractWriteConfig<typeof routerABI, 'blacklistReportOracle', TMode> & {
        abi?: never
        functionName?: 'blacklistReportOracle'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'blacklistReportOracle', TMode>({
    abi: routerABI,
    functionName: 'blacklistReportOracle',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"executeReport"`.
 */
export function useRouterExecuteReport<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'executeReport'>['request']['abi'],
        'executeReport',
        TMode
      > & { functionName?: 'executeReport' }
    : UseContractWriteConfig<typeof routerABI, 'executeReport', TMode> & {
        abi?: never
        functionName?: 'executeReport'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'executeReport', TMode>({
    abi: routerABI,
    functionName: 'executeReport',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"grantRole"`.
 */
export function useRouterGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'grantRole'>['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof routerABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'grantRole', TMode>({
    abi: routerABI,
    functionName: 'grantRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"initialize"`.
 */
export function useRouterInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof routerABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'initialize', TMode>({
    abi: routerABI,
    functionName: 'initialize',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"invalidateConsensus"`.
 */
export function useRouterInvalidateConsensus<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'invalidateConsensus'>['request']['abi'],
        'invalidateConsensus',
        TMode
      > & { functionName?: 'invalidateConsensus' }
    : UseContractWriteConfig<typeof routerABI, 'invalidateConsensus', TMode> & {
        abi?: never
        functionName?: 'invalidateConsensus'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'invalidateConsensus', TMode>({
    abi: routerABI,
    functionName: 'invalidateConsensus',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"pause"`.
 */
export function useRouterPause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'pause'>['request']['abi'],
        'pause',
        TMode
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<typeof routerABI, 'pause', TMode> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'pause', TMode>({
    abi: routerABI,
    functionName: 'pause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"removeReportOracle"`.
 */
export function useRouterRemoveReportOracle<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'removeReportOracle'>['request']['abi'],
        'removeReportOracle',
        TMode
      > & { functionName?: 'removeReportOracle' }
    : UseContractWriteConfig<typeof routerABI, 'removeReportOracle', TMode> & {
        abi?: never
        functionName?: 'removeReportOracle'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'removeReportOracle', TMode>({
    abi: routerABI,
    functionName: 'removeReportOracle',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"removeSentinel"`.
 */
export function useRouterRemoveSentinel<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'removeSentinel'>['request']['abi'],
        'removeSentinel',
        TMode
      > & { functionName?: 'removeSentinel' }
    : UseContractWriteConfig<typeof routerABI, 'removeSentinel', TMode> & {
        abi?: never
        functionName?: 'removeSentinel'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'removeSentinel', TMode>({
    abi: routerABI,
    functionName: 'removeSentinel',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useRouterRenounceRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'renounceRole'>['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof routerABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'renounceRole', TMode>({
    abi: routerABI,
    functionName: 'renounceRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"requestValidatorsExit"`.
 */
export function useRouterRequestValidatorsExit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'requestValidatorsExit'>['request']['abi'],
        'requestValidatorsExit',
        TMode
      > & { functionName?: 'requestValidatorsExit' }
    : UseContractWriteConfig<typeof routerABI, 'requestValidatorsExit', TMode> & {
        abi?: never
        functionName?: 'requestValidatorsExit'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'requestValidatorsExit', TMode>({
    abi: routerABI,
    functionName: 'requestValidatorsExit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useRouterRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'revokeRole'>['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof routerABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'revokeRole', TMode>({
    abi: routerABI,
    functionName: 'revokeRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"setConfig"`.
 */
export function useRouterSetConfig<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'setConfig'>['request']['abi'],
        'setConfig',
        TMode
      > & { functionName?: 'setConfig' }
    : UseContractWriteConfig<typeof routerABI, 'setConfig', TMode> & {
        abi?: never
        functionName?: 'setConfig'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'setConfig', TMode>({
    abi: routerABI,
    functionName: 'setConfig',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"setLastConsensusEpoch"`.
 */
export function useRouterSetLastConsensusEpoch<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'setLastConsensusEpoch'>['request']['abi'],
        'setLastConsensusEpoch',
        TMode
      > & { functionName?: 'setLastConsensusEpoch' }
    : UseContractWriteConfig<typeof routerABI, 'setLastConsensusEpoch', TMode> & {
        abi?: never
        functionName?: 'setLastConsensusEpoch'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'setLastConsensusEpoch', TMode>({
    abi: routerABI,
    functionName: 'setLastConsensusEpoch',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"setStakeTogether"`.
 */
export function useRouterSetStakeTogether<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'setStakeTogether'>['request']['abi'],
        'setStakeTogether',
        TMode
      > & { functionName?: 'setStakeTogether' }
    : UseContractWriteConfig<typeof routerABI, 'setStakeTogether', TMode> & {
        abi?: never
        functionName?: 'setStakeTogether'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'setStakeTogether', TMode>({
    abi: routerABI,
    functionName: 'setStakeTogether',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"submitReport"`.
 */
export function useRouterSubmitReport<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'submitReport'>['request']['abi'],
        'submitReport',
        TMode
      > & { functionName?: 'submitReport' }
    : UseContractWriteConfig<typeof routerABI, 'submitReport', TMode> & {
        abi?: never
        functionName?: 'submitReport'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'submitReport', TMode>({
    abi: routerABI,
    functionName: 'submitReport',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"unBlacklistReportOracle"`.
 */
export function useRouterUnBlacklistReportOracle<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'unBlacklistReportOracle'>['request']['abi'],
        'unBlacklistReportOracle',
        TMode
      > & { functionName?: 'unBlacklistReportOracle' }
    : UseContractWriteConfig<typeof routerABI, 'unBlacklistReportOracle', TMode> & {
        abi?: never
        functionName?: 'unBlacklistReportOracle'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'unBlacklistReportOracle', TMode>({
    abi: routerABI,
    functionName: 'unBlacklistReportOracle',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"unpause"`.
 */
export function useRouterUnpause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'unpause'>['request']['abi'],
        'unpause',
        TMode
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<typeof routerABI, 'unpause', TMode> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'unpause', TMode>({
    abi: routerABI,
    functionName: 'unpause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useRouterUpgradeTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof routerABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'upgradeTo', TMode>({
    abi: routerABI,
    functionName: 'upgradeTo',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useRouterUpgradeToAndCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof routerABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'upgradeToAndCall', TMode>({
    abi: routerABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__.
 */
export function usePrepareRouterWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof routerABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: routerABI, ...config } as UsePrepareContractWriteConfig<
    typeof routerABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"addReportOracle"`.
 */
export function usePrepareRouterAddReportOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'addReportOracle'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'addReportOracle',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'addReportOracle'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"addSentinel"`.
 */
export function usePrepareRouterAddSentinel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'addSentinel'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'addSentinel',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'addSentinel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"blacklistReportOracle"`.
 */
export function usePrepareRouterBlacklistReportOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'blacklistReportOracle'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'blacklistReportOracle',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'blacklistReportOracle'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"executeReport"`.
 */
export function usePrepareRouterExecuteReport(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'executeReport'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'executeReport',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'executeReport'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareRouterGrantRole(
  config: Omit<UsePrepareContractWriteConfig<typeof routerABI, 'grantRole'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'grantRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareRouterInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'initialize',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"invalidateConsensus"`.
 */
export function usePrepareRouterInvalidateConsensus(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'invalidateConsensus'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'invalidateConsensus',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'invalidateConsensus'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareRouterPause(
  config: Omit<UsePrepareContractWriteConfig<typeof routerABI, 'pause'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'pause',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"removeReportOracle"`.
 */
export function usePrepareRouterRemoveReportOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'removeReportOracle'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'removeReportOracle',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'removeReportOracle'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"removeSentinel"`.
 */
export function usePrepareRouterRemoveSentinel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'removeSentinel'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'removeSentinel',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'removeSentinel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareRouterRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'renounceRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"requestValidatorsExit"`.
 */
export function usePrepareRouterRequestValidatorsExit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'requestValidatorsExit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'requestValidatorsExit',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'requestValidatorsExit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareRouterRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'revokeRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"setConfig"`.
 */
export function usePrepareRouterSetConfig(
  config: Omit<UsePrepareContractWriteConfig<typeof routerABI, 'setConfig'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'setConfig',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'setConfig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"setLastConsensusEpoch"`.
 */
export function usePrepareRouterSetLastConsensusEpoch(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'setLastConsensusEpoch'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'setLastConsensusEpoch',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'setLastConsensusEpoch'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"setStakeTogether"`.
 */
export function usePrepareRouterSetStakeTogether(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'setStakeTogether'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'setStakeTogether',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'setStakeTogether'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"submitReport"`.
 */
export function usePrepareRouterSubmitReport(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'submitReport'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'submitReport',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'submitReport'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"unBlacklistReportOracle"`.
 */
export function usePrepareRouterUnBlacklistReportOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'unBlacklistReportOracle'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'unBlacklistReportOracle',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'unBlacklistReportOracle'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareRouterUnpause(
  config: Omit<UsePrepareContractWriteConfig<typeof routerABI, 'unpause'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'unpause',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'unpause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareRouterUpgradeTo(
  config: Omit<UsePrepareContractWriteConfig<typeof routerABI, 'upgradeTo'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'upgradeTo',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareRouterUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__.
 */
export function useRouterEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof routerABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: routerABI, ...config } as UseContractEventConfig<typeof routerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"AddReportOracle"`.
 */
export function useRouterAddReportOracleEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'AddReportOracle'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'AddReportOracle', ...config } as UseContractEventConfig<
    typeof routerABI,
    'AddReportOracle'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useRouterAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'AdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'AdminChanged', ...config } as UseContractEventConfig<
    typeof routerABI,
    'AdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useRouterBeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'BeaconUpgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'BeaconUpgraded', ...config } as UseContractEventConfig<
    typeof routerABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"BlacklistReportOracle"`.
 */
export function useRouterBlacklistReportOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof routerABI, 'BlacklistReportOracle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'BlacklistReportOracle',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'BlacklistReportOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"BlacklistReportOracleManually"`.
 */
export function useRouterBlacklistReportOracleManuallyEvent(
  config: Omit<
    UseContractEventConfig<typeof routerABI, 'BlacklistReportOracleManually'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'BlacklistReportOracleManually',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'BlacklistReportOracleManually'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"ConsensusApprove"`.
 */
export function useRouterConsensusApproveEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'ConsensusApprove'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'ConsensusApprove',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'ConsensusApprove'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"ConsensusNotReached"`.
 */
export function useRouterConsensusNotReachedEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'ConsensusNotReached'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'ConsensusNotReached',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'ConsensusNotReached'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"ExecuteReport"`.
 */
export function useRouterExecuteReportEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'ExecuteReport'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'ExecuteReport', ...config } as UseContractEventConfig<
    typeof routerABI,
    'ExecuteReport'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"Initialized"`.
 */
export function useRouterInitializedEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof routerABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"InvalidateConsensus"`.
 */
export function useRouterInvalidateConsensusEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'InvalidateConsensus'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'InvalidateConsensus',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'InvalidateConsensus'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"Paused"`.
 */
export function useRouterPausedEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof routerABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"PenalizeReportOracle"`.
 */
export function useRouterPenalizeReportOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof routerABI, 'PenalizeReportOracle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'PenalizeReportOracle',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'PenalizeReportOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"ReceiveEther"`.
 */
export function useRouterReceiveEtherEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'ReceiveEther'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'ReceiveEther', ...config } as UseContractEventConfig<
    typeof routerABI,
    'ReceiveEther'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"RemoveReportOracle"`.
 */
export function useRouterRemoveReportOracleEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'RemoveReportOracle'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'RemoveReportOracle',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'RemoveReportOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"RequestValidatorsExit"`.
 */
export function useRouterRequestValidatorsExitEvent(
  config: Omit<
    UseContractEventConfig<typeof routerABI, 'RequestValidatorsExit'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'RequestValidatorsExit',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'RequestValidatorsExit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"RewardReportOracle"`.
 */
export function useRouterRewardReportOracleEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'RewardReportOracle'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'RewardReportOracle',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'RewardReportOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useRouterRoleAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'RoleAdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'RoleAdminChanged',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useRouterRoleGrantedEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'RoleGranted'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'RoleGranted', ...config } as UseContractEventConfig<
    typeof routerABI,
    'RoleGranted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useRouterRoleRevokedEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'RoleRevoked'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'RoleRevoked', ...config } as UseContractEventConfig<
    typeof routerABI,
    'RoleRevoked'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"SetConfig"`.
 */
export function useRouterSetConfigEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'SetConfig'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'SetConfig', ...config } as UseContractEventConfig<
    typeof routerABI,
    'SetConfig'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"SetLastConsensusEpoch"`.
 */
export function useRouterSetLastConsensusEpochEvent(
  config: Omit<
    UseContractEventConfig<typeof routerABI, 'SetLastConsensusEpoch'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'SetLastConsensusEpoch',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'SetLastConsensusEpoch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"SetStakeTogether"`.
 */
export function useRouterSetStakeTogetherEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'SetStakeTogether'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'SetStakeTogether',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'SetStakeTogether'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"SkipNextBlockInterval"`.
 */
export function useRouterSkipNextBlockIntervalEvent(
  config: Omit<
    UseContractEventConfig<typeof routerABI, 'SkipNextBlockInterval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'SkipNextBlockInterval',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'SkipNextBlockInterval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"SubmitReport"`.
 */
export function useRouterSubmitReportEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'SubmitReport'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'SubmitReport', ...config } as UseContractEventConfig<
    typeof routerABI,
    'SubmitReport'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"UnBlacklistReportOracle"`.
 */
export function useRouterUnBlacklistReportOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof routerABI, 'UnBlacklistReportOracle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'UnBlacklistReportOracle',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'UnBlacklistReportOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useRouterUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'Unpaused', ...config } as UseContractEventConfig<
    typeof routerABI,
    'Unpaused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"UpdateReportOracleQuorum"`.
 */
export function useRouterUpdateReportOracleQuorumEvent(
  config: Omit<
    UseContractEventConfig<typeof routerABI, 'UpdateReportOracleQuorum'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'UpdateReportOracleQuorum',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'UpdateReportOracleQuorum'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useRouterUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof routerABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"ValidatorsToExit"`.
 */
export function useRouterValidatorsToExitEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'ValidatorsToExit'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'ValidatorsToExit',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'ValidatorsToExit'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__.
 */
export function useWithdrawalsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: withdrawalsABI, ...config } as UseContractReadConfig<
    typeof withdrawalsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"ADMIN_ROLE"`.
 */
export function useWithdrawalsAdminRole<
  TFunctionName extends 'ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: withdrawalsABI,
    functionName: 'ADMIN_ROLE',
    ...config
  } as UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useWithdrawalsDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: withdrawalsABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config
  } as UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useWithdrawalsDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: withdrawalsABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config
  } as UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"UPGRADER_ROLE"`.
 */
export function useWithdrawalsUpgraderRole<
  TFunctionName extends 'UPGRADER_ROLE',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: withdrawalsABI,
    functionName: 'UPGRADER_ROLE',
    ...config
  } as UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"allowance"`.
 */
export function useWithdrawalsAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: withdrawalsABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof withdrawalsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useWithdrawalsBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: withdrawalsABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof withdrawalsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"decimals"`.
 */
export function useWithdrawalsDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: withdrawalsABI, functionName: 'decimals', ...config } as UseContractReadConfig<
    typeof withdrawalsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useWithdrawalsEip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: withdrawalsABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useWithdrawalsGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: withdrawalsABI,
    functionName: 'getRoleAdmin',
    ...config
  } as UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"hasRole"`.
 */
export function useWithdrawalsHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: withdrawalsABI, functionName: 'hasRole', ...config } as UseContractReadConfig<
    typeof withdrawalsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"isWithdrawReady"`.
 */
export function useWithdrawalsIsWithdrawReady<
  TFunctionName extends 'isWithdrawReady',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: withdrawalsABI,
    functionName: 'isWithdrawReady',
    ...config
  } as UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"name"`.
 */
export function useWithdrawalsName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: withdrawalsABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof withdrawalsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"nonces"`.
 */
export function useWithdrawalsNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: withdrawalsABI, functionName: 'nonces', ...config } as UseContractReadConfig<
    typeof withdrawalsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"paused"`.
 */
export function useWithdrawalsPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: withdrawalsABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof withdrawalsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useWithdrawalsProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: withdrawalsABI,
    functionName: 'proxiableUUID',
    ...config
  } as UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"stakeTogether"`.
 */
export function useWithdrawalsStakeTogether<
  TFunctionName extends 'stakeTogether',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: withdrawalsABI,
    functionName: 'stakeTogether',
    ...config
  } as UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useWithdrawalsSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: withdrawalsABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"symbol"`.
 */
export function useWithdrawalsSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: withdrawalsABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof withdrawalsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useWithdrawalsTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: withdrawalsABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"version"`.
 */
export function useWithdrawalsVersion<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: withdrawalsABI, functionName: 'version', ...config } as UseContractReadConfig<
    typeof withdrawalsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__.
 */
export function useWithdrawalsWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof withdrawalsABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, TFunctionName, TMode>({
    abi: withdrawalsABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"approve"`.
 */
export function useWithdrawalsApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'approve', TMode>({
    abi: withdrawalsABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"burn"`.
 */
export function useWithdrawalsBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'burn'>['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'burn', TMode>({
    abi: withdrawalsABI,
    functionName: 'burn',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useWithdrawalsBurnFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'burnFrom'>['request']['abi'],
        'burnFrom',
        TMode
      > & { functionName?: 'burnFrom' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'burnFrom', TMode> & {
        abi?: never
        functionName?: 'burnFrom'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'burnFrom', TMode>({
    abi: withdrawalsABI,
    functionName: 'burnFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useWithdrawalsDecreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'decreaseAllowance'>['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'decreaseAllowance', TMode>({
    abi: withdrawalsABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"grantRole"`.
 */
export function useWithdrawalsGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'grantRole'>['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'grantRole', TMode>({
    abi: withdrawalsABI,
    functionName: 'grantRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useWithdrawalsIncreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'increaseAllowance'>['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'increaseAllowance', TMode>({
    abi: withdrawalsABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"initialize"`.
 */
export function useWithdrawalsInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'initialize', TMode>({
    abi: withdrawalsABI,
    functionName: 'initialize',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"mint"`.
 */
export function useWithdrawalsMint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'mint'>['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'mint', TMode>({
    abi: withdrawalsABI,
    functionName: 'mint',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"pause"`.
 */
export function useWithdrawalsPause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'pause'>['request']['abi'],
        'pause',
        TMode
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'pause', TMode> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'pause', TMode>({
    abi: withdrawalsABI,
    functionName: 'pause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"permit"`.
 */
export function useWithdrawalsPermit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'permit'>['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'permit', TMode>({
    abi: withdrawalsABI,
    functionName: 'permit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useWithdrawalsRenounceRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'renounceRole'>['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'renounceRole', TMode>({
    abi: withdrawalsABI,
    functionName: 'renounceRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useWithdrawalsRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'revokeRole'>['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'revokeRole', TMode>({
    abi: withdrawalsABI,
    functionName: 'revokeRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"setStakeTogether"`.
 */
export function useWithdrawalsSetStakeTogether<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'setStakeTogether'>['request']['abi'],
        'setStakeTogether',
        TMode
      > & { functionName?: 'setStakeTogether' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'setStakeTogether', TMode> & {
        abi?: never
        functionName?: 'setStakeTogether'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'setStakeTogether', TMode>({
    abi: withdrawalsABI,
    functionName: 'setStakeTogether',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"transfer"`.
 */
export function useWithdrawalsTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'transfer', TMode>({
    abi: withdrawalsABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useWithdrawalsTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'transferFrom', TMode>({
    abi: withdrawalsABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"unpause"`.
 */
export function useWithdrawalsUnpause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'unpause'>['request']['abi'],
        'unpause',
        TMode
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'unpause', TMode> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'unpause', TMode>({
    abi: withdrawalsABI,
    functionName: 'unpause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useWithdrawalsUpgradeTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'upgradeTo', TMode>({
    abi: withdrawalsABI,
    functionName: 'upgradeTo',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useWithdrawalsUpgradeToAndCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'upgradeToAndCall', TMode>({
    abi: withdrawalsABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"withdraw"`.
 */
export function useWithdrawalsWithdraw<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'withdraw'>['request']['abi'],
        'withdraw',
        TMode
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'withdraw', TMode> & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'withdraw', TMode>({
    abi: withdrawalsABI,
    functionName: 'withdraw',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__.
 */
export function usePrepareWithdrawalsWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof withdrawalsABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: withdrawalsABI, ...config } as UsePrepareContractWriteConfig<
    typeof withdrawalsABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareWithdrawalsApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareWithdrawalsBurn(
  config: Omit<UsePrepareContractWriteConfig<typeof withdrawalsABI, 'burn'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'burn',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareWithdrawalsBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'burnFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'burnFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'burnFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareWithdrawalsDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareWithdrawalsGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'grantRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareWithdrawalsIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareWithdrawalsInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'initialize',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareWithdrawalsMint(
  config: Omit<UsePrepareContractWriteConfig<typeof withdrawalsABI, 'mint'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'mint',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareWithdrawalsPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'pause'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'pause',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareWithdrawalsPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'permit',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareWithdrawalsRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'renounceRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareWithdrawalsRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'revokeRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"setStakeTogether"`.
 */
export function usePrepareWithdrawalsSetStakeTogether(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'setStakeTogether'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'setStakeTogether',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'setStakeTogether'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareWithdrawalsTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareWithdrawalsTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareWithdrawalsUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'unpause',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'unpause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareWithdrawalsUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'upgradeTo',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareWithdrawalsUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareWithdrawalsWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'withdraw'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'withdraw',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'withdraw'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__.
 */
export function useWithdrawalsEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof withdrawalsABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: withdrawalsABI, ...config } as UseContractEventConfig<
    typeof withdrawalsABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useWithdrawalsAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof withdrawalsABI, 'AdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: withdrawalsABI,
    eventName: 'AdminChanged',
    ...config
  } as UseContractEventConfig<typeof withdrawalsABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"Approval"`.
 */
export function useWithdrawalsApprovalEvent(
  config: Omit<UseContractEventConfig<typeof withdrawalsABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: withdrawalsABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof withdrawalsABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useWithdrawalsBeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof withdrawalsABI, 'BeaconUpgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: withdrawalsABI,
    eventName: 'BeaconUpgraded',
    ...config
  } as UseContractEventConfig<typeof withdrawalsABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useWithdrawalsEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof withdrawalsABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: withdrawalsABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof withdrawalsABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"Initialized"`.
 */
export function useWithdrawalsInitializedEvent(
  config: Omit<UseContractEventConfig<typeof withdrawalsABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: withdrawalsABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof withdrawalsABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"Paused"`.
 */
export function useWithdrawalsPausedEvent(
  config: Omit<UseContractEventConfig<typeof withdrawalsABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: withdrawalsABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof withdrawalsABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"ReceiveEther"`.
 */
export function useWithdrawalsReceiveEtherEvent(
  config: Omit<UseContractEventConfig<typeof withdrawalsABI, 'ReceiveEther'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: withdrawalsABI,
    eventName: 'ReceiveEther',
    ...config
  } as UseContractEventConfig<typeof withdrawalsABI, 'ReceiveEther'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useWithdrawalsRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof withdrawalsABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: withdrawalsABI,
    eventName: 'RoleAdminChanged',
    ...config
  } as UseContractEventConfig<typeof withdrawalsABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useWithdrawalsRoleGrantedEvent(
  config: Omit<UseContractEventConfig<typeof withdrawalsABI, 'RoleGranted'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: withdrawalsABI,
    eventName: 'RoleGranted',
    ...config
  } as UseContractEventConfig<typeof withdrawalsABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useWithdrawalsRoleRevokedEvent(
  config: Omit<UseContractEventConfig<typeof withdrawalsABI, 'RoleRevoked'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: withdrawalsABI,
    eventName: 'RoleRevoked',
    ...config
  } as UseContractEventConfig<typeof withdrawalsABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"SetStakeTogether"`.
 */
export function useWithdrawalsSetStakeTogetherEvent(
  config: Omit<
    UseContractEventConfig<typeof withdrawalsABI, 'SetStakeTogether'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: withdrawalsABI,
    eventName: 'SetStakeTogether',
    ...config
  } as UseContractEventConfig<typeof withdrawalsABI, 'SetStakeTogether'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"Transfer"`.
 */
export function useWithdrawalsTransferEvent(
  config: Omit<UseContractEventConfig<typeof withdrawalsABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: withdrawalsABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof withdrawalsABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useWithdrawalsUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof withdrawalsABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: withdrawalsABI, eventName: 'Unpaused', ...config } as UseContractEventConfig<
    typeof withdrawalsABI,
    'Unpaused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useWithdrawalsUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof withdrawalsABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: withdrawalsABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof withdrawalsABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"Withdraw"`.
 */
export function useWithdrawalsWithdrawEvent(
  config: Omit<UseContractEventConfig<typeof withdrawalsABI, 'Withdraw'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: withdrawalsABI, eventName: 'Withdraw', ...config } as UseContractEventConfig<
    typeof withdrawalsABI,
    'Withdraw'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockAirdropABI}__.
 */
export function useMockAirdropRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof mockAirdropABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof mockAirdropABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: mockAirdropABI, ...config } as UseContractReadConfig<
    typeof mockAirdropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"ADMIN_ROLE"`.
 */
export function useMockAirdropAdminRole<
  TFunctionName extends 'ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof mockAirdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockAirdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockAirdropABI,
    functionName: 'ADMIN_ROLE',
    ...config
  } as UseContractReadConfig<typeof mockAirdropABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useMockAirdropDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof mockAirdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockAirdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockAirdropABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config
  } as UseContractReadConfig<typeof mockAirdropABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"UPGRADER_ROLE"`.
 */
export function useMockAirdropUpgraderRole<
  TFunctionName extends 'UPGRADER_ROLE',
  TSelectData = ReadContractResult<typeof mockAirdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockAirdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockAirdropABI,
    functionName: 'UPGRADER_ROLE',
    ...config
  } as UseContractReadConfig<typeof mockAirdropABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"airdropsMerkleRoots"`.
 */
export function useMockAirdropAirdropsMerkleRoots<
  TFunctionName extends 'airdropsMerkleRoots',
  TSelectData = ReadContractResult<typeof mockAirdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockAirdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockAirdropABI,
    functionName: 'airdropsMerkleRoots',
    ...config
  } as UseContractReadConfig<typeof mockAirdropABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useMockAirdropGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof mockAirdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockAirdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockAirdropABI,
    functionName: 'getRoleAdmin',
    ...config
  } as UseContractReadConfig<typeof mockAirdropABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"hasRole"`.
 */
export function useMockAirdropHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof mockAirdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockAirdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: mockAirdropABI, functionName: 'hasRole', ...config } as UseContractReadConfig<
    typeof mockAirdropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"maxBatchSize"`.
 */
export function useMockAirdropMaxBatchSize<
  TFunctionName extends 'maxBatchSize',
  TSelectData = ReadContractResult<typeof mockAirdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockAirdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockAirdropABI,
    functionName: 'maxBatchSize',
    ...config
  } as UseContractReadConfig<typeof mockAirdropABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"paused"`.
 */
export function useMockAirdropPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof mockAirdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockAirdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: mockAirdropABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof mockAirdropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useMockAirdropProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof mockAirdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockAirdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockAirdropABI,
    functionName: 'proxiableUUID',
    ...config
  } as UseContractReadConfig<typeof mockAirdropABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"router"`.
 */
export function useMockAirdropRouter<
  TFunctionName extends 'router',
  TSelectData = ReadContractResult<typeof mockAirdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockAirdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: mockAirdropABI, functionName: 'router', ...config } as UseContractReadConfig<
    typeof mockAirdropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"stakeTogether"`.
 */
export function useMockAirdropStakeTogether<
  TFunctionName extends 'stakeTogether',
  TSelectData = ReadContractResult<typeof mockAirdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockAirdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockAirdropABI,
    functionName: 'stakeTogether',
    ...config
  } as UseContractReadConfig<typeof mockAirdropABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useMockAirdropSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof mockAirdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockAirdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockAirdropABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<typeof mockAirdropABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"version"`.
 */
export function useMockAirdropVersion<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<typeof mockAirdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockAirdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: mockAirdropABI, functionName: 'version', ...config } as UseContractReadConfig<
    typeof mockAirdropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockAirdropABI}__.
 */
export function useMockAirdropWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockAirdropABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof mockAirdropABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof mockAirdropABI, TFunctionName, TMode>({
    abi: mockAirdropABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"grantRole"`.
 */
export function useMockAirdropGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockAirdropABI, 'grantRole'>['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof mockAirdropABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<typeof mockAirdropABI, 'grantRole', TMode>({
    abi: mockAirdropABI,
    functionName: 'grantRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"initializeV2"`.
 */
export function useMockAirdropInitializeV2<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockAirdropABI, 'initializeV2'>['request']['abi'],
        'initializeV2',
        TMode
      > & { functionName?: 'initializeV2' }
    : UseContractWriteConfig<typeof mockAirdropABI, 'initializeV2', TMode> & {
        abi?: never
        functionName?: 'initializeV2'
      } = {} as any
) {
  return useContractWrite<typeof mockAirdropABI, 'initializeV2', TMode>({
    abi: mockAirdropABI,
    functionName: 'initializeV2',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"pause"`.
 */
export function useMockAirdropPause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockAirdropABI, 'pause'>['request']['abi'],
        'pause',
        TMode
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<typeof mockAirdropABI, 'pause', TMode> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any
) {
  return useContractWrite<typeof mockAirdropABI, 'pause', TMode>({
    abi: mockAirdropABI,
    functionName: 'pause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useMockAirdropRenounceRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockAirdropABI, 'renounceRole'>['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof mockAirdropABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<typeof mockAirdropABI, 'renounceRole', TMode>({
    abi: mockAirdropABI,
    functionName: 'renounceRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useMockAirdropRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockAirdropABI, 'revokeRole'>['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof mockAirdropABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<typeof mockAirdropABI, 'revokeRole', TMode>({
    abi: mockAirdropABI,
    functionName: 'revokeRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"unpause"`.
 */
export function useMockAirdropUnpause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockAirdropABI, 'unpause'>['request']['abi'],
        'unpause',
        TMode
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<typeof mockAirdropABI, 'unpause', TMode> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any
) {
  return useContractWrite<typeof mockAirdropABI, 'unpause', TMode>({
    abi: mockAirdropABI,
    functionName: 'unpause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useMockAirdropUpgradeTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockAirdropABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof mockAirdropABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any
) {
  return useContractWrite<typeof mockAirdropABI, 'upgradeTo', TMode>({
    abi: mockAirdropABI,
    functionName: 'upgradeTo',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useMockAirdropUpgradeToAndCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockAirdropABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof mockAirdropABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any
) {
  return useContractWrite<typeof mockAirdropABI, 'upgradeToAndCall', TMode>({
    abi: mockAirdropABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockAirdropABI}__.
 */
export function usePrepareMockAirdropWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof mockAirdropABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: mockAirdropABI, ...config } as UsePrepareContractWriteConfig<
    typeof mockAirdropABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareMockAirdropGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockAirdropABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockAirdropABI,
    functionName: 'grantRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockAirdropABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"initializeV2"`.
 */
export function usePrepareMockAirdropInitializeV2(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockAirdropABI, 'initializeV2'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockAirdropABI,
    functionName: 'initializeV2',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockAirdropABI, 'initializeV2'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareMockAirdropPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockAirdropABI, 'pause'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockAirdropABI,
    functionName: 'pause',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockAirdropABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareMockAirdropRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockAirdropABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockAirdropABI,
    functionName: 'renounceRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockAirdropABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareMockAirdropRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockAirdropABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockAirdropABI,
    functionName: 'revokeRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockAirdropABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareMockAirdropUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockAirdropABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockAirdropABI,
    functionName: 'unpause',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockAirdropABI, 'unpause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareMockAirdropUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockAirdropABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockAirdropABI,
    functionName: 'upgradeTo',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockAirdropABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockAirdropABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareMockAirdropUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockAirdropABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockAirdropABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockAirdropABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockAirdropABI}__.
 */
export function useMockAirdropEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof mockAirdropABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: mockAirdropABI, ...config } as UseContractEventConfig<
    typeof mockAirdropABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockAirdropABI}__ and `eventName` set to `"AddAirdropMerkleRoot"`.
 */
export function useMockAirdropAddAirdropMerkleRootEvent(
  config: Omit<
    UseContractEventConfig<typeof mockAirdropABI, 'AddAirdropMerkleRoot'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockAirdropABI,
    eventName: 'AddAirdropMerkleRoot',
    ...config
  } as UseContractEventConfig<typeof mockAirdropABI, 'AddAirdropMerkleRoot'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockAirdropABI}__ and `eventName` set to `"AddMerkleRoots"`.
 */
export function useMockAirdropAddMerkleRootsEvent(
  config: Omit<UseContractEventConfig<typeof mockAirdropABI, 'AddMerkleRoots'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: mockAirdropABI,
    eventName: 'AddMerkleRoots',
    ...config
  } as UseContractEventConfig<typeof mockAirdropABI, 'AddMerkleRoots'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockAirdropABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useMockAirdropAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof mockAirdropABI, 'AdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: mockAirdropABI,
    eventName: 'AdminChanged',
    ...config
  } as UseContractEventConfig<typeof mockAirdropABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockAirdropABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useMockAirdropBeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof mockAirdropABI, 'BeaconUpgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: mockAirdropABI,
    eventName: 'BeaconUpgraded',
    ...config
  } as UseContractEventConfig<typeof mockAirdropABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockAirdropABI}__ and `eventName` set to `"ClaimAirdrop"`.
 */
export function useMockAirdropClaimAirdropEvent(
  config: Omit<UseContractEventConfig<typeof mockAirdropABI, 'ClaimAirdrop'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: mockAirdropABI,
    eventName: 'ClaimAirdrop',
    ...config
  } as UseContractEventConfig<typeof mockAirdropABI, 'ClaimAirdrop'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockAirdropABI}__ and `eventName` set to `"ClaimAirdropBatch"`.
 */
export function useMockAirdropClaimAirdropBatchEvent(
  config: Omit<
    UseContractEventConfig<typeof mockAirdropABI, 'ClaimAirdropBatch'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockAirdropABI,
    eventName: 'ClaimAirdropBatch',
    ...config
  } as UseContractEventConfig<typeof mockAirdropABI, 'ClaimAirdropBatch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockAirdropABI}__ and `eventName` set to `"ClaimRewards"`.
 */
export function useMockAirdropClaimRewardsEvent(
  config: Omit<UseContractEventConfig<typeof mockAirdropABI, 'ClaimRewards'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: mockAirdropABI,
    eventName: 'ClaimRewards',
    ...config
  } as UseContractEventConfig<typeof mockAirdropABI, 'ClaimRewards'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockAirdropABI}__ and `eventName` set to `"ClaimRewardsBatch"`.
 */
export function useMockAirdropClaimRewardsBatchEvent(
  config: Omit<
    UseContractEventConfig<typeof mockAirdropABI, 'ClaimRewardsBatch'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockAirdropABI,
    eventName: 'ClaimRewardsBatch',
    ...config
  } as UseContractEventConfig<typeof mockAirdropABI, 'ClaimRewardsBatch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockAirdropABI}__ and `eventName` set to `"Initialized"`.
 */
export function useMockAirdropInitializedEvent(
  config: Omit<UseContractEventConfig<typeof mockAirdropABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: mockAirdropABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof mockAirdropABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockAirdropABI}__ and `eventName` set to `"Paused"`.
 */
export function useMockAirdropPausedEvent(
  config: Omit<UseContractEventConfig<typeof mockAirdropABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: mockAirdropABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof mockAirdropABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockAirdropABI}__ and `eventName` set to `"ReceiveEther"`.
 */
export function useMockAirdropReceiveEtherEvent(
  config: Omit<UseContractEventConfig<typeof mockAirdropABI, 'ReceiveEther'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: mockAirdropABI,
    eventName: 'ReceiveEther',
    ...config
  } as UseContractEventConfig<typeof mockAirdropABI, 'ReceiveEther'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockAirdropABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useMockAirdropRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockAirdropABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockAirdropABI,
    eventName: 'RoleAdminChanged',
    ...config
  } as UseContractEventConfig<typeof mockAirdropABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockAirdropABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useMockAirdropRoleGrantedEvent(
  config: Omit<UseContractEventConfig<typeof mockAirdropABI, 'RoleGranted'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: mockAirdropABI,
    eventName: 'RoleGranted',
    ...config
  } as UseContractEventConfig<typeof mockAirdropABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockAirdropABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useMockAirdropRoleRevokedEvent(
  config: Omit<UseContractEventConfig<typeof mockAirdropABI, 'RoleRevoked'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: mockAirdropABI,
    eventName: 'RoleRevoked',
    ...config
  } as UseContractEventConfig<typeof mockAirdropABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockAirdropABI}__ and `eventName` set to `"SetMaxBatchSize"`.
 */
export function useMockAirdropSetMaxBatchSizeEvent(
  config: Omit<
    UseContractEventConfig<typeof mockAirdropABI, 'SetMaxBatchSize'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockAirdropABI,
    eventName: 'SetMaxBatchSize',
    ...config
  } as UseContractEventConfig<typeof mockAirdropABI, 'SetMaxBatchSize'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockAirdropABI}__ and `eventName` set to `"SetRouter"`.
 */
export function useMockAirdropSetRouterEvent(
  config: Omit<UseContractEventConfig<typeof mockAirdropABI, 'SetRouter'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: mockAirdropABI, eventName: 'SetRouter', ...config } as UseContractEventConfig<
    typeof mockAirdropABI,
    'SetRouter'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockAirdropABI}__ and `eventName` set to `"SetStakeTogether"`.
 */
export function useMockAirdropSetStakeTogetherEvent(
  config: Omit<
    UseContractEventConfig<typeof mockAirdropABI, 'SetStakeTogether'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockAirdropABI,
    eventName: 'SetStakeTogether',
    ...config
  } as UseContractEventConfig<typeof mockAirdropABI, 'SetStakeTogether'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockAirdropABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useMockAirdropUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof mockAirdropABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: mockAirdropABI, eventName: 'Unpaused', ...config } as UseContractEventConfig<
    typeof mockAirdropABI,
    'Unpaused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockAirdropABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useMockAirdropUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof mockAirdropABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: mockAirdropABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof mockAirdropABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__.
 */
export function useMockRouterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: mockRouterABI, ...config } as UseContractReadConfig<
    typeof mockRouterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"ADMIN_ROLE"`.
 */
export function useMockRouterAdminRole<
  TFunctionName extends 'ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: mockRouterABI, functionName: 'ADMIN_ROLE', ...config } as UseContractReadConfig<
    typeof mockRouterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useMockRouterDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockRouterABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config
  } as UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"ORACLE_REPORT_MANAGER_ROLE"`.
 */
export function useMockRouterOracleReportManagerRole<
  TFunctionName extends 'ORACLE_REPORT_MANAGER_ROLE',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockRouterABI,
    functionName: 'ORACLE_REPORT_MANAGER_ROLE',
    ...config
  } as UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"ORACLE_REPORT_ROLE"`.
 */
export function useMockRouterOracleReportRole<
  TFunctionName extends 'ORACLE_REPORT_ROLE',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockRouterABI,
    functionName: 'ORACLE_REPORT_ROLE',
    ...config
  } as UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"ORACLE_REPORT_SENTINEL_ROLE"`.
 */
export function useMockRouterOracleReportSentinelRole<
  TFunctionName extends 'ORACLE_REPORT_SENTINEL_ROLE',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockRouterABI,
    functionName: 'ORACLE_REPORT_SENTINEL_ROLE',
    ...config
  } as UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"UPGRADER_ROLE"`.
 */
export function useMockRouterUpgraderRole<
  TFunctionName extends 'UPGRADER_ROLE',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockRouterABI,
    functionName: 'UPGRADER_ROLE',
    ...config
  } as UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"airdrop"`.
 */
export function useMockRouterAirdrop<
  TFunctionName extends 'airdrop',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: mockRouterABI, functionName: 'airdrop', ...config } as UseContractReadConfig<
    typeof mockRouterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"config"`.
 */
export function useMockRouterConfig<
  TFunctionName extends 'config',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: mockRouterABI, functionName: 'config', ...config } as UseContractReadConfig<
    typeof mockRouterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"consensusInvalidatedReport"`.
 */
export function useMockRouterConsensusInvalidatedReport<
  TFunctionName extends 'consensusInvalidatedReport',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockRouterABI,
    functionName: 'consensusInvalidatedReport',
    ...config
  } as UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"consensusReport"`.
 */
export function useMockRouterConsensusReport<
  TFunctionName extends 'consensusReport',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockRouterABI,
    functionName: 'consensusReport',
    ...config
  } as UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"executedReports"`.
 */
export function useMockRouterExecutedReports<
  TFunctionName extends 'executedReports',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockRouterABI,
    functionName: 'executedReports',
    ...config
  } as UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useMockRouterGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockRouterABI,
    functionName: 'getRoleAdmin',
    ...config
  } as UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"hasRole"`.
 */
export function useMockRouterHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: mockRouterABI, functionName: 'hasRole', ...config } as UseContractReadConfig<
    typeof mockRouterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"lastConsensusEpoch"`.
 */
export function useMockRouterLastConsensusEpoch<
  TFunctionName extends 'lastConsensusEpoch',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockRouterABI,
    functionName: 'lastConsensusEpoch',
    ...config
  } as UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"lastExecutedConsensusEpoch"`.
 */
export function useMockRouterLastExecutedConsensusEpoch<
  TFunctionName extends 'lastExecutedConsensusEpoch',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockRouterABI,
    functionName: 'lastExecutedConsensusEpoch',
    ...config
  } as UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"oracleReports"`.
 */
export function useMockRouterOracleReports<
  TFunctionName extends 'oracleReports',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockRouterABI,
    functionName: 'oracleReports',
    ...config
  } as UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"oracleReportsVotes"`.
 */
export function useMockRouterOracleReportsVotes<
  TFunctionName extends 'oracleReportsVotes',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockRouterABI,
    functionName: 'oracleReportsVotes',
    ...config
  } as UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"paused"`.
 */
export function useMockRouterPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: mockRouterABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof mockRouterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useMockRouterProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockRouterABI,
    functionName: 'proxiableUUID',
    ...config
  } as UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"reportBlockNumber"`.
 */
export function useMockRouterReportBlockNumber<
  TFunctionName extends 'reportBlockNumber',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockRouterABI,
    functionName: 'reportBlockNumber',
    ...config
  } as UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"reportExecutionBlock"`.
 */
export function useMockRouterReportExecutionBlock<
  TFunctionName extends 'reportExecutionBlock',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockRouterABI,
    functionName: 'reportExecutionBlock',
    ...config
  } as UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"reportHistoric"`.
 */
export function useMockRouterReportHistoric<
  TFunctionName extends 'reportHistoric',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockRouterABI,
    functionName: 'reportHistoric',
    ...config
  } as UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"reportOraclesBlacklist"`.
 */
export function useMockRouterReportOraclesBlacklist<
  TFunctionName extends 'reportOraclesBlacklist',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockRouterABI,
    functionName: 'reportOraclesBlacklist',
    ...config
  } as UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"stakeTogether"`.
 */
export function useMockRouterStakeTogether<
  TFunctionName extends 'stakeTogether',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockRouterABI,
    functionName: 'stakeTogether',
    ...config
  } as UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useMockRouterSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockRouterABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"totalReportOracles"`.
 */
export function useMockRouterTotalReportOracles<
  TFunctionName extends 'totalReportOracles',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockRouterABI,
    functionName: 'totalReportOracles',
    ...config
  } as UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"version"`.
 */
export function useMockRouterVersion<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: mockRouterABI, functionName: 'version', ...config } as UseContractReadConfig<
    typeof mockRouterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"withdrawals"`.
 */
export function useMockRouterWithdrawals<
  TFunctionName extends 'withdrawals',
  TSelectData = ReadContractResult<typeof mockRouterABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockRouterABI,
    functionName: 'withdrawals',
    ...config
  } as UseContractReadConfig<typeof mockRouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockRouterABI}__.
 */
export function useMockRouterWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockRouterABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof mockRouterABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof mockRouterABI, TFunctionName, TMode>({ abi: mockRouterABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"grantRole"`.
 */
export function useMockRouterGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockRouterABI, 'grantRole'>['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof mockRouterABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<typeof mockRouterABI, 'grantRole', TMode>({
    abi: mockRouterABI,
    functionName: 'grantRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"initializeV2"`.
 */
export function useMockRouterInitializeV2<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockRouterABI, 'initializeV2'>['request']['abi'],
        'initializeV2',
        TMode
      > & { functionName?: 'initializeV2' }
    : UseContractWriteConfig<typeof mockRouterABI, 'initializeV2', TMode> & {
        abi?: never
        functionName?: 'initializeV2'
      } = {} as any
) {
  return useContractWrite<typeof mockRouterABI, 'initializeV2', TMode>({
    abi: mockRouterABI,
    functionName: 'initializeV2',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"pause"`.
 */
export function useMockRouterPause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockRouterABI, 'pause'>['request']['abi'],
        'pause',
        TMode
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<typeof mockRouterABI, 'pause', TMode> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any
) {
  return useContractWrite<typeof mockRouterABI, 'pause', TMode>({
    abi: mockRouterABI,
    functionName: 'pause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useMockRouterRenounceRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockRouterABI, 'renounceRole'>['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof mockRouterABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<typeof mockRouterABI, 'renounceRole', TMode>({
    abi: mockRouterABI,
    functionName: 'renounceRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useMockRouterRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockRouterABI, 'revokeRole'>['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof mockRouterABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<typeof mockRouterABI, 'revokeRole', TMode>({
    abi: mockRouterABI,
    functionName: 'revokeRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"unpause"`.
 */
export function useMockRouterUnpause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockRouterABI, 'unpause'>['request']['abi'],
        'unpause',
        TMode
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<typeof mockRouterABI, 'unpause', TMode> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any
) {
  return useContractWrite<typeof mockRouterABI, 'unpause', TMode>({
    abi: mockRouterABI,
    functionName: 'unpause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useMockRouterUpgradeTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockRouterABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof mockRouterABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any
) {
  return useContractWrite<typeof mockRouterABI, 'upgradeTo', TMode>({
    abi: mockRouterABI,
    functionName: 'upgradeTo',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useMockRouterUpgradeToAndCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockRouterABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof mockRouterABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any
) {
  return useContractWrite<typeof mockRouterABI, 'upgradeToAndCall', TMode>({
    abi: mockRouterABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockRouterABI}__.
 */
export function usePrepareMockRouterWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof mockRouterABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: mockRouterABI, ...config } as UsePrepareContractWriteConfig<
    typeof mockRouterABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareMockRouterGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockRouterABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockRouterABI,
    functionName: 'grantRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockRouterABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"initializeV2"`.
 */
export function usePrepareMockRouterInitializeV2(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockRouterABI, 'initializeV2'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockRouterABI,
    functionName: 'initializeV2',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockRouterABI, 'initializeV2'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareMockRouterPause(
  config: Omit<UsePrepareContractWriteConfig<typeof mockRouterABI, 'pause'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: mockRouterABI,
    functionName: 'pause',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockRouterABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareMockRouterRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockRouterABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockRouterABI,
    functionName: 'renounceRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockRouterABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareMockRouterRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockRouterABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockRouterABI,
    functionName: 'revokeRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockRouterABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareMockRouterUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockRouterABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockRouterABI,
    functionName: 'unpause',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockRouterABI, 'unpause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareMockRouterUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockRouterABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockRouterABI,
    functionName: 'upgradeTo',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockRouterABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockRouterABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareMockRouterUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockRouterABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockRouterABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockRouterABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__.
 */
export function useMockRouterEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof mockRouterABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: mockRouterABI, ...config } as UseContractEventConfig<
    typeof mockRouterABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"AddReportOracle"`.
 */
export function useMockRouterAddReportOracleEvent(
  config: Omit<UseContractEventConfig<typeof mockRouterABI, 'AddReportOracle'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: mockRouterABI,
    eventName: 'AddReportOracle',
    ...config
  } as UseContractEventConfig<typeof mockRouterABI, 'AddReportOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useMockRouterAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof mockRouterABI, 'AdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: mockRouterABI,
    eventName: 'AdminChanged',
    ...config
  } as UseContractEventConfig<typeof mockRouterABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useMockRouterBeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof mockRouterABI, 'BeaconUpgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: mockRouterABI,
    eventName: 'BeaconUpgraded',
    ...config
  } as UseContractEventConfig<typeof mockRouterABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"BlacklistReportOracle"`.
 */
export function useMockRouterBlacklistReportOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof mockRouterABI, 'BlacklistReportOracle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockRouterABI,
    eventName: 'BlacklistReportOracle',
    ...config
  } as UseContractEventConfig<typeof mockRouterABI, 'BlacklistReportOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"BlacklistReportOracleManually"`.
 */
export function useMockRouterBlacklistReportOracleManuallyEvent(
  config: Omit<
    UseContractEventConfig<typeof mockRouterABI, 'BlacklistReportOracleManually'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockRouterABI,
    eventName: 'BlacklistReportOracleManually',
    ...config
  } as UseContractEventConfig<typeof mockRouterABI, 'BlacklistReportOracleManually'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"ConsensusApprove"`.
 */
export function useMockRouterConsensusApproveEvent(
  config: Omit<
    UseContractEventConfig<typeof mockRouterABI, 'ConsensusApprove'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockRouterABI,
    eventName: 'ConsensusApprove',
    ...config
  } as UseContractEventConfig<typeof mockRouterABI, 'ConsensusApprove'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"ConsensusNotReached"`.
 */
export function useMockRouterConsensusNotReachedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockRouterABI, 'ConsensusNotReached'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockRouterABI,
    eventName: 'ConsensusNotReached',
    ...config
  } as UseContractEventConfig<typeof mockRouterABI, 'ConsensusNotReached'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"ExecuteReport"`.
 */
export function useMockRouterExecuteReportEvent(
  config: Omit<UseContractEventConfig<typeof mockRouterABI, 'ExecuteReport'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: mockRouterABI,
    eventName: 'ExecuteReport',
    ...config
  } as UseContractEventConfig<typeof mockRouterABI, 'ExecuteReport'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"Initialized"`.
 */
export function useMockRouterInitializedEvent(
  config: Omit<UseContractEventConfig<typeof mockRouterABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: mockRouterABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof mockRouterABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"InvalidateConsensus"`.
 */
export function useMockRouterInvalidateConsensusEvent(
  config: Omit<
    UseContractEventConfig<typeof mockRouterABI, 'InvalidateConsensus'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockRouterABI,
    eventName: 'InvalidateConsensus',
    ...config
  } as UseContractEventConfig<typeof mockRouterABI, 'InvalidateConsensus'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"Paused"`.
 */
export function useMockRouterPausedEvent(
  config: Omit<UseContractEventConfig<typeof mockRouterABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: mockRouterABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof mockRouterABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"PenalizeReportOracle"`.
 */
export function useMockRouterPenalizeReportOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof mockRouterABI, 'PenalizeReportOracle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockRouterABI,
    eventName: 'PenalizeReportOracle',
    ...config
  } as UseContractEventConfig<typeof mockRouterABI, 'PenalizeReportOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"ReceiveEther"`.
 */
export function useMockRouterReceiveEtherEvent(
  config: Omit<UseContractEventConfig<typeof mockRouterABI, 'ReceiveEther'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: mockRouterABI,
    eventName: 'ReceiveEther',
    ...config
  } as UseContractEventConfig<typeof mockRouterABI, 'ReceiveEther'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"RemoveReportOracle"`.
 */
export function useMockRouterRemoveReportOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof mockRouterABI, 'RemoveReportOracle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockRouterABI,
    eventName: 'RemoveReportOracle',
    ...config
  } as UseContractEventConfig<typeof mockRouterABI, 'RemoveReportOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"RequestValidatorsExit"`.
 */
export function useMockRouterRequestValidatorsExitEvent(
  config: Omit<
    UseContractEventConfig<typeof mockRouterABI, 'RequestValidatorsExit'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockRouterABI,
    eventName: 'RequestValidatorsExit',
    ...config
  } as UseContractEventConfig<typeof mockRouterABI, 'RequestValidatorsExit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"RewardReportOracle"`.
 */
export function useMockRouterRewardReportOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof mockRouterABI, 'RewardReportOracle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockRouterABI,
    eventName: 'RewardReportOracle',
    ...config
  } as UseContractEventConfig<typeof mockRouterABI, 'RewardReportOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useMockRouterRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockRouterABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockRouterABI,
    eventName: 'RoleAdminChanged',
    ...config
  } as UseContractEventConfig<typeof mockRouterABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useMockRouterRoleGrantedEvent(
  config: Omit<UseContractEventConfig<typeof mockRouterABI, 'RoleGranted'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: mockRouterABI, eventName: 'RoleGranted', ...config } as UseContractEventConfig<
    typeof mockRouterABI,
    'RoleGranted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useMockRouterRoleRevokedEvent(
  config: Omit<UseContractEventConfig<typeof mockRouterABI, 'RoleRevoked'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: mockRouterABI, eventName: 'RoleRevoked', ...config } as UseContractEventConfig<
    typeof mockRouterABI,
    'RoleRevoked'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"SetConfig"`.
 */
export function useMockRouterSetConfigEvent(
  config: Omit<UseContractEventConfig<typeof mockRouterABI, 'SetConfig'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: mockRouterABI, eventName: 'SetConfig', ...config } as UseContractEventConfig<
    typeof mockRouterABI,
    'SetConfig'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"SetLastConsensusEpoch"`.
 */
export function useMockRouterSetLastConsensusEpochEvent(
  config: Omit<
    UseContractEventConfig<typeof mockRouterABI, 'SetLastConsensusEpoch'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockRouterABI,
    eventName: 'SetLastConsensusEpoch',
    ...config
  } as UseContractEventConfig<typeof mockRouterABI, 'SetLastConsensusEpoch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"SetStakeTogether"`.
 */
export function useMockRouterSetStakeTogetherEvent(
  config: Omit<
    UseContractEventConfig<typeof mockRouterABI, 'SetStakeTogether'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockRouterABI,
    eventName: 'SetStakeTogether',
    ...config
  } as UseContractEventConfig<typeof mockRouterABI, 'SetStakeTogether'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"SkipNextBlockInterval"`.
 */
export function useMockRouterSkipNextBlockIntervalEvent(
  config: Omit<
    UseContractEventConfig<typeof mockRouterABI, 'SkipNextBlockInterval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockRouterABI,
    eventName: 'SkipNextBlockInterval',
    ...config
  } as UseContractEventConfig<typeof mockRouterABI, 'SkipNextBlockInterval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"SubmitReport"`.
 */
export function useMockRouterSubmitReportEvent(
  config: Omit<UseContractEventConfig<typeof mockRouterABI, 'SubmitReport'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: mockRouterABI,
    eventName: 'SubmitReport',
    ...config
  } as UseContractEventConfig<typeof mockRouterABI, 'SubmitReport'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"UnBlacklistReportOracle"`.
 */
export function useMockRouterUnBlacklistReportOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof mockRouterABI, 'UnBlacklistReportOracle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockRouterABI,
    eventName: 'UnBlacklistReportOracle',
    ...config
  } as UseContractEventConfig<typeof mockRouterABI, 'UnBlacklistReportOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useMockRouterUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof mockRouterABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: mockRouterABI, eventName: 'Unpaused', ...config } as UseContractEventConfig<
    typeof mockRouterABI,
    'Unpaused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"UpdateReportOracleQuorum"`.
 */
export function useMockRouterUpdateReportOracleQuorumEvent(
  config: Omit<
    UseContractEventConfig<typeof mockRouterABI, 'UpdateReportOracleQuorum'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockRouterABI,
    eventName: 'UpdateReportOracleQuorum',
    ...config
  } as UseContractEventConfig<typeof mockRouterABI, 'UpdateReportOracleQuorum'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useMockRouterUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof mockRouterABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: mockRouterABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof mockRouterABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRouterABI}__ and `eventName` set to `"ValidatorsToExit"`.
 */
export function useMockRouterValidatorsToExitEvent(
  config: Omit<
    UseContractEventConfig<typeof mockRouterABI, 'ValidatorsToExit'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockRouterABI,
    eventName: 'ValidatorsToExit',
    ...config
  } as UseContractEventConfig<typeof mockRouterABI, 'ValidatorsToExit'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__.
 */
export function useMockStakeTogetherRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: mockStakeTogetherABI, ...config } as UseContractReadConfig<
    typeof mockStakeTogetherABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"ADMIN_ROLE"`.
 */
export function useMockStakeTogetherAdminRole<
  TFunctionName extends 'ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'ADMIN_ROLE',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useMockStakeTogetherDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useMockStakeTogetherDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"ORACLE_VALIDATOR_MANAGER_ROLE"`.
 */
export function useMockStakeTogetherOracleValidatorManagerRole<
  TFunctionName extends 'ORACLE_VALIDATOR_MANAGER_ROLE',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'ORACLE_VALIDATOR_MANAGER_ROLE',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"ORACLE_VALIDATOR_ROLE"`.
 */
export function useMockStakeTogetherOracleValidatorRole<
  TFunctionName extends 'ORACLE_VALIDATOR_ROLE',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'ORACLE_VALIDATOR_ROLE',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"ORACLE_VALIDATOR_SENTINEL_ROLE"`.
 */
export function useMockStakeTogetherOracleValidatorSentinelRole<
  TFunctionName extends 'ORACLE_VALIDATOR_SENTINEL_ROLE',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'ORACLE_VALIDATOR_SENTINEL_ROLE',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"POOL_MANAGER_ROLE"`.
 */
export function useMockStakeTogetherPoolManagerRole<
  TFunctionName extends 'POOL_MANAGER_ROLE',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'POOL_MANAGER_ROLE',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"UPGRADER_ROLE"`.
 */
export function useMockStakeTogetherUpgraderRole<
  TFunctionName extends 'UPGRADER_ROLE',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'UPGRADER_ROLE',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"allowance"`.
 */
export function useMockStakeTogetherAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useMockStakeTogetherBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"beaconBalance"`.
 */
export function useMockStakeTogetherBeaconBalance<
  TFunctionName extends 'beaconBalance',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'beaconBalance',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"config"`.
 */
export function useMockStakeTogetherConfig<
  TFunctionName extends 'config',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'config',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"currentOracleIndex"`.
 */
export function useMockStakeTogetherCurrentOracleIndex<
  TFunctionName extends 'currentOracleIndex',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'currentOracleIndex',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"decimals"`.
 */
export function useMockStakeTogetherDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'decimals',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"deposit"`.
 */
export function useMockStakeTogetherDeposit<
  TFunctionName extends 'deposit',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'deposit',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useMockStakeTogetherEip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useMockStakeTogetherGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'getRoleAdmin',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"hasRole"`.
 */
export function useMockStakeTogetherHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'hasRole',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"lastResetBlock"`.
 */
export function useMockStakeTogetherLastResetBlock<
  TFunctionName extends 'lastResetBlock',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'lastResetBlock',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"name"`.
 */
export function useMockStakeTogetherName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"nonces"`.
 */
export function useMockStakeTogetherNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'nonces',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"paused"`.
 */
export function useMockStakeTogetherPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'paused',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useMockStakeTogetherProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'proxiableUUID',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"router"`.
 */
export function useMockStakeTogetherRouter<
  TFunctionName extends 'router',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'router',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"shares"`.
 */
export function useMockStakeTogetherShares<
  TFunctionName extends 'shares',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'shares',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useMockStakeTogetherSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"symbol"`.
 */
export function useMockStakeTogetherSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"totalDeposited"`.
 */
export function useMockStakeTogetherTotalDeposited<
  TFunctionName extends 'totalDeposited',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'totalDeposited',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"totalShares"`.
 */
export function useMockStakeTogetherTotalShares<
  TFunctionName extends 'totalShares',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'totalShares',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useMockStakeTogetherTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"totalWithdrawn"`.
 */
export function useMockStakeTogetherTotalWithdrawn<
  TFunctionName extends 'totalWithdrawn',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'totalWithdrawn',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"version"`.
 */
export function useMockStakeTogetherVersion<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'version',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"withdrawalCredentials"`.
 */
export function useMockStakeTogetherWithdrawalCredentials<
  TFunctionName extends 'withdrawalCredentials',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'withdrawalCredentials',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"withdrawals"`.
 */
export function useMockStakeTogetherWithdrawals<
  TFunctionName extends 'withdrawals',
  TSelectData = ReadContractResult<typeof mockStakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockStakeTogetherABI,
    functionName: 'withdrawals',
    ...config
  } as UseContractReadConfig<typeof mockStakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__.
 */
export function useMockStakeTogetherWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockStakeTogetherABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof mockStakeTogetherABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof mockStakeTogetherABI, TFunctionName, TMode>({
    abi: mockStakeTogetherABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"approve"`.
 */
export function useMockStakeTogetherApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockStakeTogetherABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof mockStakeTogetherABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof mockStakeTogetherABI, 'approve', TMode>({
    abi: mockStakeTogetherABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"burn"`.
 */
export function useMockStakeTogetherBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockStakeTogetherABI, 'burn'>['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof mockStakeTogetherABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any
) {
  return useContractWrite<typeof mockStakeTogetherABI, 'burn', TMode>({
    abi: mockStakeTogetherABI,
    functionName: 'burn',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useMockStakeTogetherBurnFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockStakeTogetherABI, 'burnFrom'>['request']['abi'],
        'burnFrom',
        TMode
      > & { functionName?: 'burnFrom' }
    : UseContractWriteConfig<typeof mockStakeTogetherABI, 'burnFrom', TMode> & {
        abi?: never
        functionName?: 'burnFrom'
      } = {} as any
) {
  return useContractWrite<typeof mockStakeTogetherABI, 'burnFrom', TMode>({
    abi: mockStakeTogetherABI,
    functionName: 'burnFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useMockStakeTogetherDecreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockStakeTogetherABI, 'decreaseAllowance'>['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof mockStakeTogetherABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof mockStakeTogetherABI, 'decreaseAllowance', TMode>({
    abi: mockStakeTogetherABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"grantRole"`.
 */
export function useMockStakeTogetherGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockStakeTogetherABI, 'grantRole'>['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof mockStakeTogetherABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<typeof mockStakeTogetherABI, 'grantRole', TMode>({
    abi: mockStakeTogetherABI,
    functionName: 'grantRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useMockStakeTogetherIncreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockStakeTogetherABI, 'increaseAllowance'>['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof mockStakeTogetherABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof mockStakeTogetherABI, 'increaseAllowance', TMode>({
    abi: mockStakeTogetherABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"initializeV2"`.
 */
export function useMockStakeTogetherInitializeV2<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockStakeTogetherABI, 'initializeV2'>['request']['abi'],
        'initializeV2',
        TMode
      > & { functionName?: 'initializeV2' }
    : UseContractWriteConfig<typeof mockStakeTogetherABI, 'initializeV2', TMode> & {
        abi?: never
        functionName?: 'initializeV2'
      } = {} as any
) {
  return useContractWrite<typeof mockStakeTogetherABI, 'initializeV2', TMode>({
    abi: mockStakeTogetherABI,
    functionName: 'initializeV2',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"pause"`.
 */
export function useMockStakeTogetherPause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockStakeTogetherABI, 'pause'>['request']['abi'],
        'pause',
        TMode
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<typeof mockStakeTogetherABI, 'pause', TMode> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any
) {
  return useContractWrite<typeof mockStakeTogetherABI, 'pause', TMode>({
    abi: mockStakeTogetherABI,
    functionName: 'pause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"permit"`.
 */
export function useMockStakeTogetherPermit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockStakeTogetherABI, 'permit'>['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof mockStakeTogetherABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<typeof mockStakeTogetherABI, 'permit', TMode>({
    abi: mockStakeTogetherABI,
    functionName: 'permit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useMockStakeTogetherRenounceRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockStakeTogetherABI, 'renounceRole'>['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof mockStakeTogetherABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<typeof mockStakeTogetherABI, 'renounceRole', TMode>({
    abi: mockStakeTogetherABI,
    functionName: 'renounceRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useMockStakeTogetherRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockStakeTogetherABI, 'revokeRole'>['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof mockStakeTogetherABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<typeof mockStakeTogetherABI, 'revokeRole', TMode>({
    abi: mockStakeTogetherABI,
    functionName: 'revokeRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"transfer"`.
 */
export function useMockStakeTogetherTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockStakeTogetherABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof mockStakeTogetherABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof mockStakeTogetherABI, 'transfer', TMode>({
    abi: mockStakeTogetherABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useMockStakeTogetherTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockStakeTogetherABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof mockStakeTogetherABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof mockStakeTogetherABI, 'transferFrom', TMode>({
    abi: mockStakeTogetherABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"unpause"`.
 */
export function useMockStakeTogetherUnpause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockStakeTogetherABI, 'unpause'>['request']['abi'],
        'unpause',
        TMode
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<typeof mockStakeTogetherABI, 'unpause', TMode> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any
) {
  return useContractWrite<typeof mockStakeTogetherABI, 'unpause', TMode>({
    abi: mockStakeTogetherABI,
    functionName: 'unpause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useMockStakeTogetherUpgradeTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockStakeTogetherABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof mockStakeTogetherABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any
) {
  return useContractWrite<typeof mockStakeTogetherABI, 'upgradeTo', TMode>({
    abi: mockStakeTogetherABI,
    functionName: 'upgradeTo',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useMockStakeTogetherUpgradeToAndCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockStakeTogetherABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof mockStakeTogetherABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any
) {
  return useContractWrite<typeof mockStakeTogetherABI, 'upgradeToAndCall', TMode>({
    abi: mockStakeTogetherABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__.
 */
export function usePrepareMockStakeTogetherWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: mockStakeTogetherABI, ...config } as UsePrepareContractWriteConfig<
    typeof mockStakeTogetherABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareMockStakeTogetherApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockStakeTogetherABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareMockStakeTogetherBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockStakeTogetherABI,
    functionName: 'burn',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareMockStakeTogetherBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'burnFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockStakeTogetherABI,
    functionName: 'burnFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'burnFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareMockStakeTogetherDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockStakeTogetherABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareMockStakeTogetherGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockStakeTogetherABI,
    functionName: 'grantRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareMockStakeTogetherIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockStakeTogetherABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"initializeV2"`.
 */
export function usePrepareMockStakeTogetherInitializeV2(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'initializeV2'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockStakeTogetherABI,
    functionName: 'initializeV2',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'initializeV2'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareMockStakeTogetherPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'pause'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockStakeTogetherABI,
    functionName: 'pause',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareMockStakeTogetherPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockStakeTogetherABI,
    functionName: 'permit',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareMockStakeTogetherRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockStakeTogetherABI,
    functionName: 'renounceRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareMockStakeTogetherRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockStakeTogetherABI,
    functionName: 'revokeRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareMockStakeTogetherTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockStakeTogetherABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareMockStakeTogetherTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockStakeTogetherABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareMockStakeTogetherUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockStakeTogetherABI,
    functionName: 'unpause',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'unpause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareMockStakeTogetherUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockStakeTogetherABI,
    functionName: 'upgradeTo',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareMockStakeTogetherUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockStakeTogetherABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockStakeTogetherABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__.
 */
export function useMockStakeTogetherEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof mockStakeTogetherABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: mockStakeTogetherABI, ...config } as UseContractEventConfig<
    typeof mockStakeTogetherABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"AddPool"`.
 */
export function useMockStakeTogetherAddPoolEvent(
  config: Omit<UseContractEventConfig<typeof mockStakeTogetherABI, 'AddPool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'AddPool',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'AddPool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"AddValidatorOracle"`.
 */
export function useMockStakeTogetherAddValidatorOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'AddValidatorOracle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'AddValidatorOracle',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'AddValidatorOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useMockStakeTogetherAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'AdminChanged',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"Approval"`.
 */
export function useMockStakeTogetherApprovalEvent(
  config: Omit<UseContractEventConfig<typeof mockStakeTogetherABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useMockStakeTogetherBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'BeaconUpgraded',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"BurnShares"`.
 */
export function useMockStakeTogetherBurnSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'BurnShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'BurnShares',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'BurnShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"ClaimRewards"`.
 */
export function useMockStakeTogetherClaimRewardsEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'ClaimRewards'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'ClaimRewards',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'ClaimRewards'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"CreateValidator"`.
 */
export function useMockStakeTogetherCreateValidatorEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'CreateValidator'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'CreateValidator',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'CreateValidator'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"DepositBase"`.
 */
export function useMockStakeTogetherDepositBaseEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'DepositBase'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'DepositBase',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'DepositBase'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"DepositLimitReached"`.
 */
export function useMockStakeTogetherDepositLimitReachedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'DepositLimitReached'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'DepositLimitReached',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'DepositLimitReached'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useMockStakeTogetherEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"Initialized"`.
 */
export function useMockStakeTogetherInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"MintRewards"`.
 */
export function useMockStakeTogetherMintRewardsEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'MintRewards'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'MintRewards',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'MintRewards'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"MintShares"`.
 */
export function useMockStakeTogetherMintSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'MintShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'MintShares',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'MintShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"Paused"`.
 */
export function useMockStakeTogetherPausedEvent(
  config: Omit<UseContractEventConfig<typeof mockStakeTogetherABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'Paused',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'Paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"ReceiveEther"`.
 */
export function useMockStakeTogetherReceiveEtherEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'ReceiveEther'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'ReceiveEther',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'ReceiveEther'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"RefundPool"`.
 */
export function useMockStakeTogetherRefundPoolEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'RefundPool'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'RefundPool',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'RefundPool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"RemovePool"`.
 */
export function useMockStakeTogetherRemovePoolEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'RemovePool'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'RemovePool',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'RemovePool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"RemoveValidator"`.
 */
export function useMockStakeTogetherRemoveValidatorEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'RemoveValidator'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'RemoveValidator',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'RemoveValidator'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"RemoveValidatorOracle"`.
 */
export function useMockStakeTogetherRemoveValidatorOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'RemoveValidatorOracle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'RemoveValidatorOracle',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'RemoveValidatorOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useMockStakeTogetherRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'RoleAdminChanged',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useMockStakeTogetherRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'RoleGranted',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useMockStakeTogetherRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'RoleRevoked',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"SetBeaconBalance"`.
 */
export function useMockStakeTogetherSetBeaconBalanceEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'SetBeaconBalance'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'SetBeaconBalance',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'SetBeaconBalance'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"SetConfig"`.
 */
export function useMockStakeTogetherSetConfigEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'SetConfig'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'SetConfig',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'SetConfig'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"SetFee"`.
 */
export function useMockStakeTogetherSetFeeEvent(
  config: Omit<UseContractEventConfig<typeof mockStakeTogetherABI, 'SetFee'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'SetFee',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'SetFee'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"SetFeeAddress"`.
 */
export function useMockStakeTogetherSetFeeAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'SetFeeAddress'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'SetFeeAddress',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'SetFeeAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"SetRouter"`.
 */
export function useMockStakeTogetherSetRouterEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'SetRouter'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'SetRouter',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'SetRouter'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"SetStakeTogether"`.
 */
export function useMockStakeTogetherSetStakeTogetherEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'SetStakeTogether'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'SetStakeTogether',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'SetStakeTogether'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"SetValidatorSize"`.
 */
export function useMockStakeTogetherSetValidatorSizeEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'SetValidatorSize'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'SetValidatorSize',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'SetValidatorSize'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"SetWithdrawalsCredentials"`.
 */
export function useMockStakeTogetherSetWithdrawalsCredentialsEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'SetWithdrawalsCredentials'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'SetWithdrawalsCredentials',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'SetWithdrawalsCredentials'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"Transfer"`.
 */
export function useMockStakeTogetherTransferEvent(
  config: Omit<UseContractEventConfig<typeof mockStakeTogetherABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"TransferShares"`.
 */
export function useMockStakeTogetherTransferSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'TransferShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'TransferShares',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'TransferShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useMockStakeTogetherUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof mockStakeTogetherABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'Unpaused',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"UpdateDelegations"`.
 */
export function useMockStakeTogetherUpdateDelegationsEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'UpdateDelegations'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'UpdateDelegations',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'UpdateDelegations'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useMockStakeTogetherUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof mockStakeTogetherABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'Upgraded',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"WithdrawBase"`.
 */
export function useMockStakeTogetherWithdrawBaseEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'WithdrawBase'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'WithdrawBase',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'WithdrawBase'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockStakeTogetherABI}__ and `eventName` set to `"WithdrawalsLimitReached"`.
 */
export function useMockStakeTogetherWithdrawalsLimitReachedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockStakeTogetherABI, 'WithdrawalsLimitReached'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockStakeTogetherABI,
    eventName: 'WithdrawalsLimitReached',
    ...config
  } as UseContractEventConfig<typeof mockStakeTogetherABI, 'WithdrawalsLimitReached'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockWithdrawalsABI}__.
 */
export function useMockWithdrawalsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof mockWithdrawalsABI, TFunctionName>
>(
  config: Omit<UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: mockWithdrawalsABI, ...config } as UseContractReadConfig<
    typeof mockWithdrawalsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"ADMIN_ROLE"`.
 */
export function useMockWithdrawalsAdminRole<
  TFunctionName extends 'ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof mockWithdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockWithdrawalsABI,
    functionName: 'ADMIN_ROLE',
    ...config
  } as UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useMockWithdrawalsDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof mockWithdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockWithdrawalsABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config
  } as UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useMockWithdrawalsDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof mockWithdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockWithdrawalsABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config
  } as UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"UPGRADER_ROLE"`.
 */
export function useMockWithdrawalsUpgraderRole<
  TFunctionName extends 'UPGRADER_ROLE',
  TSelectData = ReadContractResult<typeof mockWithdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockWithdrawalsABI,
    functionName: 'UPGRADER_ROLE',
    ...config
  } as UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"allowance"`.
 */
export function useMockWithdrawalsAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof mockWithdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockWithdrawalsABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useMockWithdrawalsBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof mockWithdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockWithdrawalsABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"decimals"`.
 */
export function useMockWithdrawalsDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof mockWithdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockWithdrawalsABI,
    functionName: 'decimals',
    ...config
  } as UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useMockWithdrawalsEip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<typeof mockWithdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockWithdrawalsABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useMockWithdrawalsGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof mockWithdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockWithdrawalsABI,
    functionName: 'getRoleAdmin',
    ...config
  } as UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"hasRole"`.
 */
export function useMockWithdrawalsHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof mockWithdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockWithdrawalsABI,
    functionName: 'hasRole',
    ...config
  } as UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"name"`.
 */
export function useMockWithdrawalsName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof mockWithdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: mockWithdrawalsABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof mockWithdrawalsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"nonces"`.
 */
export function useMockWithdrawalsNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof mockWithdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockWithdrawalsABI,
    functionName: 'nonces',
    ...config
  } as UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"paused"`.
 */
export function useMockWithdrawalsPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof mockWithdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockWithdrawalsABI,
    functionName: 'paused',
    ...config
  } as UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useMockWithdrawalsProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof mockWithdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockWithdrawalsABI,
    functionName: 'proxiableUUID',
    ...config
  } as UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"stakeTogether"`.
 */
export function useMockWithdrawalsStakeTogether<
  TFunctionName extends 'stakeTogether',
  TSelectData = ReadContractResult<typeof mockWithdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockWithdrawalsABI,
    functionName: 'stakeTogether',
    ...config
  } as UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useMockWithdrawalsSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof mockWithdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockWithdrawalsABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"symbol"`.
 */
export function useMockWithdrawalsSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof mockWithdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockWithdrawalsABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useMockWithdrawalsTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof mockWithdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockWithdrawalsABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"version"`.
 */
export function useMockWithdrawalsVersion<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<typeof mockWithdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mockWithdrawalsABI,
    functionName: 'version',
    ...config
  } as UseContractReadConfig<typeof mockWithdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__.
 */
export function useMockWithdrawalsWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockWithdrawalsABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof mockWithdrawalsABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof mockWithdrawalsABI, TFunctionName, TMode>({
    abi: mockWithdrawalsABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"approve"`.
 */
export function useMockWithdrawalsApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockWithdrawalsABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof mockWithdrawalsABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof mockWithdrawalsABI, 'approve', TMode>({
    abi: mockWithdrawalsABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"burn"`.
 */
export function useMockWithdrawalsBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockWithdrawalsABI, 'burn'>['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof mockWithdrawalsABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any
) {
  return useContractWrite<typeof mockWithdrawalsABI, 'burn', TMode>({
    abi: mockWithdrawalsABI,
    functionName: 'burn',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useMockWithdrawalsBurnFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockWithdrawalsABI, 'burnFrom'>['request']['abi'],
        'burnFrom',
        TMode
      > & { functionName?: 'burnFrom' }
    : UseContractWriteConfig<typeof mockWithdrawalsABI, 'burnFrom', TMode> & {
        abi?: never
        functionName?: 'burnFrom'
      } = {} as any
) {
  return useContractWrite<typeof mockWithdrawalsABI, 'burnFrom', TMode>({
    abi: mockWithdrawalsABI,
    functionName: 'burnFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useMockWithdrawalsDecreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockWithdrawalsABI, 'decreaseAllowance'>['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof mockWithdrawalsABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof mockWithdrawalsABI, 'decreaseAllowance', TMode>({
    abi: mockWithdrawalsABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"grantRole"`.
 */
export function useMockWithdrawalsGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockWithdrawalsABI, 'grantRole'>['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof mockWithdrawalsABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<typeof mockWithdrawalsABI, 'grantRole', TMode>({
    abi: mockWithdrawalsABI,
    functionName: 'grantRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useMockWithdrawalsIncreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockWithdrawalsABI, 'increaseAllowance'>['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof mockWithdrawalsABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof mockWithdrawalsABI, 'increaseAllowance', TMode>({
    abi: mockWithdrawalsABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"initializeV2"`.
 */
export function useMockWithdrawalsInitializeV2<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockWithdrawalsABI, 'initializeV2'>['request']['abi'],
        'initializeV2',
        TMode
      > & { functionName?: 'initializeV2' }
    : UseContractWriteConfig<typeof mockWithdrawalsABI, 'initializeV2', TMode> & {
        abi?: never
        functionName?: 'initializeV2'
      } = {} as any
) {
  return useContractWrite<typeof mockWithdrawalsABI, 'initializeV2', TMode>({
    abi: mockWithdrawalsABI,
    functionName: 'initializeV2',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"pause"`.
 */
export function useMockWithdrawalsPause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockWithdrawalsABI, 'pause'>['request']['abi'],
        'pause',
        TMode
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<typeof mockWithdrawalsABI, 'pause', TMode> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any
) {
  return useContractWrite<typeof mockWithdrawalsABI, 'pause', TMode>({
    abi: mockWithdrawalsABI,
    functionName: 'pause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"permit"`.
 */
export function useMockWithdrawalsPermit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockWithdrawalsABI, 'permit'>['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof mockWithdrawalsABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<typeof mockWithdrawalsABI, 'permit', TMode>({
    abi: mockWithdrawalsABI,
    functionName: 'permit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useMockWithdrawalsRenounceRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockWithdrawalsABI, 'renounceRole'>['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof mockWithdrawalsABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<typeof mockWithdrawalsABI, 'renounceRole', TMode>({
    abi: mockWithdrawalsABI,
    functionName: 'renounceRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useMockWithdrawalsRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockWithdrawalsABI, 'revokeRole'>['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof mockWithdrawalsABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<typeof mockWithdrawalsABI, 'revokeRole', TMode>({
    abi: mockWithdrawalsABI,
    functionName: 'revokeRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"transfer"`.
 */
export function useMockWithdrawalsTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockWithdrawalsABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof mockWithdrawalsABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof mockWithdrawalsABI, 'transfer', TMode>({
    abi: mockWithdrawalsABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useMockWithdrawalsTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockWithdrawalsABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof mockWithdrawalsABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof mockWithdrawalsABI, 'transferFrom', TMode>({
    abi: mockWithdrawalsABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"unpause"`.
 */
export function useMockWithdrawalsUnpause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockWithdrawalsABI, 'unpause'>['request']['abi'],
        'unpause',
        TMode
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<typeof mockWithdrawalsABI, 'unpause', TMode> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any
) {
  return useContractWrite<typeof mockWithdrawalsABI, 'unpause', TMode>({
    abi: mockWithdrawalsABI,
    functionName: 'unpause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useMockWithdrawalsUpgradeTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockWithdrawalsABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof mockWithdrawalsABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any
) {
  return useContractWrite<typeof mockWithdrawalsABI, 'upgradeTo', TMode>({
    abi: mockWithdrawalsABI,
    functionName: 'upgradeTo',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useMockWithdrawalsUpgradeToAndCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof mockWithdrawalsABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof mockWithdrawalsABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any
) {
  return useContractWrite<typeof mockWithdrawalsABI, 'upgradeToAndCall', TMode>({
    abi: mockWithdrawalsABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__.
 */
export function usePrepareMockWithdrawalsWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: mockWithdrawalsABI, ...config } as UsePrepareContractWriteConfig<
    typeof mockWithdrawalsABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareMockWithdrawalsApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockWithdrawalsABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareMockWithdrawalsBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockWithdrawalsABI,
    functionName: 'burn',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareMockWithdrawalsBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'burnFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockWithdrawalsABI,
    functionName: 'burnFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'burnFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareMockWithdrawalsDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockWithdrawalsABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareMockWithdrawalsGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockWithdrawalsABI,
    functionName: 'grantRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareMockWithdrawalsIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockWithdrawalsABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"initializeV2"`.
 */
export function usePrepareMockWithdrawalsInitializeV2(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'initializeV2'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockWithdrawalsABI,
    functionName: 'initializeV2',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'initializeV2'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareMockWithdrawalsPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'pause'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockWithdrawalsABI,
    functionName: 'pause',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareMockWithdrawalsPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockWithdrawalsABI,
    functionName: 'permit',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareMockWithdrawalsRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockWithdrawalsABI,
    functionName: 'renounceRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareMockWithdrawalsRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockWithdrawalsABI,
    functionName: 'revokeRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareMockWithdrawalsTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockWithdrawalsABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareMockWithdrawalsTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockWithdrawalsABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareMockWithdrawalsUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockWithdrawalsABI,
    functionName: 'unpause',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'unpause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareMockWithdrawalsUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockWithdrawalsABI,
    functionName: 'upgradeTo',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareMockWithdrawalsUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mockWithdrawalsABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as UsePrepareContractWriteConfig<typeof mockWithdrawalsABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockWithdrawalsABI}__.
 */
export function useMockWithdrawalsEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof mockWithdrawalsABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: mockWithdrawalsABI, ...config } as UseContractEventConfig<
    typeof mockWithdrawalsABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useMockWithdrawalsAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockWithdrawalsABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockWithdrawalsABI,
    eventName: 'AdminChanged',
    ...config
  } as UseContractEventConfig<typeof mockWithdrawalsABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `eventName` set to `"Approval"`.
 */
export function useMockWithdrawalsApprovalEvent(
  config: Omit<UseContractEventConfig<typeof mockWithdrawalsABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: mockWithdrawalsABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof mockWithdrawalsABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useMockWithdrawalsBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockWithdrawalsABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockWithdrawalsABI,
    eventName: 'BeaconUpgraded',
    ...config
  } as UseContractEventConfig<typeof mockWithdrawalsABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useMockWithdrawalsEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockWithdrawalsABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockWithdrawalsABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof mockWithdrawalsABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `eventName` set to `"Initialized"`.
 */
export function useMockWithdrawalsInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockWithdrawalsABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockWithdrawalsABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof mockWithdrawalsABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `eventName` set to `"Paused"`.
 */
export function useMockWithdrawalsPausedEvent(
  config: Omit<UseContractEventConfig<typeof mockWithdrawalsABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: mockWithdrawalsABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof mockWithdrawalsABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `eventName` set to `"ReceiveEther"`.
 */
export function useMockWithdrawalsReceiveEtherEvent(
  config: Omit<
    UseContractEventConfig<typeof mockWithdrawalsABI, 'ReceiveEther'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockWithdrawalsABI,
    eventName: 'ReceiveEther',
    ...config
  } as UseContractEventConfig<typeof mockWithdrawalsABI, 'ReceiveEther'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useMockWithdrawalsRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockWithdrawalsABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockWithdrawalsABI,
    eventName: 'RoleAdminChanged',
    ...config
  } as UseContractEventConfig<typeof mockWithdrawalsABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useMockWithdrawalsRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockWithdrawalsABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockWithdrawalsABI,
    eventName: 'RoleGranted',
    ...config
  } as UseContractEventConfig<typeof mockWithdrawalsABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useMockWithdrawalsRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockWithdrawalsABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockWithdrawalsABI,
    eventName: 'RoleRevoked',
    ...config
  } as UseContractEventConfig<typeof mockWithdrawalsABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `eventName` set to `"SetStakeTogether"`.
 */
export function useMockWithdrawalsSetStakeTogetherEvent(
  config: Omit<
    UseContractEventConfig<typeof mockWithdrawalsABI, 'SetStakeTogether'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mockWithdrawalsABI,
    eventName: 'SetStakeTogether',
    ...config
  } as UseContractEventConfig<typeof mockWithdrawalsABI, 'SetStakeTogether'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `eventName` set to `"Transfer"`.
 */
export function useMockWithdrawalsTransferEvent(
  config: Omit<UseContractEventConfig<typeof mockWithdrawalsABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: mockWithdrawalsABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof mockWithdrawalsABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useMockWithdrawalsUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof mockWithdrawalsABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: mockWithdrawalsABI,
    eventName: 'Unpaused',
    ...config
  } as UseContractEventConfig<typeof mockWithdrawalsABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useMockWithdrawalsUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof mockWithdrawalsABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: mockWithdrawalsABI,
    eventName: 'Upgraded',
    ...config
  } as UseContractEventConfig<typeof mockWithdrawalsABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockWithdrawalsABI}__ and `eventName` set to `"Withdraw"`.
 */
export function useMockWithdrawalsWithdrawEvent(
  config: Omit<UseContractEventConfig<typeof mockWithdrawalsABI, 'Withdraw'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: mockWithdrawalsABI,
    eventName: 'Withdraw',
    ...config
  } as UseContractEventConfig<typeof mockWithdrawalsABI, 'Withdraw'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAirdropABI}__.
 */
export function useIAirdropEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iAirdropABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: iAirdropABI, ...config } as UseContractEventConfig<
    typeof iAirdropABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAirdropABI}__ and `eventName` set to `"AddAirdropMerkleRoot"`.
 */
export function useIAirdropAddAirdropMerkleRootEvent(
  config: Omit<
    UseContractEventConfig<typeof iAirdropABI, 'AddAirdropMerkleRoot'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iAirdropABI,
    eventName: 'AddAirdropMerkleRoot',
    ...config
  } as UseContractEventConfig<typeof iAirdropABI, 'AddAirdropMerkleRoot'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAirdropABI}__ and `eventName` set to `"AddMerkleRoots"`.
 */
export function useIAirdropAddMerkleRootsEvent(
  config: Omit<UseContractEventConfig<typeof iAirdropABI, 'AddMerkleRoots'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iAirdropABI,
    eventName: 'AddMerkleRoots',
    ...config
  } as UseContractEventConfig<typeof iAirdropABI, 'AddMerkleRoots'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAirdropABI}__ and `eventName` set to `"ClaimAirdrop"`.
 */
export function useIAirdropClaimAirdropEvent(
  config: Omit<UseContractEventConfig<typeof iAirdropABI, 'ClaimAirdrop'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iAirdropABI, eventName: 'ClaimAirdrop', ...config } as UseContractEventConfig<
    typeof iAirdropABI,
    'ClaimAirdrop'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAirdropABI}__ and `eventName` set to `"ClaimAirdropBatch"`.
 */
export function useIAirdropClaimAirdropBatchEvent(
  config: Omit<UseContractEventConfig<typeof iAirdropABI, 'ClaimAirdropBatch'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iAirdropABI,
    eventName: 'ClaimAirdropBatch',
    ...config
  } as UseContractEventConfig<typeof iAirdropABI, 'ClaimAirdropBatch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAirdropABI}__ and `eventName` set to `"ClaimRewards"`.
 */
export function useIAirdropClaimRewardsEvent(
  config: Omit<UseContractEventConfig<typeof iAirdropABI, 'ClaimRewards'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iAirdropABI, eventName: 'ClaimRewards', ...config } as UseContractEventConfig<
    typeof iAirdropABI,
    'ClaimRewards'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAirdropABI}__ and `eventName` set to `"ClaimRewardsBatch"`.
 */
export function useIAirdropClaimRewardsBatchEvent(
  config: Omit<UseContractEventConfig<typeof iAirdropABI, 'ClaimRewardsBatch'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iAirdropABI,
    eventName: 'ClaimRewardsBatch',
    ...config
  } as UseContractEventConfig<typeof iAirdropABI, 'ClaimRewardsBatch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAirdropABI}__ and `eventName` set to `"ReceiveEther"`.
 */
export function useIAirdropReceiveEtherEvent(
  config: Omit<UseContractEventConfig<typeof iAirdropABI, 'ReceiveEther'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iAirdropABI, eventName: 'ReceiveEther', ...config } as UseContractEventConfig<
    typeof iAirdropABI,
    'ReceiveEther'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAirdropABI}__ and `eventName` set to `"SetMaxBatchSize"`.
 */
export function useIAirdropSetMaxBatchSizeEvent(
  config: Omit<UseContractEventConfig<typeof iAirdropABI, 'SetMaxBatchSize'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iAirdropABI,
    eventName: 'SetMaxBatchSize',
    ...config
  } as UseContractEventConfig<typeof iAirdropABI, 'SetMaxBatchSize'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAirdropABI}__ and `eventName` set to `"SetRouter"`.
 */
export function useIAirdropSetRouterEvent(
  config: Omit<UseContractEventConfig<typeof iAirdropABI, 'SetRouter'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iAirdropABI, eventName: 'SetRouter', ...config } as UseContractEventConfig<
    typeof iAirdropABI,
    'SetRouter'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAirdropABI}__ and `eventName` set to `"SetStakeTogether"`.
 */
export function useIAirdropSetStakeTogetherEvent(
  config: Omit<UseContractEventConfig<typeof iAirdropABI, 'SetStakeTogether'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iAirdropABI,
    eventName: 'SetStakeTogether',
    ...config
  } as UseContractEventConfig<typeof iAirdropABI, 'SetStakeTogether'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iDepositContractABI}__.
 */
export function useIDepositContractRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iDepositContractABI, TFunctionName>
>(
  config: Omit<UseContractReadConfig<typeof iDepositContractABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: iDepositContractABI, ...config } as UseContractReadConfig<
    typeof iDepositContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iDepositContractABI}__ and `functionName` set to `"get_deposit_count"`.
 */
export function useIDepositContractGetDepositCount<
  TFunctionName extends 'get_deposit_count',
  TSelectData = ReadContractResult<typeof iDepositContractABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof iDepositContractABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iDepositContractABI,
    functionName: 'get_deposit_count',
    ...config
  } as UseContractReadConfig<typeof iDepositContractABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iDepositContractABI}__ and `functionName` set to `"get_deposit_root"`.
 */
export function useIDepositContractGetDepositRoot<
  TFunctionName extends 'get_deposit_root',
  TSelectData = ReadContractResult<typeof iDepositContractABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof iDepositContractABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iDepositContractABI,
    functionName: 'get_deposit_root',
    ...config
  } as UseContractReadConfig<typeof iDepositContractABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iDepositContractABI}__.
 */
export function useIDepositContractWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iDepositContractABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iDepositContractABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof iDepositContractABI, TFunctionName, TMode>({
    abi: iDepositContractABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iDepositContractABI}__ and `functionName` set to `"deposit"`.
 */
export function useIDepositContractDeposit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iDepositContractABI, 'deposit'>['request']['abi'],
        'deposit',
        TMode
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<typeof iDepositContractABI, 'deposit', TMode> & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any
) {
  return useContractWrite<typeof iDepositContractABI, 'deposit', TMode>({
    abi: iDepositContractABI,
    functionName: 'deposit',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iDepositContractABI}__.
 */
export function usePrepareIDepositContractWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof iDepositContractABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: iDepositContractABI, ...config } as UsePrepareContractWriteConfig<
    typeof iDepositContractABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iDepositContractABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareIDepositContractDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iDepositContractABI, 'deposit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iDepositContractABI,
    functionName: 'deposit',
    ...config
  } as UsePrepareContractWriteConfig<typeof iDepositContractABI, 'deposit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iDepositContractABI}__.
 */
export function useIDepositContractEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iDepositContractABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: iDepositContractABI, ...config } as UseContractEventConfig<
    typeof iDepositContractABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iDepositContractABI}__ and `eventName` set to `"DepositEvent"`.
 */
export function useIDepositContractDepositEventEvent(
  config: Omit<
    UseContractEventConfig<typeof iDepositContractABI, 'DepositEvent'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iDepositContractABI,
    eventName: 'DepositEvent',
    ...config
  } as UseContractEventConfig<typeof iDepositContractABI, 'DepositEvent'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRouterABI}__.
 */
export function useIRouterEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iRouterABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: iRouterABI, ...config } as UseContractEventConfig<
    typeof iRouterABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRouterABI}__ and `eventName` set to `"AddReportOracle"`.
 */
export function useIRouterAddReportOracleEvent(
  config: Omit<UseContractEventConfig<typeof iRouterABI, 'AddReportOracle'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iRouterABI,
    eventName: 'AddReportOracle',
    ...config
  } as UseContractEventConfig<typeof iRouterABI, 'AddReportOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRouterABI}__ and `eventName` set to `"BlacklistReportOracle"`.
 */
export function useIRouterBlacklistReportOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof iRouterABI, 'BlacklistReportOracle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iRouterABI,
    eventName: 'BlacklistReportOracle',
    ...config
  } as UseContractEventConfig<typeof iRouterABI, 'BlacklistReportOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRouterABI}__ and `eventName` set to `"BlacklistReportOracleManually"`.
 */
export function useIRouterBlacklistReportOracleManuallyEvent(
  config: Omit<
    UseContractEventConfig<typeof iRouterABI, 'BlacklistReportOracleManually'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iRouterABI,
    eventName: 'BlacklistReportOracleManually',
    ...config
  } as UseContractEventConfig<typeof iRouterABI, 'BlacklistReportOracleManually'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRouterABI}__ and `eventName` set to `"ConsensusApprove"`.
 */
export function useIRouterConsensusApproveEvent(
  config: Omit<UseContractEventConfig<typeof iRouterABI, 'ConsensusApprove'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iRouterABI,
    eventName: 'ConsensusApprove',
    ...config
  } as UseContractEventConfig<typeof iRouterABI, 'ConsensusApprove'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRouterABI}__ and `eventName` set to `"ConsensusNotReached"`.
 */
export function useIRouterConsensusNotReachedEvent(
  config: Omit<
    UseContractEventConfig<typeof iRouterABI, 'ConsensusNotReached'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iRouterABI,
    eventName: 'ConsensusNotReached',
    ...config
  } as UseContractEventConfig<typeof iRouterABI, 'ConsensusNotReached'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRouterABI}__ and `eventName` set to `"ExecuteReport"`.
 */
export function useIRouterExecuteReportEvent(
  config: Omit<UseContractEventConfig<typeof iRouterABI, 'ExecuteReport'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iRouterABI, eventName: 'ExecuteReport', ...config } as UseContractEventConfig<
    typeof iRouterABI,
    'ExecuteReport'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRouterABI}__ and `eventName` set to `"InvalidateConsensus"`.
 */
export function useIRouterInvalidateConsensusEvent(
  config: Omit<
    UseContractEventConfig<typeof iRouterABI, 'InvalidateConsensus'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iRouterABI,
    eventName: 'InvalidateConsensus',
    ...config
  } as UseContractEventConfig<typeof iRouterABI, 'InvalidateConsensus'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRouterABI}__ and `eventName` set to `"PenalizeReportOracle"`.
 */
export function useIRouterPenalizeReportOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof iRouterABI, 'PenalizeReportOracle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iRouterABI,
    eventName: 'PenalizeReportOracle',
    ...config
  } as UseContractEventConfig<typeof iRouterABI, 'PenalizeReportOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRouterABI}__ and `eventName` set to `"ReceiveEther"`.
 */
export function useIRouterReceiveEtherEvent(
  config: Omit<UseContractEventConfig<typeof iRouterABI, 'ReceiveEther'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iRouterABI, eventName: 'ReceiveEther', ...config } as UseContractEventConfig<
    typeof iRouterABI,
    'ReceiveEther'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRouterABI}__ and `eventName` set to `"RemoveReportOracle"`.
 */
export function useIRouterRemoveReportOracleEvent(
  config: Omit<UseContractEventConfig<typeof iRouterABI, 'RemoveReportOracle'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iRouterABI,
    eventName: 'RemoveReportOracle',
    ...config
  } as UseContractEventConfig<typeof iRouterABI, 'RemoveReportOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRouterABI}__ and `eventName` set to `"RequestValidatorsExit"`.
 */
export function useIRouterRequestValidatorsExitEvent(
  config: Omit<
    UseContractEventConfig<typeof iRouterABI, 'RequestValidatorsExit'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iRouterABI,
    eventName: 'RequestValidatorsExit',
    ...config
  } as UseContractEventConfig<typeof iRouterABI, 'RequestValidatorsExit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRouterABI}__ and `eventName` set to `"RewardReportOracle"`.
 */
export function useIRouterRewardReportOracleEvent(
  config: Omit<UseContractEventConfig<typeof iRouterABI, 'RewardReportOracle'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iRouterABI,
    eventName: 'RewardReportOracle',
    ...config
  } as UseContractEventConfig<typeof iRouterABI, 'RewardReportOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRouterABI}__ and `eventName` set to `"SetConfig"`.
 */
export function useIRouterSetConfigEvent(
  config: Omit<UseContractEventConfig<typeof iRouterABI, 'SetConfig'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iRouterABI, eventName: 'SetConfig', ...config } as UseContractEventConfig<
    typeof iRouterABI,
    'SetConfig'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRouterABI}__ and `eventName` set to `"SetLastConsensusEpoch"`.
 */
export function useIRouterSetLastConsensusEpochEvent(
  config: Omit<
    UseContractEventConfig<typeof iRouterABI, 'SetLastConsensusEpoch'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iRouterABI,
    eventName: 'SetLastConsensusEpoch',
    ...config
  } as UseContractEventConfig<typeof iRouterABI, 'SetLastConsensusEpoch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRouterABI}__ and `eventName` set to `"SetStakeTogether"`.
 */
export function useIRouterSetStakeTogetherEvent(
  config: Omit<UseContractEventConfig<typeof iRouterABI, 'SetStakeTogether'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iRouterABI,
    eventName: 'SetStakeTogether',
    ...config
  } as UseContractEventConfig<typeof iRouterABI, 'SetStakeTogether'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRouterABI}__ and `eventName` set to `"SkipNextBlockInterval"`.
 */
export function useIRouterSkipNextBlockIntervalEvent(
  config: Omit<
    UseContractEventConfig<typeof iRouterABI, 'SkipNextBlockInterval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iRouterABI,
    eventName: 'SkipNextBlockInterval',
    ...config
  } as UseContractEventConfig<typeof iRouterABI, 'SkipNextBlockInterval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRouterABI}__ and `eventName` set to `"SubmitReport"`.
 */
export function useIRouterSubmitReportEvent(
  config: Omit<UseContractEventConfig<typeof iRouterABI, 'SubmitReport'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iRouterABI, eventName: 'SubmitReport', ...config } as UseContractEventConfig<
    typeof iRouterABI,
    'SubmitReport'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRouterABI}__ and `eventName` set to `"UnBlacklistReportOracle"`.
 */
export function useIRouterUnBlacklistReportOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof iRouterABI, 'UnBlacklistReportOracle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iRouterABI,
    eventName: 'UnBlacklistReportOracle',
    ...config
  } as UseContractEventConfig<typeof iRouterABI, 'UnBlacklistReportOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRouterABI}__ and `eventName` set to `"UpdateReportOracleQuorum"`.
 */
export function useIRouterUpdateReportOracleQuorumEvent(
  config: Omit<
    UseContractEventConfig<typeof iRouterABI, 'UpdateReportOracleQuorum'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iRouterABI,
    eventName: 'UpdateReportOracleQuorum',
    ...config
  } as UseContractEventConfig<typeof iRouterABI, 'UpdateReportOracleQuorum'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRouterABI}__ and `eventName` set to `"ValidatorsToExit"`.
 */
export function useIRouterValidatorsToExitEvent(
  config: Omit<UseContractEventConfig<typeof iRouterABI, 'ValidatorsToExit'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iRouterABI,
    eventName: 'ValidatorsToExit',
    ...config
  } as UseContractEventConfig<typeof iRouterABI, 'ValidatorsToExit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__.
 */
export function useIStakeTogetherEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iStakeTogetherABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: iStakeTogetherABI, ...config } as UseContractEventConfig<
    typeof iStakeTogetherABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"AddPool"`.
 */
export function useIStakeTogetherAddPoolEvent(
  config: Omit<UseContractEventConfig<typeof iStakeTogetherABI, 'AddPool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iStakeTogetherABI, eventName: 'AddPool', ...config } as UseContractEventConfig<
    typeof iStakeTogetherABI,
    'AddPool'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"AddValidatorOracle"`.
 */
export function useIStakeTogetherAddValidatorOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'AddValidatorOracle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'AddValidatorOracle',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'AddValidatorOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"BurnShares"`.
 */
export function useIStakeTogetherBurnSharesEvent(
  config: Omit<UseContractEventConfig<typeof iStakeTogetherABI, 'BurnShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'BurnShares',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'BurnShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"ClaimRewards"`.
 */
export function useIStakeTogetherClaimRewardsEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'ClaimRewards'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'ClaimRewards',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'ClaimRewards'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"CreateValidator"`.
 */
export function useIStakeTogetherCreateValidatorEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'CreateValidator'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'CreateValidator',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'CreateValidator'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"DepositBase"`.
 */
export function useIStakeTogetherDepositBaseEvent(
  config: Omit<UseContractEventConfig<typeof iStakeTogetherABI, 'DepositBase'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'DepositBase',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'DepositBase'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"DepositLimitReached"`.
 */
export function useIStakeTogetherDepositLimitReachedEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'DepositLimitReached'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'DepositLimitReached',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'DepositLimitReached'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"MintRewards"`.
 */
export function useIStakeTogetherMintRewardsEvent(
  config: Omit<UseContractEventConfig<typeof iStakeTogetherABI, 'MintRewards'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'MintRewards',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'MintRewards'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"MintShares"`.
 */
export function useIStakeTogetherMintSharesEvent(
  config: Omit<UseContractEventConfig<typeof iStakeTogetherABI, 'MintShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'MintShares',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'MintShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"ReceiveEther"`.
 */
export function useIStakeTogetherReceiveEtherEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'ReceiveEther'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'ReceiveEther',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'ReceiveEther'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"RefundPool"`.
 */
export function useIStakeTogetherRefundPoolEvent(
  config: Omit<UseContractEventConfig<typeof iStakeTogetherABI, 'RefundPool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'RefundPool',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'RefundPool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"RemovePool"`.
 */
export function useIStakeTogetherRemovePoolEvent(
  config: Omit<UseContractEventConfig<typeof iStakeTogetherABI, 'RemovePool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'RemovePool',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'RemovePool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"RemoveValidator"`.
 */
export function useIStakeTogetherRemoveValidatorEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'RemoveValidator'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'RemoveValidator',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'RemoveValidator'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"RemoveValidatorOracle"`.
 */
export function useIStakeTogetherRemoveValidatorOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'RemoveValidatorOracle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'RemoveValidatorOracle',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'RemoveValidatorOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"SetBeaconBalance"`.
 */
export function useIStakeTogetherSetBeaconBalanceEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'SetBeaconBalance'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'SetBeaconBalance',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'SetBeaconBalance'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"SetConfig"`.
 */
export function useIStakeTogetherSetConfigEvent(
  config: Omit<UseContractEventConfig<typeof iStakeTogetherABI, 'SetConfig'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'SetConfig',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'SetConfig'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"SetFee"`.
 */
export function useIStakeTogetherSetFeeEvent(
  config: Omit<UseContractEventConfig<typeof iStakeTogetherABI, 'SetFee'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iStakeTogetherABI, eventName: 'SetFee', ...config } as UseContractEventConfig<
    typeof iStakeTogetherABI,
    'SetFee'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"SetFeeAddress"`.
 */
export function useIStakeTogetherSetFeeAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'SetFeeAddress'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'SetFeeAddress',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'SetFeeAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"SetRouter"`.
 */
export function useIStakeTogetherSetRouterEvent(
  config: Omit<UseContractEventConfig<typeof iStakeTogetherABI, 'SetRouter'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'SetRouter',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'SetRouter'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"SetStakeTogether"`.
 */
export function useIStakeTogetherSetStakeTogetherEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'SetStakeTogether'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'SetStakeTogether',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'SetStakeTogether'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"SetValidatorSize"`.
 */
export function useIStakeTogetherSetValidatorSizeEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'SetValidatorSize'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'SetValidatorSize',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'SetValidatorSize'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"SetWithdrawalsCredentials"`.
 */
export function useIStakeTogetherSetWithdrawalsCredentialsEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'SetWithdrawalsCredentials'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'SetWithdrawalsCredentials',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'SetWithdrawalsCredentials'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"TransferShares"`.
 */
export function useIStakeTogetherTransferSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'TransferShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'TransferShares',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'TransferShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"UpdateDelegations"`.
 */
export function useIStakeTogetherUpdateDelegationsEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'UpdateDelegations'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'UpdateDelegations',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'UpdateDelegations'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"WithdrawBase"`.
 */
export function useIStakeTogetherWithdrawBaseEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'WithdrawBase'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'WithdrawBase',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'WithdrawBase'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"WithdrawalsLimitReached"`.
 */
export function useIStakeTogetherWithdrawalsLimitReachedEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'WithdrawalsLimitReached'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'WithdrawalsLimitReached',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'WithdrawalsLimitReached'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iWithdrawalsABI}__.
 */
export function useIWithdrawalsEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iWithdrawalsABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: iWithdrawalsABI, ...config } as UseContractEventConfig<
    typeof iWithdrawalsABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iWithdrawalsABI}__ and `eventName` set to `"ReceiveEther"`.
 */
export function useIWithdrawalsReceiveEtherEvent(
  config: Omit<UseContractEventConfig<typeof iWithdrawalsABI, 'ReceiveEther'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iWithdrawalsABI,
    eventName: 'ReceiveEther',
    ...config
  } as UseContractEventConfig<typeof iWithdrawalsABI, 'ReceiveEther'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iWithdrawalsABI}__ and `eventName` set to `"SetStakeTogether"`.
 */
export function useIWithdrawalsSetStakeTogetherEvent(
  config: Omit<
    UseContractEventConfig<typeof iWithdrawalsABI, 'SetStakeTogether'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iWithdrawalsABI,
    eventName: 'SetStakeTogether',
    ...config
  } as UseContractEventConfig<typeof iWithdrawalsABI, 'SetStakeTogether'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iWithdrawalsABI}__ and `eventName` set to `"Withdraw"`.
 */
export function useIWithdrawalsWithdrawEvent(
  config: Omit<UseContractEventConfig<typeof iWithdrawalsABI, 'Withdraw'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iWithdrawalsABI, eventName: 'Withdraw', ...config } as UseContractEventConfig<
    typeof iWithdrawalsABI,
    'Withdraw'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlUpgradeableABI}__.
 */
export function useAccessControlUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof accessControlUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlUpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: accessControlUpgradeableABI, ...config } as UseContractReadConfig<
    typeof accessControlUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useAccessControlUpgradeableDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof accessControlUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accessControlUpgradeableABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config
  } as UseContractReadConfig<typeof accessControlUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useAccessControlUpgradeableGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof accessControlUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accessControlUpgradeableABI,
    functionName: 'getRoleAdmin',
    ...config
  } as UseContractReadConfig<typeof accessControlUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"hasRole"`.
 */
export function useAccessControlUpgradeableHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof accessControlUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accessControlUpgradeableABI,
    functionName: 'hasRole',
    ...config
  } as UseContractReadConfig<typeof accessControlUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useAccessControlUpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof accessControlUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accessControlUpgradeableABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<typeof accessControlUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__.
 */
export function useAccessControlUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accessControlUpgradeableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof accessControlUpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof accessControlUpgradeableABI, TFunctionName, TMode>({
    abi: accessControlUpgradeableABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"grantRole"`.
 */
export function useAccessControlUpgradeableGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accessControlUpgradeableABI, 'grantRole'>['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof accessControlUpgradeableABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<typeof accessControlUpgradeableABI, 'grantRole', TMode>({
    abi: accessControlUpgradeableABI,
    functionName: 'grantRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useAccessControlUpgradeableRenounceRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accessControlUpgradeableABI, 'renounceRole'>['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof accessControlUpgradeableABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<typeof accessControlUpgradeableABI, 'renounceRole', TMode>({
    abi: accessControlUpgradeableABI,
    functionName: 'renounceRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useAccessControlUpgradeableRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accessControlUpgradeableABI, 'revokeRole'>['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof accessControlUpgradeableABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<typeof accessControlUpgradeableABI, 'revokeRole', TMode>({
    abi: accessControlUpgradeableABI,
    functionName: 'revokeRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__.
 */
export function usePrepareAccessControlUpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accessControlUpgradeableABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof accessControlUpgradeableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareAccessControlUpgradeableGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlUpgradeableABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accessControlUpgradeableABI,
    functionName: 'grantRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof accessControlUpgradeableABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareAccessControlUpgradeableRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlUpgradeableABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accessControlUpgradeableABI,
    functionName: 'renounceRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof accessControlUpgradeableABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareAccessControlUpgradeableRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlUpgradeableABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accessControlUpgradeableABI,
    functionName: 'revokeRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof accessControlUpgradeableABI, 'revokeRole'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlUpgradeableABI}__.
 */
export function useAccessControlUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof accessControlUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: accessControlUpgradeableABI, ...config } as UseContractEventConfig<
    typeof accessControlUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useAccessControlUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accessControlUpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof accessControlUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useAccessControlUpgradeableRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlUpgradeableABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accessControlUpgradeableABI,
    eventName: 'RoleAdminChanged',
    ...config
  } as UseContractEventConfig<typeof accessControlUpgradeableABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useAccessControlUpgradeableRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlUpgradeableABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accessControlUpgradeableABI,
    eventName: 'RoleGranted',
    ...config
  } as UseContractEventConfig<typeof accessControlUpgradeableABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useAccessControlUpgradeableRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlUpgradeableABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accessControlUpgradeableABI,
    eventName: 'RoleRevoked',
    ...config
  } as UseContractEventConfig<typeof accessControlUpgradeableABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__.
 */
export function useIAccessControlUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iAccessControlUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlUpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: iAccessControlUpgradeableABI, ...config } as UseContractReadConfig<
    typeof iAccessControlUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useIAccessControlUpgradeableGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof iAccessControlUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iAccessControlUpgradeableABI,
    functionName: 'getRoleAdmin',
    ...config
  } as UseContractReadConfig<typeof iAccessControlUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"hasRole"`.
 */
export function useIAccessControlUpgradeableHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof iAccessControlUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iAccessControlUpgradeableABI,
    functionName: 'hasRole',
    ...config
  } as UseContractReadConfig<typeof iAccessControlUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__.
 */
export function useIAccessControlUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iAccessControlUpgradeableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iAccessControlUpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof iAccessControlUpgradeableABI, TFunctionName, TMode>({
    abi: iAccessControlUpgradeableABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"grantRole"`.
 */
export function useIAccessControlUpgradeableGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iAccessControlUpgradeableABI, 'grantRole'>['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof iAccessControlUpgradeableABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<typeof iAccessControlUpgradeableABI, 'grantRole', TMode>({
    abi: iAccessControlUpgradeableABI,
    functionName: 'grantRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useIAccessControlUpgradeableRenounceRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iAccessControlUpgradeableABI, 'renounceRole'>['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof iAccessControlUpgradeableABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<typeof iAccessControlUpgradeableABI, 'renounceRole', TMode>({
    abi: iAccessControlUpgradeableABI,
    functionName: 'renounceRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useIAccessControlUpgradeableRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iAccessControlUpgradeableABI, 'revokeRole'>['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof iAccessControlUpgradeableABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<typeof iAccessControlUpgradeableABI, 'revokeRole', TMode>({
    abi: iAccessControlUpgradeableABI,
    functionName: 'revokeRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__.
 */
export function usePrepareIAccessControlUpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iAccessControlUpgradeableABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof iAccessControlUpgradeableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareIAccessControlUpgradeableGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlUpgradeableABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iAccessControlUpgradeableABI,
    functionName: 'grantRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof iAccessControlUpgradeableABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareIAccessControlUpgradeableRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlUpgradeableABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iAccessControlUpgradeableABI,
    functionName: 'renounceRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof iAccessControlUpgradeableABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareIAccessControlUpgradeableRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlUpgradeableABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iAccessControlUpgradeableABI,
    functionName: 'revokeRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof iAccessControlUpgradeableABI, 'revokeRole'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__.
 */
export function useIAccessControlUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iAccessControlUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: iAccessControlUpgradeableABI, ...config } as UseContractEventConfig<
    typeof iAccessControlUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useIAccessControlUpgradeableRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlUpgradeableABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iAccessControlUpgradeableABI,
    eventName: 'RoleAdminChanged',
    ...config
  } as UseContractEventConfig<typeof iAccessControlUpgradeableABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useIAccessControlUpgradeableRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlUpgradeableABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iAccessControlUpgradeableABI,
    eventName: 'RoleGranted',
    ...config
  } as UseContractEventConfig<typeof iAccessControlUpgradeableABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useIAccessControlUpgradeableRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlUpgradeableABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iAccessControlUpgradeableABI,
    eventName: 'RoleRevoked',
    ...config
  } as UseContractEventConfig<typeof iAccessControlUpgradeableABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableUpgradeableABI}__.
 */
export function useIerc1822ProxiableUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1822ProxiableUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1822ProxiableUpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: ierc1822ProxiableUpgradeableABI, ...config } as UseContractReadConfig<
    typeof ierc1822ProxiableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableUpgradeableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useIerc1822ProxiableUpgradeableProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof ierc1822ProxiableUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1822ProxiableUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc1822ProxiableUpgradeableABI,
    functionName: 'proxiableUUID',
    ...config
  } as UseContractReadConfig<typeof ierc1822ProxiableUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967UpgradeableABI}__.
 */
export function useIerc1967UpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc1967UpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ierc1967UpgradeableABI, ...config } as UseContractEventConfig<
    typeof ierc1967UpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967UpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useIerc1967UpgradeableAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1967UpgradeableABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc1967UpgradeableABI,
    eventName: 'AdminChanged',
    ...config
  } as UseContractEventConfig<typeof ierc1967UpgradeableABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967UpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useIerc1967UpgradeableBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1967UpgradeableABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc1967UpgradeableABI,
    eventName: 'BeaconUpgraded',
    ...config
  } as UseContractEventConfig<typeof ierc1967UpgradeableABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967UpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useIerc1967UpgradeableUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1967UpgradeableABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc1967UpgradeableABI,
    eventName: 'Upgraded',
    ...config
  } as UseContractEventConfig<typeof ierc1967UpgradeableABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5267UpgradeableABI}__.
 */
export function useIerc5267UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc5267UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc5267UpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: ierc5267UpgradeableABI, ...config } as UseContractReadConfig<
    typeof ierc5267UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5267UpgradeableABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useIerc5267UpgradeableEip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<typeof ierc5267UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc5267UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc5267UpgradeableABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof ierc5267UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc5267UpgradeableABI}__.
 */
export function useIerc5267UpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc5267UpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ierc5267UpgradeableABI, ...config } as UseContractEventConfig<
    typeof ierc5267UpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc5267UpgradeableABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useIerc5267UpgradeableEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc5267UpgradeableABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc5267UpgradeableABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof ierc5267UpgradeableABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableUpgradeableABI}__.
 */
export function usePausableUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pausableUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pausableUpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: pausableUpgradeableABI, ...config } as UseContractReadConfig<
    typeof pausableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableUpgradeableABI}__ and `functionName` set to `"paused"`.
 */
export function usePausableUpgradeablePaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof pausableUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pausableUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pausableUpgradeableABI,
    functionName: 'paused',
    ...config
  } as UseContractReadConfig<typeof pausableUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableUpgradeableABI}__.
 */
export function usePausableUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof pausableUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: pausableUpgradeableABI, ...config } as UseContractEventConfig<
    typeof pausableUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function usePausableUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof pausableUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: pausableUpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof pausableUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableUpgradeableABI}__ and `eventName` set to `"Paused"`.
 */
export function usePausableUpgradeablePausedEvent(
  config: Omit<UseContractEventConfig<typeof pausableUpgradeableABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: pausableUpgradeableABI,
    eventName: 'Paused',
    ...config
  } as UseContractEventConfig<typeof pausableUpgradeableABI, 'Paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableUpgradeableABI}__ and `eventName` set to `"Unpaused"`.
 */
export function usePausableUpgradeableUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof pausableUpgradeableABI, 'Unpaused'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: pausableUpgradeableABI,
    eventName: 'Unpaused',
    ...config
  } as UseContractEventConfig<typeof pausableUpgradeableABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reentrancyGuardUpgradeableABI}__.
 */
export function useReentrancyGuardUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof reentrancyGuardUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: reentrancyGuardUpgradeableABI, ...config } as UseContractEventConfig<
    typeof reentrancyGuardUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reentrancyGuardUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useReentrancyGuardUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof reentrancyGuardUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reentrancyGuardUpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof reentrancyGuardUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link contextUpgradeableABI}__.
 */
export function useContextUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof contextUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: contextUpgradeableABI, ...config } as UseContractEventConfig<
    typeof contextUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link contextUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useContextUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof contextUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: contextUpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof contextUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconUpgradeableABI}__.
 */
export function useIBeaconUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iBeaconUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof iBeaconUpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: iBeaconUpgradeableABI, ...config } as UseContractReadConfig<
    typeof iBeaconUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconUpgradeableABI}__ and `functionName` set to `"implementation"`.
 */
export function useIBeaconUpgradeableImplementation<
  TFunctionName extends 'implementation',
  TSelectData = ReadContractResult<typeof iBeaconUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof iBeaconUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iBeaconUpgradeableABI,
    functionName: 'implementation',
    ...config
  } as UseContractReadConfig<typeof iBeaconUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__.
 */
export function useErc1967UpgradeUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc1967UpgradeUpgradeableABI, ...config } as UseContractEventConfig<
    typeof erc1967UpgradeUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useErc1967UpgradeUpgradeableAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'AdminChanged',
    ...config
  } as UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useErc1967UpgradeUpgradeableBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'BeaconUpgraded',
    ...config
  } as UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc1967UpgradeUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useErc1967UpgradeUpgradeableUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'Upgraded',
    ...config
  } as UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__.
 */
export function useInitializableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof initializableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: initializableABI, ...config } as UseContractEventConfig<
    typeof initializableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useInitializableInitializedEvent(
  config: Omit<UseContractEventConfig<typeof initializableABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: initializableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof initializableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof uupsUpgradeableABI, TFunctionName>
>(
  config: Omit<UseContractReadConfig<typeof uupsUpgradeableABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: uupsUpgradeableABI, ...config } as UseContractReadConfig<
    typeof uupsUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useUupsUpgradeableProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof uupsUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof uupsUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: uupsUpgradeableABI,
    functionName: 'proxiableUUID',
    ...config
  } as UseContractReadConfig<typeof uupsUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof uupsUpgradeableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof uupsUpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof uupsUpgradeableABI, TFunctionName, TMode>({
    abi: uupsUpgradeableABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useUupsUpgradeableUpgradeTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof uupsUpgradeableABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any
) {
  return useContractWrite<typeof uupsUpgradeableABI, 'upgradeTo', TMode>({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useUupsUpgradeableUpgradeToAndCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof uupsUpgradeableABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any
) {
  return useContractWrite<typeof uupsUpgradeableABI, 'upgradeToAndCall', TMode>({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function usePrepareUupsUpgradeableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: uupsUpgradeableABI, ...config } as UsePrepareContractWriteConfig<
    typeof uupsUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareUupsUpgradeableUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config
  } as UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareUupsUpgradeableUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof uupsUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: uupsUpgradeableABI, ...config } as UseContractEventConfig<
    typeof uupsUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useUupsUpgradeableAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'AdminChanged',
    ...config
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useUupsUpgradeableBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'BeaconUpgraded',
    ...config
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useUupsUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useUupsUpgradeableUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof uupsUpgradeableABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'Upgraded',
    ...config
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__.
 */
export function useErc20UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, TFunctionName>
>(
  config: Omit<UseContractReadConfig<typeof erc20UpgradeableABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: erc20UpgradeableABI, ...config } as UseContractReadConfig<
    typeof erc20UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20UpgradeableAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20UpgradeableABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof erc20UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20UpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20UpgradeableABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof erc20UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20UpgradeableDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20UpgradeableABI,
    functionName: 'decimals',
    ...config
  } as UseContractReadConfig<typeof erc20UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useErc20UpgradeableName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: erc20UpgradeableABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof erc20UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20UpgradeableSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20UpgradeableABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof erc20UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20UpgradeableTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20UpgradeableABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof erc20UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__.
 */
export function useErc20UpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20UpgradeableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20UpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof erc20UpgradeableABI, TFunctionName, TMode>({
    abi: erc20UpgradeableABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20UpgradeableApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20UpgradeableABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20UpgradeableABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof erc20UpgradeableABI, 'approve', TMode>({
    abi: erc20UpgradeableABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20UpgradeableDecreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20UpgradeableABI, 'decreaseAllowance'>['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof erc20UpgradeableABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof erc20UpgradeableABI, 'decreaseAllowance', TMode>({
    abi: erc20UpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20UpgradeableIncreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20UpgradeableABI, 'increaseAllowance'>['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof erc20UpgradeableABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof erc20UpgradeableABI, 'increaseAllowance', TMode>({
    abi: erc20UpgradeableABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20UpgradeableTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20UpgradeableABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof erc20UpgradeableABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof erc20UpgradeableABI, 'transfer', TMode>({
    abi: erc20UpgradeableABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20UpgradeableTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20UpgradeableABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc20UpgradeableABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof erc20UpgradeableABI, 'transferFrom', TMode>({
    abi: erc20UpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__.
 */
export function usePrepareErc20UpgradeableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20UpgradeableABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc20UpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20UpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20UpgradeableABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20UpgradeableDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20UpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20UpgradeableIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20UpgradeableABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20UpgradeableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20UpgradeableABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20UpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20UpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20UpgradeableABI}__.
 */
export function useErc20UpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc20UpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc20UpgradeableABI, ...config } as UseContractEventConfig<
    typeof erc20UpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20UpgradeableApprovalEvent(
  config: Omit<UseContractEventConfig<typeof erc20UpgradeableABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: erc20UpgradeableABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof erc20UpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc20UpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20UpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20UpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof erc20UpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20UpgradeableTransferEvent(
  config: Omit<UseContractEventConfig<typeof erc20UpgradeableABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: erc20UpgradeableABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof erc20UpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function useIerc20UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20UpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: ierc20UpgradeableABI, ...config } as UseContractReadConfig<
    typeof ierc20UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20UpgradeableAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof ierc20UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20UpgradeableABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof ierc20UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20UpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc20UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20UpgradeableABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof ierc20UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20UpgradeableTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ierc20UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20UpgradeableABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof ierc20UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function useIerc20UpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20UpgradeableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20UpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof ierc20UpgradeableABI, TFunctionName, TMode>({
    abi: ierc20UpgradeableABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20UpgradeableApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20UpgradeableABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc20UpgradeableABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof ierc20UpgradeableABI, 'approve', TMode>({
    abi: ierc20UpgradeableABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20UpgradeableTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20UpgradeableABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof ierc20UpgradeableABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof ierc20UpgradeableABI, 'transfer', TMode>({
    abi: ierc20UpgradeableABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20UpgradeableTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20UpgradeableABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof ierc20UpgradeableABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof ierc20UpgradeableABI, 'transferFrom', TMode>({
    abi: ierc20UpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function usePrepareIerc20UpgradeableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc20UpgradeableABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc20UpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20UpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20UpgradeableABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20UpgradeableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20UpgradeableABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20UpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20UpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function useIerc20UpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc20UpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ierc20UpgradeableABI, ...config } as UseContractEventConfig<
    typeof ierc20UpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20UpgradeableApprovalEvent(
  config: Omit<UseContractEventConfig<typeof ierc20UpgradeableABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: ierc20UpgradeableABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof ierc20UpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20UpgradeableTransferEvent(
  config: Omit<UseContractEventConfig<typeof ierc20UpgradeableABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: ierc20UpgradeableABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof ierc20UpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eip712UpgradeableABI}__.
 */
export function useEip712UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof eip712UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof eip712UpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: eip712UpgradeableABI, ...config } as UseContractReadConfig<
    typeof eip712UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eip712UpgradeableABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useEip712UpgradeableEip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<typeof eip712UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof eip712UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: eip712UpgradeableABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof eip712UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link eip712UpgradeableABI}__.
 */
export function useEip712UpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof eip712UpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: eip712UpgradeableABI, ...config } as UseContractEventConfig<
    typeof eip712UpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link eip712UpgradeableABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useEip712UpgradeableEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof eip712UpgradeableABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: eip712UpgradeableABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof eip712UpgradeableABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link eip712UpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useEip712UpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof eip712UpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: eip712UpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof eip712UpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165UpgradeableABI}__.
 */
export function useErc165UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc165UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc165UpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: erc165UpgradeableABI, ...config } as UseContractReadConfig<
    typeof erc165UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165UpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc165UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc165UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc165UpgradeableABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<typeof erc165UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc165UpgradeableABI}__.
 */
export function useErc165UpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc165UpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc165UpgradeableABI, ...config } as UseContractEventConfig<
    typeof erc165UpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc165UpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc165UpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc165UpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc165UpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof erc165UpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165UpgradeableABI}__.
 */
export function useIerc165UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165UpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: ierc165UpgradeableABI, ...config } as UseContractReadConfig<
    typeof ierc165UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165UpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc165UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc165UpgradeableABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<typeof ierc165UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__.
 */
export function useErc20BurnableUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20BurnableUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: erc20BurnableUpgradeableABI, ...config } as UseContractReadConfig<
    typeof erc20BurnableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20BurnableUpgradeableAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20BurnableUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BurnableUpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20BurnableUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20BurnableUpgradeableDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20BurnableUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'decimals',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useErc20BurnableUpgradeableName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20BurnableUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20BurnableUpgradeableSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20BurnableUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20BurnableUpgradeableTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20BurnableUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__.
 */
export function useErc20BurnableUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20BurnableUpgradeableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableUpgradeableABI, TFunctionName, TMode>({
    abi: erc20BurnableUpgradeableABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20BurnableUpgradeableApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20BurnableUpgradeableABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableUpgradeableABI, 'approve', TMode>({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"burn"`.
 */
export function useErc20BurnableUpgradeableBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20BurnableUpgradeableABI, 'burn'>['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableUpgradeableABI, 'burn', TMode>({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'burn',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useErc20BurnableUpgradeableBurnFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20BurnableUpgradeableABI, 'burnFrom'>['request']['abi'],
        'burnFrom',
        TMode
      > & { functionName?: 'burnFrom' }
    : UseContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'burnFrom', TMode> & {
        abi?: never
        functionName?: 'burnFrom'
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableUpgradeableABI, 'burnFrom', TMode>({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'burnFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20BurnableUpgradeableDecreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20BurnableUpgradeableABI, 'decreaseAllowance'>['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableUpgradeableABI, 'decreaseAllowance', TMode>({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20BurnableUpgradeableIncreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20BurnableUpgradeableABI, 'increaseAllowance'>['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableUpgradeableABI, 'increaseAllowance', TMode>({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20BurnableUpgradeableTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20BurnableUpgradeableABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableUpgradeableABI, 'transfer', TMode>({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20BurnableUpgradeableTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20BurnableUpgradeableABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableUpgradeableABI, 'transferFrom', TMode>({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__.
 */
export function usePrepareErc20BurnableUpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableUpgradeableABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20BurnableUpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc20BurnableUpgradeableBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'burn',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareErc20BurnableUpgradeableBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'burnFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'burnFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'burnFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20BurnableUpgradeableDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20BurnableUpgradeableIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20BurnableUpgradeableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20BurnableUpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__.
 */
export function useErc20BurnableUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc20BurnableUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc20BurnableUpgradeableABI, ...config } as UseContractEventConfig<
    typeof erc20BurnableUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20BurnableUpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableUpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20BurnableUpgradeableABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof erc20BurnableUpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc20BurnableUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20BurnableUpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof erc20BurnableUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20BurnableUpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableUpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20BurnableUpgradeableABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof erc20BurnableUpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__.
 */
export function useErc20PermitUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20PermitUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: erc20PermitUpgradeableABI, ...config } as UseContractReadConfig<
    typeof erc20PermitUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useErc20PermitUpgradeableDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof erc20PermitUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config
  } as UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20PermitUpgradeableAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20PermitUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20PermitUpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20PermitUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20PermitUpgradeableDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20PermitUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'decimals',
    ...config
  } as UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useErc20PermitUpgradeableEip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<typeof erc20PermitUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useErc20PermitUpgradeableName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20PermitUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"nonces"`.
 */
export function useErc20PermitUpgradeableNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof erc20PermitUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'nonces',
    ...config
  } as UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20PermitUpgradeableSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20PermitUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20PermitUpgradeableTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20PermitUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__.
 */
export function useErc20PermitUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20PermitUpgradeableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof erc20PermitUpgradeableABI, TFunctionName, TMode>({
    abi: erc20PermitUpgradeableABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20PermitUpgradeableApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20PermitUpgradeableABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20PermitUpgradeableABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof erc20PermitUpgradeableABI, 'approve', TMode>({
    abi: erc20PermitUpgradeableABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20PermitUpgradeableDecreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20PermitUpgradeableABI, 'decreaseAllowance'>['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof erc20PermitUpgradeableABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof erc20PermitUpgradeableABI, 'decreaseAllowance', TMode>({
    abi: erc20PermitUpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20PermitUpgradeableIncreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20PermitUpgradeableABI, 'increaseAllowance'>['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof erc20PermitUpgradeableABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof erc20PermitUpgradeableABI, 'increaseAllowance', TMode>({
    abi: erc20PermitUpgradeableABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"permit"`.
 */
export function useErc20PermitUpgradeablePermit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20PermitUpgradeableABI, 'permit'>['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof erc20PermitUpgradeableABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<typeof erc20PermitUpgradeableABI, 'permit', TMode>({
    abi: erc20PermitUpgradeableABI,
    functionName: 'permit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20PermitUpgradeableTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20PermitUpgradeableABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof erc20PermitUpgradeableABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof erc20PermitUpgradeableABI, 'transfer', TMode>({
    abi: erc20PermitUpgradeableABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20PermitUpgradeableTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20PermitUpgradeableABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc20PermitUpgradeableABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof erc20PermitUpgradeableABI, 'transferFrom', TMode>({
    abi: erc20PermitUpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__.
 */
export function usePrepareErc20PermitUpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({ abi: erc20PermitUpgradeableABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc20PermitUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20PermitUpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitUpgradeableABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20PermitUpgradeableDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitUpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20PermitUpgradeableIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitUpgradeableABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareErc20PermitUpgradeablePermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitUpgradeableABI,
    functionName: 'permit',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20PermitUpgradeableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitUpgradeableABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20PermitUpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitUpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__.
 */
export function useErc20PermitUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc20PermitUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc20PermitUpgradeableABI, ...config } as UseContractEventConfig<
    typeof erc20PermitUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20PermitUpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20PermitUpgradeableABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useErc20PermitUpgradeableEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20PermitUpgradeableABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc20PermitUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20PermitUpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20PermitUpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20PermitUpgradeableABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__.
 */
export function useIerc20PermitUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20PermitUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: ierc20PermitUpgradeableABI, ...config } as UseContractReadConfig<
    typeof ierc20PermitUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useIerc20PermitUpgradeableDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof ierc20PermitUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20PermitUpgradeableABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config
  } as UseContractReadConfig<typeof ierc20PermitUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__ and `functionName` set to `"nonces"`.
 */
export function useIerc20PermitUpgradeableNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof ierc20PermitUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20PermitUpgradeableABI,
    functionName: 'nonces',
    ...config
  } as UseContractReadConfig<typeof ierc20PermitUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__.
 */
export function useIerc20PermitUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20PermitUpgradeableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20PermitUpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof ierc20PermitUpgradeableABI, TFunctionName, TMode>({
    abi: ierc20PermitUpgradeableABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__ and `functionName` set to `"permit"`.
 */
export function useIerc20PermitUpgradeablePermit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20PermitUpgradeableABI, 'permit'>['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof ierc20PermitUpgradeableABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<typeof ierc20PermitUpgradeableABI, 'permit', TMode>({
    abi: ierc20PermitUpgradeableABI,
    functionName: 'permit',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__.
 */
export function usePrepareIerc20PermitUpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20PermitUpgradeableABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20PermitUpgradeableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareIerc20PermitUpgradeablePermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitUpgradeableABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20PermitUpgradeableABI,
    functionName: 'permit',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20PermitUpgradeableABI, 'permit'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__.
 */
export function useIerc20MetadataUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20MetadataUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: ierc20MetadataUpgradeableABI, ...config } as UseContractReadConfig<
    typeof ierc20MetadataUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20MetadataUpgradeableAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof ierc20MetadataUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20MetadataUpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc20MetadataUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"decimals"`.
 */
export function useIerc20MetadataUpgradeableDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof ierc20MetadataUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'decimals',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useIerc20MetadataUpgradeableName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof ierc20MetadataUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc20MetadataUpgradeableSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof ierc20MetadataUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20MetadataUpgradeableTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ierc20MetadataUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__.
 */
export function useIerc20MetadataUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20MetadataUpgradeableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof ierc20MetadataUpgradeableABI, TFunctionName, TMode>({
    abi: ierc20MetadataUpgradeableABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20MetadataUpgradeableApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20MetadataUpgradeableABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc20MetadataUpgradeableABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof ierc20MetadataUpgradeableABI, 'approve', TMode>({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20MetadataUpgradeableTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20MetadataUpgradeableABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof ierc20MetadataUpgradeableABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof ierc20MetadataUpgradeableABI, 'transfer', TMode>({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20MetadataUpgradeableTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20MetadataUpgradeableABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof ierc20MetadataUpgradeableABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof ierc20MetadataUpgradeableABI, 'transferFrom', TMode>({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__.
 */
export function usePrepareIerc20MetadataUpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataUpgradeableABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20MetadataUpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataUpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataUpgradeableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20MetadataUpgradeableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataUpgradeableABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataUpgradeableABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20MetadataUpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataUpgradeableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataUpgradeableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__.
 */
export function useIerc20MetadataUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc20MetadataUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ierc20MetadataUpgradeableABI, ...config } as UseContractEventConfig<
    typeof ierc20MetadataUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20MetadataUpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataUpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc20MetadataUpgradeableABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof ierc20MetadataUpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20MetadataUpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataUpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc20MetadataUpgradeableABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof ierc20MetadataUpgradeableABI, 'Transfer'>)
}
