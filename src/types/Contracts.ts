// Generated by @wagmi/cli@1.3.0 on 25/07/2023 at 14:20:46
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig
} from 'wagmi'
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Airdrop
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const airdropABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '_role', internalType: 'enum IFees.FeeRoles', type: 'uint8', indexed: true },
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'merkleRoot', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'AddAirdropMerkleRoot'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'poolsRoot', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'operatorsRoot', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'stakeRoot', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'withdrawalsRoot', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'rewardsRoot', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'AddMerkleRoots'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'AdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'enum IFees.FeeRoles', type: 'uint8', indexed: true },
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ClaimAirdrop'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'claimer', internalType: 'address', type: 'address', indexed: true },
      { name: 'role', internalType: 'enum IFees.FeeRoles', type: 'uint8', indexed: true },
      { name: 'numClaims', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'totalAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ClaimAirdropBatch'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '_epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: '_account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ClaimRewards'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'claimer', internalType: 'address', type: 'address', indexed: true },
      { name: 'numClaims', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'totalAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ClaimRewardsBatch'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'FallbackEther'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ReceiveEther'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true }
    ],
    name: 'RoleAdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleGranted'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleRevoked'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'maxBatchSize', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetMaxBatchSize'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'routerContract', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetRouterContract'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'stakeTogether', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetStakeTogether'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded'
  },
  { stateMutability: 'payable', type: 'fallback' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_role', internalType: 'enum IFees.FeeRoles', type: 'uint8' },
      { name: '_epoch', internalType: 'uint256', type: 'uint256' },
      { name: 'merkleRoot', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'addAirdropMerkleRoot',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'enum IFees.FeeRoles', type: 'uint8' },
      { name: '', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'airdropsMerkleRoots',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_role', internalType: 'enum IFees.FeeRoles', type: 'uint8' },
      { name: '_epoch', internalType: 'uint256', type: 'uint256' },
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' }
    ],
    name: 'claimAirdrop',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_role', internalType: 'enum IFees.FeeRoles', type: 'uint8' },
      { name: '_epochs', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_accounts', internalType: 'address[]', type: 'address[]' },
      { name: '_sharesAmounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'merkleProofs', internalType: 'bytes32[][]', type: 'bytes32[][]' }
    ],
    name: 'claimAirdropBatch',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'grantRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'initialize', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_role', internalType: 'enum IFees.FeeRoles', type: 'uint8' },
      { name: '_epoch', internalType: 'uint256', type: 'uint256' },
      { name: '_account', internalType: 'address', type: 'address' }
    ],
    name: 'isAirdropClaimed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxBatchSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'renounceRole',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'revokeRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'routerContract',
    outputs: [{ name: '', internalType: 'contract Router', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_maxBatchSize', internalType: 'uint256', type: 'uint256' }],
    name: 'setMaxBatchSize',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_routerContract', internalType: 'address', type: 'address' }],
    name: 'setRouterContract',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_stakeTogether', internalType: 'address', type: 'address' }],
    name: 'setStakeTogether',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogether',
    outputs: [{ name: '', internalType: 'contract StakeTogether', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'upgradeToAndCall',
    outputs: []
  },
  { stateMutability: 'payable', type: 'receive' }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Fees
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const feesABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'AdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'FallbackEther'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ReceiveEther'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true }
    ],
    name: 'RoleAdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleGranted'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleRevoked'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'enum IFees.FeeRoles', type: 'uint8', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'SetFeeAddress'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'feeType', internalType: 'enum IFees.FeeType', type: 'uint8', indexed: true },
      { name: 'role', internalType: 'enum IFees.FeeRoles', type: 'uint8', indexed: true },
      { name: 'allocation', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'SetFeeAllocation'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'feeType', internalType: 'enum IFees.FeeType', type: 'uint8', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'SetFeeValue'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'liquidityContract', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetLiquidityContract'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'maxFeeIncrease', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetMaxFeeIncrease'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'routerContract', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetRouterContract'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'stakeTogether', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetStakeTogether'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded'
  },
  { stateMutability: 'payable', type: 'fallback' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_feeType', internalType: 'enum IFees.FeeType', type: 'uint8' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' },
      { name: '_dynamicFee', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'distributeFeePercentage',
    outputs: [
      { name: 'shares', internalType: 'uint256[8]', type: 'uint256[8]' },
      { name: 'amounts', internalType: 'uint256[8]', type: 'uint256[8]' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_feeType', internalType: 'enum IFees.FeeType', type: 'uint8' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'estimateDynamicFeePercentage',
    outputs: [
      { name: 'shares', internalType: 'uint256[8]', type: 'uint256[8]' },
      { name: 'amounts', internalType: 'uint256[8]', type: 'uint256[8]' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_feeType', internalType: 'enum IFees.FeeType', type: 'uint8' }],
    name: 'estimateFeeFixed',
    outputs: [{ name: 'amounts', internalType: 'uint256[8]', type: 'uint256[8]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_feeType', internalType: 'enum IFees.FeeType', type: 'uint8' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'estimateFeePercentage',
    outputs: [
      { name: 'shares', internalType: 'uint256[8]', type: 'uint256[8]' },
      { name: 'amounts', internalType: 'uint256[8]', type: 'uint256[8]' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'enum IFees.FeeType', type: 'uint8' }],
    name: 'fees',
    outputs: [
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'mathType', internalType: 'enum IFees.FeeMathType', type: 'uint8' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_feeType', internalType: 'enum IFees.FeeType', type: 'uint8' }],
    name: 'getFee',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'enum IFees.FeeMathType', type: 'uint8' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_role', internalType: 'enum IFees.FeeRoles', type: 'uint8' }],
    name: 'getFeeAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_feeType', internalType: 'enum IFees.FeeType', type: 'uint8' },
      { name: '_role', internalType: 'enum IFees.FeeRoles', type: 'uint8' }
    ],
    name: 'getFeeAllocation',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getFeeRolesAddresses',
    outputs: [{ name: '', internalType: 'address[8]', type: 'address[8]' }]
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getFeesRoles',
    outputs: [{ name: '', internalType: 'enum IFees.FeeRoles[8]', type: 'uint8[8]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'grantRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'initialize', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'liquidityContract',
    outputs: [{ name: '', internalType: 'contract Liquidity', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxFeeIncrease',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'renounceRole',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'revokeRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'enum IFees.FeeRoles', type: 'uint8' }],
    name: 'roleAddresses',
    outputs: [{ name: '', internalType: 'address payable', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_role', internalType: 'enum IFees.FeeRoles', type: 'uint8' },
      { name: '_address', internalType: 'address payable', type: 'address' }
    ],
    name: 'setFeeAddress',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_feeType', internalType: 'enum IFees.FeeType', type: 'uint8' },
      { name: '_role', internalType: 'enum IFees.FeeRoles', type: 'uint8' },
      { name: '_allocation', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'setFeeAllocation',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_feeType', internalType: 'enum IFees.FeeType', type: 'uint8' },
      { name: '_fee', internalType: 'uint256', type: 'uint256' },
      { name: '_mathType', internalType: 'enum IFees.FeeMathType', type: 'uint8' }
    ],
    name: 'setFeeValue',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_liquidityContract', internalType: 'address', type: 'address' }],
    name: 'setLiquidityContract',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_maxFeeIncrease', internalType: 'uint256', type: 'uint256' }],
    name: 'setMaxFeeIncrease',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_stakeTogether', internalType: 'address', type: 'address' }],
    name: 'setStakeTogether',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogether',
    outputs: [{ name: '', internalType: 'contract StakeTogether', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'upgradeToAndCall',
    outputs: []
  },
  { stateMutability: 'payable', type: 'receive' }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Liquidity
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const liquidityABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'AdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: false },
      { name: 'balance', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Bootstrap'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BurnShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'DepositPool'
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintRewardsWithdrawalLenders'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintRewardsWithdrawalLendersFallback'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true }
    ],
    name: 'RoleAdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleGranted'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleRevoked'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'blocksInterval', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetBlocksInterval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'newLimit', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetDepositLimit'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'enableDeposit', internalType: 'bool', type: 'bool', indexed: false }],
    name: 'SetEnableDeposit'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'enable', internalType: 'bool', type: 'bool', indexed: false }],
    name: 'SetEnableLiquidity'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'feesContract', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetFees'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetMinDepositPoolAmount'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'routerContract', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetRouterContract'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'stakeTogether', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetStakeTogether'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'newLimit', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetWithdrawalLimit'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'newLimit', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetWithdrawalLiquidityLimit'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'SupplyLiquidity'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'WithdrawLiquidity'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'WithdrawPool'
  },
  { stateMutability: 'payable', type: 'fallback' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'blocksPerDay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'bootstrap', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'burnFrom',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'depositLimit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'depositPool', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'enableDeposit',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'enableLiquidity',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'feesContract',
    outputs: [{ name: '', internalType: 'contract Fees', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'grantRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'initialize', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lastResetBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minDepositAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'permit',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'pooledEthByShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'renounceRole',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'revokeRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'routerContract',
    outputs: [{ name: '', internalType: 'contract Router', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_newBlocksInterval', internalType: 'uint256', type: 'uint256' }],
    name: 'setBlocksInterval',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_newLimit', internalType: 'uint256', type: 'uint256' }],
    name: 'setDepositLimit',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_enableDeposit', internalType: 'bool', type: 'bool' }],
    name: 'setEnableDeposit',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_enable', internalType: 'bool', type: 'bool' }],
    name: 'setEnableLiquidity',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_feesContract', internalType: 'address', type: 'address' }],
    name: 'setFees',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'setMinDepositPoolAmount',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_routerContract', internalType: 'address', type: 'address' }],
    name: 'setRouterContract',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_stakeTogether', internalType: 'address', type: 'address' }],
    name: 'setStakeTogether',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_newLimit', internalType: 'uint256', type: 'uint256' }],
    name: 'setWithdrawalLimit',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_newLimit', internalType: 'uint256', type: 'uint256' }],
    name: 'setWithdrawalLiquidityLimit',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_ethAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'sharesByPooledEth',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'sharesOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogether',
    outputs: [{ name: '', internalType: 'contract StakeTogether', type: 'address' }]
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'supplyLiquidity', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalDeposited',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalLiquidityWithdrawn',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalPooledEther',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalWithdrawalsShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalWithdrawn',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferSharesFrom',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'upgradeToAndCall',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_pool', internalType: 'address', type: 'address' }
    ],
    name: 'withdrawLiquidity',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'withdrawPool',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'withdrawalLimit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'withdrawalLiquidityLimit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'payable', type: 'receive' }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Router
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const routerABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'oracle', internalType: 'address', type: 'address', indexed: true }],
    name: 'AddReportOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'AdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'penalties', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BlacklistReportOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'penalties', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BlacklistReportOracleManually'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'ConsensusApprove'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'ConsensusNotReached'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false },
      {
        name: 'report',
        internalType: 'struct Router.Report',
        type: 'tuple',
        components: [
          { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
          { name: 'epoch', internalType: 'uint256', type: 'uint256' },
          { name: 'profitAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'lossAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'merkleRoots', internalType: 'bytes32[7]', type: 'bytes32[7]' },
          {
            name: 'validatorsToExit',
            internalType: 'struct Router.ValidatorOracle[]',
            type: 'tuple[]',
            components: [
              { name: 'oracle', internalType: 'address', type: 'address' },
              { name: 'validators', internalType: 'bytes[]', type: 'bytes[]' }
            ]
          },
          { name: 'exitedValidators', internalType: 'bytes[]', type: 'bytes[]' },
          { name: 'withdrawAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'restWithdrawAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'routerExtraAmount', internalType: 'uint256', type: 'uint256' }
        ],
        indexed: false
      }
    ],
    name: 'ExecuteReport'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'FallbackEther'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'InvalidateConsensus'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'penalties', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'blacklisted', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'PenalizeReportOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ReceiveEther'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'oracle', internalType: 'address', type: 'address', indexed: true }],
    name: 'RemoveReportOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'publicKeys', internalType: 'bytes[]', type: 'bytes[]', indexed: false }],
    name: 'RequestValidatorsExit'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'penalties', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'RewardReportOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true }
    ],
    name: 'RoleAdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleGranted'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleRevoked'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'bunkerMode', internalType: 'bool', type: 'bool', indexed: false }],
    name: 'SetBunkerMode'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetLastConsensusEpoch'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'maxApr', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetMaxApr'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'maxValidatorsToExit', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetMaxValidatorsToExit'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'minBlocksBeforeExecution', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetMinBlockBeforeExecution'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'minQuorum', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetMinReportOracleQuorum'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'frequency', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetReportBlockFrequency'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetReportBlockNumber'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetReportEpochFrequency'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'epochNumber', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetReportEpochNumber'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'newLimit', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetReportOraclePenalizeLimit'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'quorum', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetReportOracleQuorum'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'stakeTogether', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetStakeTogether'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'SkipNextBlockInterval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'SubmitReport'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'penalties', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'UnBlacklistReportOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'quorum', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'UpdateReportOracleQuorum'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'validators',
        internalType: 'struct Router.ValidatorOracle[]',
        type: 'tuple[]',
        components: [
          { name: 'oracle', internalType: 'address', type: 'address' },
          { name: 'validators', internalType: 'bytes[]', type: 'bytes[]' }
        ],
        indexed: false
      }
    ],
    name: 'ValidatorsToExit'
  },
  { stateMutability: 'payable', type: 'fallback' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ORACLE_REPORT_MANAGER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ORACLE_REPORT_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ORACLE_REPORT_SENTINEL_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_oracle', internalType: 'address', type: 'address' }],
    name: 'addReportOracle',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_sentinel', internalType: 'address', type: 'address' }],
    name: 'addSentinel',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'airdropContract',
    outputs: [{ name: '', internalType: 'contract Airdrop', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: '_report',
        internalType: 'struct Router.Report',
        type: 'tuple',
        components: [
          { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
          { name: 'epoch', internalType: 'uint256', type: 'uint256' },
          { name: 'profitAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'lossAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'merkleRoots', internalType: 'bytes32[7]', type: 'bytes32[7]' },
          {
            name: 'validatorsToExit',
            internalType: 'struct Router.ValidatorOracle[]',
            type: 'tuple[]',
            components: [
              { name: 'oracle', internalType: 'address', type: 'address' },
              { name: 'validators', internalType: 'bytes[]', type: 'bytes[]' }
            ]
          },
          { name: 'exitedValidators', internalType: 'bytes[]', type: 'bytes[]' },
          { name: 'withdrawAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'restWithdrawAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'routerExtraAmount', internalType: 'uint256', type: 'uint256' }
        ]
      },
      { name: '_hash', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'auditReport',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_oracle', internalType: 'address', type: 'address' }],
    name: 'blacklistReportOracle',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'bunkerMode',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'consensusInvalidatedReport',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'consensusReport',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_hash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: '_report',
        internalType: 'struct Router.Report',
        type: 'tuple',
        components: [
          { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
          { name: 'epoch', internalType: 'uint256', type: 'uint256' },
          { name: 'profitAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'lossAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'merkleRoots', internalType: 'bytes32[7]', type: 'bytes32[7]' },
          {
            name: 'validatorsToExit',
            internalType: 'struct Router.ValidatorOracle[]',
            type: 'tuple[]',
            components: [
              { name: 'oracle', internalType: 'address', type: 'address' },
              { name: 'validators', internalType: 'bytes[]', type: 'bytes[]' }
            ]
          },
          { name: 'exitedValidators', internalType: 'bytes[]', type: 'bytes[]' },
          { name: 'withdrawAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'restWithdrawAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'routerExtraAmount', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ],
    name: 'executeReport',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'executedReports',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'feesContract',
    outputs: [{ name: '', internalType: 'contract Fees', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'grantRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_withdrawContract', internalType: 'address', type: 'address' },
      { name: '_liquidityContract', internalType: 'address', type: 'address' },
      { name: '_airdropContract', internalType: 'address', type: 'address' },
      { name: '_validatorsContract', internalType: 'address', type: 'address' },
      { name: '_feesContract', internalType: 'address', type: 'address' }
    ],
    name: 'initialize',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_epoch', internalType: 'uint256', type: 'uint256' },
      { name: '_hash', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'invalidateConsensus',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_epoch', internalType: 'uint256', type: 'uint256' },
      { name: '_hash', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'isReadyToExecute',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_epoch', internalType: 'uint256', type: 'uint256' }],
    name: 'isReadyToSubmit',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_oracle', internalType: 'address', type: 'address' }],
    name: 'isReportOracle',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_oracle', internalType: 'address', type: 'address' }],
    name: 'isReportOracleBlackListed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lastConsensusEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lastExecutedConsensusEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'liquidityContract',
    outputs: [{ name: '', internalType: 'contract Liquidity', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxApr',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxValidatorsToExit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minBlocksBeforeExecution',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minReportOracleQuorum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'oracleBlackListLimit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: '', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'oracleReports',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'oracleReportsVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'oracle', internalType: 'address', type: 'address' }],
    name: 'removeReportOracle',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_sentinel', internalType: 'address', type: 'address' }],
    name: 'removeSentinel',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'renounceRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reportBlockFrequency',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reportBlockNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'reportExecutionBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'reportHistoric',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reportOracleQuorum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'reportOraclesBlacklist',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'publicKeys', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'requestValidatorsExit',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'revokeRole',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_bunkerMode', internalType: 'bool', type: 'bool' }],
    name: 'setBunkerMode',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_epoch', internalType: 'uint256', type: 'uint256' }],
    name: 'setLastConsensusEpoch',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_maxApr', internalType: 'uint256', type: 'uint256' }],
    name: 'setMaxApr',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_maxValidatorsToExit', internalType: 'uint256', type: 'uint256' }],
    name: 'setMaxValidatorsToExit',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_minBlocksBeforeExecution', internalType: 'uint256', type: 'uint256' }],
    name: 'setMinBlockBeforeExecution',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_quorum', internalType: 'uint256', type: 'uint256' }],
    name: 'setMinReportOracleQuorum',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_frequency', internalType: 'uint256', type: 'uint256' }],
    name: 'setReportBlockFrequency',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_oraclePenalizeLimit', internalType: 'uint256', type: 'uint256' }],
    name: 'setReportOraclePenalizeLimit',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_quorum', internalType: 'uint256', type: 'uint256' }],
    name: 'setReportOracleQuorum',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_stakeTogether', internalType: 'address', type: 'address' }],
    name: 'setStakeTogether',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogether',
    outputs: [{ name: '', internalType: 'contract StakeTogether', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_epoch', internalType: 'uint256', type: 'uint256' },
      { name: '_hash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: '_report',
        internalType: 'struct Router.Report',
        type: 'tuple',
        components: [
          { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
          { name: 'epoch', internalType: 'uint256', type: 'uint256' },
          { name: 'profitAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'lossAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'merkleRoots', internalType: 'bytes32[7]', type: 'bytes32[7]' },
          {
            name: 'validatorsToExit',
            internalType: 'struct Router.ValidatorOracle[]',
            type: 'tuple[]',
            components: [
              { name: 'oracle', internalType: 'address', type: 'address' },
              { name: 'validators', internalType: 'bytes[]', type: 'bytes[]' }
            ]
          },
          { name: 'exitedValidators', internalType: 'bytes[]', type: 'bytes[]' },
          { name: 'withdrawAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'restWithdrawAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'routerExtraAmount', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ],
    name: 'submitReport',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalReportOracles',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_oracle', internalType: 'address', type: 'address' }],
    name: 'unBlacklistReportOracle',
    outputs: []
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'upgradeToAndCall',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'validatorsContract',
    outputs: [{ name: '', internalType: 'contract Validators', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'withdrawalsContract',
    outputs: [{ name: '', internalType: 'contract Withdrawals', type: 'address' }]
  },
  { stateMutability: 'payable', type: 'receive' }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Shares
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const sharesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'AddPool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'AdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'pool', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BurnPoolShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BurnShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ClaimRewards'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'pool', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'shares', internalType: 'uint256[8]', type: 'uint256[8]', indexed: false }
    ],
    name: 'DepositBase'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'donor', internalType: 'address', type: 'address', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'pool', internalType: 'address', type: 'address', indexed: false },
      { name: 'referral', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'DepositDonationPool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'pool', internalType: 'address', type: 'address', indexed: false },
      { name: 'referral', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'DepositPool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'DepositProtocolLimitReached'
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'lockDays', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'LockShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'MintPenalty'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'pool', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintPoolShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'pool', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintRewards'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintRewardsAccounts'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintRewardsAccountsFallback'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'RefundPool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'RemovePool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true }
    ],
    name: 'RoleAdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleGranted'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleRevoked'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetBeaconBalance'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'config',
        internalType: 'struct IStakeTogether.Config',
        type: 'tuple',
        components: [
          { name: 'enableDeposit', internalType: 'bool', type: 'bool' },
          { name: 'enableLock', internalType: 'bool', type: 'bool' },
          { name: 'enableWithdrawPool', internalType: 'bool', type: 'bool' },
          { name: 'poolSize', internalType: 'uint256', type: 'uint256' },
          { name: 'minDepositAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'minLockDays', internalType: 'uint256', type: 'uint256' },
          { name: 'maxLockDays', internalType: 'uint256', type: 'uint256' },
          { name: 'depositLimit', internalType: 'uint256', type: 'uint256' },
          { name: 'withdrawalLimit', internalType: 'uint256', type: 'uint256' },
          { name: 'blocksPerDay', internalType: 'uint256', type: 'uint256' },
          { name: 'maxPools', internalType: 'uint256', type: 'uint256' },
          { name: 'permissionLessAddPool', internalType: 'bool', type: 'bool' }
        ],
        indexed: false
      }
    ],
    name: 'SetConfig'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetLiquidityBalance'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SupplyLiquidity'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferDelegationShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'pool', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferPoolDelegationShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'pool', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferPoolShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'UnlockShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'pool', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'WithdrawLiquidity'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'pool', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'WithdrawPool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'pool', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'WithdrawValidator'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'WithdrawalLimitReached'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'POOL_MANAGER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'airdropContract',
    outputs: [{ name: '', internalType: 'contract Airdrop', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'beaconBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'burnFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' },
      { name: '_role', internalType: 'enum IFees.FeeRoles', type: 'uint8' }
    ],
    name: 'claimRewards',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'config',
    outputs: [
      { name: 'enableDeposit', internalType: 'bool', type: 'bool' },
      { name: 'enableLock', internalType: 'bool', type: 'bool' },
      { name: 'enableWithdrawPool', internalType: 'bool', type: 'bool' },
      { name: 'poolSize', internalType: 'uint256', type: 'uint256' },
      { name: 'minDepositAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minLockDays', internalType: 'uint256', type: 'uint256' },
      { name: 'maxLockDays', internalType: 'uint256', type: 'uint256' },
      { name: 'depositLimit', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawalLimit', internalType: 'uint256', type: 'uint256' },
      { name: 'blocksPerDay', internalType: 'uint256', type: 'uint256' },
      { name: 'maxPools', internalType: 'uint256', type: 'uint256' },
      { name: 'permissionLessAddPool', internalType: 'bool', type: 'bool' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_pool', internalType: 'address', type: 'address' }
    ],
    name: 'delegationSharesOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'feesContract',
    outputs: [{ name: '', internalType: 'contract Fees', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'grantRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_pool', internalType: 'address', type: 'address' }],
    name: 'isPool',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'liquidityBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'liquidityContract',
    outputs: [{ name: '', internalType: 'contract Liquidity', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' },
      { name: '_lockDays', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'lockShares',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'lockedShares',
    outputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'unlockTime', internalType: 'uint256', type: 'uint256' },
      { name: 'lockDays', internalType: 'uint256', type: 'uint256' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'lockedSharesOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxDelegations',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_lossAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'mintPenalty',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_address', internalType: 'address', type: 'address' },
      { name: '_pool', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'mintRewards',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'netSharesOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'permit',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'poolSharesOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'pooledEthByShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'renounceRole',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'revokeRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'routerContract',
    outputs: [{ name: '', internalType: 'contract Router', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'setBeaconBalance',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'setLiquidityBalance',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_ethAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'sharesByPooledEth',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'sharesOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalLockedShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalPoolShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalPooledEther',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_fromPool', internalType: 'address', type: 'address' },
      { name: '_toPool', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferPoolShares',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferSharesFrom',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_id', internalType: 'uint256', type: 'uint256' }],
    name: 'unlockShares',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'upgradeToAndCall',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'validatorsContract',
    outputs: [{ name: '', internalType: 'contract Validators', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'withdrawalCredentials',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'withdrawalsContract',
    outputs: [{ name: '', internalType: 'contract Withdrawals', type: 'address' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StakeTogether
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stakeTogetherABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'AddPool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'AdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'pool', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BurnPoolShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BurnShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ClaimRewards'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'pool', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'shares', internalType: 'uint256[8]', type: 'uint256[8]', indexed: false }
    ],
    name: 'DepositBase'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'donor', internalType: 'address', type: 'address', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'pool', internalType: 'address', type: 'address', indexed: false },
      { name: 'referral', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'DepositDonationPool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'pool', internalType: 'address', type: 'address', indexed: false },
      { name: 'referral', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'DepositPool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'DepositProtocolLimitReached'
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'lockDays', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'LockShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'MintPenalty'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'pool', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintPoolShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'pool', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintRewards'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintRewardsAccounts'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintRewardsAccountsFallback'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'RefundPool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'RemovePool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true }
    ],
    name: 'RoleAdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleGranted'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleRevoked'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetBeaconBalance'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'config',
        internalType: 'struct IStakeTogether.Config',
        type: 'tuple',
        components: [
          { name: 'enableDeposit', internalType: 'bool', type: 'bool' },
          { name: 'enableLock', internalType: 'bool', type: 'bool' },
          { name: 'enableWithdrawPool', internalType: 'bool', type: 'bool' },
          { name: 'poolSize', internalType: 'uint256', type: 'uint256' },
          { name: 'minDepositAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'minLockDays', internalType: 'uint256', type: 'uint256' },
          { name: 'maxLockDays', internalType: 'uint256', type: 'uint256' },
          { name: 'depositLimit', internalType: 'uint256', type: 'uint256' },
          { name: 'withdrawalLimit', internalType: 'uint256', type: 'uint256' },
          { name: 'blocksPerDay', internalType: 'uint256', type: 'uint256' },
          { name: 'maxPools', internalType: 'uint256', type: 'uint256' },
          { name: 'permissionLessAddPool', internalType: 'bool', type: 'bool' }
        ],
        indexed: false
      }
    ],
    name: 'SetConfig'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetLiquidityBalance'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SupplyLiquidity'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferDelegationShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'pool', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferPoolDelegationShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'pool', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferPoolShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'UnlockShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'pool', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'WithdrawLiquidity'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'pool', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'WithdrawPool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'pool', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'WithdrawValidator'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'WithdrawalLimitReached'
  },
  { stateMutability: 'payable', type: 'fallback' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'POOL_MANAGER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: '_pool', internalType: 'address', type: 'address' }],
    name: 'addPool',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'airdropContract',
    outputs: [{ name: '', internalType: 'contract Airdrop', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'beaconBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'burnFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' },
      { name: '_role', internalType: 'enum IFees.FeeRoles', type: 'uint8' }
    ],
    name: 'claimRewards',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'config',
    outputs: [
      { name: 'enableDeposit', internalType: 'bool', type: 'bool' },
      { name: 'enableLock', internalType: 'bool', type: 'bool' },
      { name: 'enableWithdrawPool', internalType: 'bool', type: 'bool' },
      { name: 'poolSize', internalType: 'uint256', type: 'uint256' },
      { name: 'minDepositAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minLockDays', internalType: 'uint256', type: 'uint256' },
      { name: 'maxLockDays', internalType: 'uint256', type: 'uint256' },
      { name: 'depositLimit', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawalLimit', internalType: 'uint256', type: 'uint256' },
      { name: 'blocksPerDay', internalType: 'uint256', type: 'uint256' },
      { name: 'maxPools', internalType: 'uint256', type: 'uint256' },
      { name: 'permissionLessAddPool', internalType: 'bool', type: 'bool' }
    ]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_publicKey', internalType: 'bytes', type: 'bytes' },
      { name: '_signature', internalType: 'bytes', type: 'bytes' },
      { name: '_depositDataRoot', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'createValidator',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_pool', internalType: 'address', type: 'address' }
    ],
    name: 'delegationSharesOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_pool', internalType: 'address', type: 'address' },
      { name: '_referral', internalType: 'address', type: 'address' }
    ],
    name: 'depositDonationPool',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_pool', internalType: 'address', type: 'address' },
      { name: '_referral', internalType: 'address', type: 'address' }
    ],
    name: 'depositPool',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'feesContract',
    outputs: [{ name: '', internalType: 'contract Fees', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'grantRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_routerContract', internalType: 'address', type: 'address' },
      { name: '_feesContract', internalType: 'address', type: 'address' },
      { name: '_airdropContract', internalType: 'address', type: 'address' },
      { name: '_withdrawalsContract', internalType: 'address', type: 'address' },
      { name: '_liquidityContract', internalType: 'address', type: 'address' },
      { name: '_validatorsContract', internalType: 'address', type: 'address' },
      { name: '_withdrawalCredentials', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'initialize',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_pool', internalType: 'address', type: 'address' }],
    name: 'isPool',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lastResetBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'liquidityBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'liquidityContract',
    outputs: [{ name: '', internalType: 'contract Liquidity', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' },
      { name: '_lockDays', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'lockShares',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'lockedShares',
    outputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'unlockTime', internalType: 'uint256', type: 'uint256' },
      { name: 'lockDays', internalType: 'uint256', type: 'uint256' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'lockedSharesOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxDelegations',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_lossAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'mintPenalty',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_address', internalType: 'address', type: 'address' },
      { name: '_pool', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'mintRewards',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'netSharesOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'permit',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'poolBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'poolCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'poolSharesOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'pooledEthByShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'refundPool', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_pool', internalType: 'address', type: 'address' }],
    name: 'removePool',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'renounceRole',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'revokeRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'routerContract',
    outputs: [{ name: '', internalType: 'contract Router', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'setBeaconBalance',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_config',
        internalType: 'struct IStakeTogether.Config',
        type: 'tuple',
        components: [
          { name: 'enableDeposit', internalType: 'bool', type: 'bool' },
          { name: 'enableLock', internalType: 'bool', type: 'bool' },
          { name: 'enableWithdrawPool', internalType: 'bool', type: 'bool' },
          { name: 'poolSize', internalType: 'uint256', type: 'uint256' },
          { name: 'minDepositAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'minLockDays', internalType: 'uint256', type: 'uint256' },
          { name: 'maxLockDays', internalType: 'uint256', type: 'uint256' },
          { name: 'depositLimit', internalType: 'uint256', type: 'uint256' },
          { name: 'withdrawalLimit', internalType: 'uint256', type: 'uint256' },
          { name: 'blocksPerDay', internalType: 'uint256', type: 'uint256' },
          { name: 'maxPools', internalType: 'uint256', type: 'uint256' },
          { name: 'permissionLessAddPool', internalType: 'bool', type: 'bool' }
        ]
      }
    ],
    name: 'setConfig',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'setLiquidityBalance',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_ethAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'sharesByPooledEth',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'sharesOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalDeposited',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalLockedShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalPoolShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalPooledEther',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalWithdrawn',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_fromPool', internalType: 'address', type: 'address' },
      { name: '_toPool', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferPoolShares',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_sharesAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferSharesFrom',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_id', internalType: 'uint256', type: 'uint256' }],
    name: 'unlockShares',
    outputs: []
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'upgradeToAndCall',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'validatorsContract',
    outputs: [{ name: '', internalType: 'contract Validators', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_pool', internalType: 'address', type: 'address' }
    ],
    name: 'withdrawLiquidity',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_pool', internalType: 'address', type: 'address' }
    ],
    name: 'withdrawPool',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_pool', internalType: 'address', type: 'address' }
    ],
    name: 'withdrawValidator',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'withdrawalCredentials',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'withdrawalsContract',
    outputs: [{ name: '', internalType: 'contract Withdrawals', type: 'address' }]
  },
  { stateMutability: 'payable', type: 'receive' }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Validators
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const validatorsABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: true }],
    name: 'AddValidatorOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'AdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'creator', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'publicKey', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'withdrawalCredentials', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'signature', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'depositDataRoot', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'CreateValidator'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'FallbackEther'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ReceiveEther'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'publicKey', internalType: 'bytes', type: 'bytes', indexed: false }
    ],
    name: 'RemoveValidator'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: true }],
    name: 'RemoveValidatorOracle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true }
    ],
    name: 'RoleAdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleGranted'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleRevoked'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'routerContract', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetRouterContract'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'stakeTogether', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetStakeTogether'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'newValidatorSize', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetValidatorSize'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded'
  },
  { stateMutability: 'payable', type: 'fallback' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ORACLE_VALIDATOR_MANAGER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ORACLE_VALIDATOR_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ORACLE_VALIDATOR_SENTINEL_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_oracleAddress', internalType: 'address', type: 'address' }],
    name: 'addValidatorOracle',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_publicKey', internalType: 'bytes', type: 'bytes' },
      { name: '_withdrawalCredentials', internalType: 'bytes', type: 'bytes' },
      { name: '_signature', internalType: 'bytes', type: 'bytes' },
      { name: '_depositDataRoot', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'createValidator',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'currentOracleIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'currentValidatorOracle',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'depositContract',
    outputs: [{ name: '', internalType: 'contract IDepositContract', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'enableBorrow',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'feesContract',
    outputs: [{ name: '', internalType: 'contract Fees', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'forceNextValidatorOracle',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'grantRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_depositContract', internalType: 'address', type: 'address' },
      { name: '_feesContract', internalType: 'address', type: 'address' }
    ],
    name: 'initialize',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_publicKey', internalType: 'bytes', type: 'bytes' }],
    name: 'isValidator',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_oracleAddress', internalType: 'address', type: 'address' }],
    name: 'isValidatorOracle',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_epoch', internalType: 'uint256', type: 'uint256' },
      { name: '_publicKey', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'removeValidator',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_oracleAddress', internalType: 'address', type: 'address' }],
    name: 'removeValidatorOracle',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'renounceRole',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'revokeRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'routerContract',
    outputs: [{ name: '', internalType: 'contract Router', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_routerContract', internalType: 'address', type: 'address' }],
    name: 'setRouterContract',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_stakeTogether', internalType: 'address', type: 'address' }],
    name: 'setStakeTogether',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_newSize', internalType: 'uint256', type: 'uint256' }],
    name: 'setValidatorSize',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogether',
    outputs: [{ name: '', internalType: 'contract StakeTogether', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalValidators',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'upgradeToAndCall',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'validatorOracles',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'validatorSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
    name: 'validators',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  { stateMutability: 'payable', type: 'receive' }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Withdrawals
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const withdrawalsABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'AdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded'
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'FallbackEther'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ReceiveEther'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true }
    ],
    name: 'RoleAdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleGranted'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleRevoked'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'stakeTogether', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetStakeTogether'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Withdraw'
  },
  { stateMutability: 'payable', type: 'fallback' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'burnFrom',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'grantRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'initialize', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'isWithdrawReady',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'mint',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'permit',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'renounceRole',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'revokeRole',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_stakeTogether', internalType: 'address', type: 'address' }],
    name: 'setStakeTogether',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stakeTogether',
    outputs: [{ name: '', internalType: 'contract StakeTogether', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'upgradeToAndCall',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'withdraw',
    outputs: []
  },
  { stateMutability: 'payable', type: 'receive' }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAirdrop
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAirdropABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '_role', internalType: 'enum IFees.FeeRoles', type: 'uint8', indexed: true },
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'merkleRoot', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'AddAirdropMerkleRoot'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'poolsRoot', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'operatorsRoot', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'stakeRoot', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'withdrawalsRoot', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'rewardsRoot', internalType: 'bytes32', type: 'bytes32', indexed: false }
    ],
    name: 'AddMerkleRoots'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'enum IFees.FeeRoles', type: 'uint8', indexed: true },
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ClaimAirdrop'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'claimer', internalType: 'address', type: 'address', indexed: true },
      { name: 'role', internalType: 'enum IFees.FeeRoles', type: 'uint8', indexed: true },
      { name: 'numClaims', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'totalAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ClaimAirdropBatch'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '_epoch', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: '_account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ClaimRewards'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'claimer', internalType: 'address', type: 'address', indexed: true },
      { name: 'numClaims', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'totalAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ClaimRewardsBatch'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'FallbackEther'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ReceiveEther'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'maxBatchSize', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetMaxBatchSize'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'routerContract', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetRouterContract'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'stakeTogether', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetStakeTogether'
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IDepositContract
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iDepositContractABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'pubkey', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'withdrawal_credentials', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'amount', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'signature', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'index', internalType: 'bytes', type: 'bytes', indexed: false }
    ],
    name: 'DepositEvent'
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'pubkey', internalType: 'bytes', type: 'bytes' },
      { name: 'withdrawal_credentials', internalType: 'bytes', type: 'bytes' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
      { name: 'deposit_data_root', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'deposit',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'get_deposit_count',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'get_deposit_root',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFees
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFeesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'FallbackEther'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ReceiveEther'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'enum IFees.FeeRoles', type: 'uint8', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'SetFeeAddress'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'feeType', internalType: 'enum IFees.FeeType', type: 'uint8', indexed: true },
      { name: 'role', internalType: 'enum IFees.FeeRoles', type: 'uint8', indexed: true },
      { name: 'allocation', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'SetFeeAllocation'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'feeType', internalType: 'enum IFees.FeeType', type: 'uint8', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'SetFeeValue'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'liquidityContract', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetLiquidityContract'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'maxFeeIncrease', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetMaxFeeIncrease'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'routerContract', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetRouterContract'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'stakeTogether', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetStakeTogether'
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IStakeTogether
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iStakeTogetherABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'AddPool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'pool', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BurnPoolShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'BurnShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ClaimRewards'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'pool', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'shares', internalType: 'uint256[8]', type: 'uint256[8]', indexed: false }
    ],
    name: 'DepositBase'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'donor', internalType: 'address', type: 'address', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'pool', internalType: 'address', type: 'address', indexed: false },
      { name: 'referral', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'DepositDonationPool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'pool', internalType: 'address', type: 'address', indexed: false },
      { name: 'referral', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'DepositPool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'DepositProtocolLimitReached'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'lockDays', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'LockShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'MintPenalty'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'pool', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintPoolShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'pool', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintRewards'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintRewardsAccounts'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintRewardsAccountsFallback'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MintShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'RefundPool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'RemovePool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetBeaconBalance'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'config',
        internalType: 'struct IStakeTogether.Config',
        type: 'tuple',
        components: [
          { name: 'enableDeposit', internalType: 'bool', type: 'bool' },
          { name: 'enableLock', internalType: 'bool', type: 'bool' },
          { name: 'enableWithdrawPool', internalType: 'bool', type: 'bool' },
          { name: 'poolSize', internalType: 'uint256', type: 'uint256' },
          { name: 'minDepositAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'minLockDays', internalType: 'uint256', type: 'uint256' },
          { name: 'maxLockDays', internalType: 'uint256', type: 'uint256' },
          { name: 'depositLimit', internalType: 'uint256', type: 'uint256' },
          { name: 'withdrawalLimit', internalType: 'uint256', type: 'uint256' },
          { name: 'blocksPerDay', internalType: 'uint256', type: 'uint256' },
          { name: 'maxPools', internalType: 'uint256', type: 'uint256' },
          { name: 'permissionLessAddPool', internalType: 'bool', type: 'bool' }
        ],
        indexed: false
      }
    ],
    name: 'SetConfig'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SetLiquidityBalance'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SupplyLiquidity'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferDelegationShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'pool', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferPoolDelegationShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'pool', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferPoolShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'sharesAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'UnlockShares'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'pool', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'WithdrawLiquidity'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'pool', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'WithdrawPool'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'pool', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'WithdrawValidator'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'WithdrawalLimitReached'
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AccessControlUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const accessControlUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true }
    ],
    name: 'RoleAdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleGranted'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleRevoked'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'grantRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'renounceRole',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'revokeRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAccessControlUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAccessControlUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true }
    ],
    name: 'RoleAdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleGranted'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'RoleRevoked'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'grantRole',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'renounceRole',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' }
    ],
    name: 'revokeRole',
    outputs: []
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1967Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1967UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'AdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded'
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC5267Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc5267UpgradeableABI = [
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1822ProxiableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1822ProxiableUpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PausableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pausableUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ReentrancyGuardUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const reentrancyGuardUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ContextUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const contextUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1967UpgradeUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1967UpgradeUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'AdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded'
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBeaconUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBeaconUpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Initializable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const initializableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UUPSUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const uupsUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false }
    ],
    name: 'AdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: []
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'upgradeToAndCall',
    outputs: []
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EIP712Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const eip712UpgradeableABI = [
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165UpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20PermitUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20PermitUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' }
    ]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'permit',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20BurnableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20BurnableUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'burnFrom',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20MetadataUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20PermitUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20PermitUpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'permit',
    outputs: []
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__.
 */
export function useAirdropRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: airdropABI, ...config } as UseContractReadConfig<
    typeof airdropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"ADMIN_ROLE"`.
 */
export function useAirdropAdminRole<
  TFunctionName extends 'ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: airdropABI, functionName: 'ADMIN_ROLE', ...config } as UseContractReadConfig<
    typeof airdropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useAirdropDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: airdropABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config
  } as UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"UPGRADER_ROLE"`.
 */
export function useAirdropUpgraderRole<
  TFunctionName extends 'UPGRADER_ROLE',
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: airdropABI, functionName: 'UPGRADER_ROLE', ...config } as UseContractReadConfig<
    typeof airdropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"airdropsMerkleRoots"`.
 */
export function useAirdropAirdropsMerkleRoots<
  TFunctionName extends 'airdropsMerkleRoots',
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: airdropABI,
    functionName: 'airdropsMerkleRoots',
    ...config
  } as UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useAirdropGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: airdropABI, functionName: 'getRoleAdmin', ...config } as UseContractReadConfig<
    typeof airdropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"hasRole"`.
 */
export function useAirdropHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: airdropABI, functionName: 'hasRole', ...config } as UseContractReadConfig<
    typeof airdropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"isAirdropClaimed"`.
 */
export function useAirdropIsAirdropClaimed<
  TFunctionName extends 'isAirdropClaimed',
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: airdropABI,
    functionName: 'isAirdropClaimed',
    ...config
  } as UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"maxBatchSize"`.
 */
export function useAirdropMaxBatchSize<
  TFunctionName extends 'maxBatchSize',
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: airdropABI, functionName: 'maxBatchSize', ...config } as UseContractReadConfig<
    typeof airdropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"paused"`.
 */
export function useAirdropPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: airdropABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof airdropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useAirdropProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: airdropABI, functionName: 'proxiableUUID', ...config } as UseContractReadConfig<
    typeof airdropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"routerContract"`.
 */
export function useAirdropRouterContract<
  TFunctionName extends 'routerContract',
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: airdropABI,
    functionName: 'routerContract',
    ...config
  } as UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"stakeTogether"`.
 */
export function useAirdropStakeTogether<
  TFunctionName extends 'stakeTogether',
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: airdropABI, functionName: 'stakeTogether', ...config } as UseContractReadConfig<
    typeof airdropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useAirdropSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof airdropABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: airdropABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<typeof airdropABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__.
 */
export function useAirdropWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof airdropABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, TFunctionName, TMode>({ abi: airdropABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"addAirdropMerkleRoot"`.
 */
export function useAirdropAddAirdropMerkleRoot<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'addAirdropMerkleRoot'>['request']['abi'],
        'addAirdropMerkleRoot',
        TMode
      > & { functionName?: 'addAirdropMerkleRoot' }
    : UseContractWriteConfig<typeof airdropABI, 'addAirdropMerkleRoot', TMode> & {
        abi?: never
        functionName?: 'addAirdropMerkleRoot'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'addAirdropMerkleRoot', TMode>({
    abi: airdropABI,
    functionName: 'addAirdropMerkleRoot',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"claimAirdrop"`.
 */
export function useAirdropClaimAirdrop<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'claimAirdrop'>['request']['abi'],
        'claimAirdrop',
        TMode
      > & { functionName?: 'claimAirdrop' }
    : UseContractWriteConfig<typeof airdropABI, 'claimAirdrop', TMode> & {
        abi?: never
        functionName?: 'claimAirdrop'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'claimAirdrop', TMode>({
    abi: airdropABI,
    functionName: 'claimAirdrop',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"claimAirdropBatch"`.
 */
export function useAirdropClaimAirdropBatch<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'claimAirdropBatch'>['request']['abi'],
        'claimAirdropBatch',
        TMode
      > & { functionName?: 'claimAirdropBatch' }
    : UseContractWriteConfig<typeof airdropABI, 'claimAirdropBatch', TMode> & {
        abi?: never
        functionName?: 'claimAirdropBatch'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'claimAirdropBatch', TMode>({
    abi: airdropABI,
    functionName: 'claimAirdropBatch',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"grantRole"`.
 */
export function useAirdropGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'grantRole'>['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof airdropABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'grantRole', TMode>({
    abi: airdropABI,
    functionName: 'grantRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"initialize"`.
 */
export function useAirdropInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof airdropABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'initialize', TMode>({
    abi: airdropABI,
    functionName: 'initialize',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"pause"`.
 */
export function useAirdropPause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'pause'>['request']['abi'],
        'pause',
        TMode
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<typeof airdropABI, 'pause', TMode> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'pause', TMode>({
    abi: airdropABI,
    functionName: 'pause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useAirdropRenounceRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'renounceRole'>['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof airdropABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'renounceRole', TMode>({
    abi: airdropABI,
    functionName: 'renounceRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useAirdropRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'revokeRole'>['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof airdropABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'revokeRole', TMode>({
    abi: airdropABI,
    functionName: 'revokeRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"setMaxBatchSize"`.
 */
export function useAirdropSetMaxBatchSize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'setMaxBatchSize'>['request']['abi'],
        'setMaxBatchSize',
        TMode
      > & { functionName?: 'setMaxBatchSize' }
    : UseContractWriteConfig<typeof airdropABI, 'setMaxBatchSize', TMode> & {
        abi?: never
        functionName?: 'setMaxBatchSize'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'setMaxBatchSize', TMode>({
    abi: airdropABI,
    functionName: 'setMaxBatchSize',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"setRouterContract"`.
 */
export function useAirdropSetRouterContract<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'setRouterContract'>['request']['abi'],
        'setRouterContract',
        TMode
      > & { functionName?: 'setRouterContract' }
    : UseContractWriteConfig<typeof airdropABI, 'setRouterContract', TMode> & {
        abi?: never
        functionName?: 'setRouterContract'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'setRouterContract', TMode>({
    abi: airdropABI,
    functionName: 'setRouterContract',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"setStakeTogether"`.
 */
export function useAirdropSetStakeTogether<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'setStakeTogether'>['request']['abi'],
        'setStakeTogether',
        TMode
      > & { functionName?: 'setStakeTogether' }
    : UseContractWriteConfig<typeof airdropABI, 'setStakeTogether', TMode> & {
        abi?: never
        functionName?: 'setStakeTogether'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'setStakeTogether', TMode>({
    abi: airdropABI,
    functionName: 'setStakeTogether',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"unpause"`.
 */
export function useAirdropUnpause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'unpause'>['request']['abi'],
        'unpause',
        TMode
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<typeof airdropABI, 'unpause', TMode> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'unpause', TMode>({
    abi: airdropABI,
    functionName: 'unpause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useAirdropUpgradeTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof airdropABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'upgradeTo', TMode>({
    abi: airdropABI,
    functionName: 'upgradeTo',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useAirdropUpgradeToAndCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof airdropABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof airdropABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any
) {
  return useContractWrite<typeof airdropABI, 'upgradeToAndCall', TMode>({
    abi: airdropABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__.
 */
export function usePrepareAirdropWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof airdropABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: airdropABI, ...config } as UsePrepareContractWriteConfig<
    typeof airdropABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"addAirdropMerkleRoot"`.
 */
export function usePrepareAirdropAddAirdropMerkleRoot(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropABI, 'addAirdropMerkleRoot'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'addAirdropMerkleRoot',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'addAirdropMerkleRoot'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"claimAirdrop"`.
 */
export function usePrepareAirdropClaimAirdrop(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropABI, 'claimAirdrop'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'claimAirdrop',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'claimAirdrop'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"claimAirdropBatch"`.
 */
export function usePrepareAirdropClaimAirdropBatch(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropABI, 'claimAirdropBatch'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'claimAirdropBatch',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'claimAirdropBatch'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareAirdropGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'grantRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareAirdropInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'initialize',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareAirdropPause(
  config: Omit<UsePrepareContractWriteConfig<typeof airdropABI, 'pause'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'pause',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareAirdropRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'renounceRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareAirdropRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'revokeRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"setMaxBatchSize"`.
 */
export function usePrepareAirdropSetMaxBatchSize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropABI, 'setMaxBatchSize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'setMaxBatchSize',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'setMaxBatchSize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"setRouterContract"`.
 */
export function usePrepareAirdropSetRouterContract(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropABI, 'setRouterContract'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'setRouterContract',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'setRouterContract'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"setStakeTogether"`.
 */
export function usePrepareAirdropSetStakeTogether(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropABI, 'setStakeTogether'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'setStakeTogether',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'setStakeTogether'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareAirdropUnpause(
  config: Omit<UsePrepareContractWriteConfig<typeof airdropABI, 'unpause'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'unpause',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'unpause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareAirdropUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'upgradeTo',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareAirdropUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__.
 */
export function useAirdropEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof airdropABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, ...config } as UseContractEventConfig<
    typeof airdropABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"AddAirdropMerkleRoot"`.
 */
export function useAirdropAddAirdropMerkleRootEvent(
  config: Omit<
    UseContractEventConfig<typeof airdropABI, 'AddAirdropMerkleRoot'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: airdropABI,
    eventName: 'AddAirdropMerkleRoot',
    ...config
  } as UseContractEventConfig<typeof airdropABI, 'AddAirdropMerkleRoot'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"AddMerkleRoots"`.
 */
export function useAirdropAddMerkleRootsEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'AddMerkleRoots'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, eventName: 'AddMerkleRoots', ...config } as UseContractEventConfig<
    typeof airdropABI,
    'AddMerkleRoots'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useAirdropAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'AdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, eventName: 'AdminChanged', ...config } as UseContractEventConfig<
    typeof airdropABI,
    'AdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useAirdropBeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'BeaconUpgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, eventName: 'BeaconUpgraded', ...config } as UseContractEventConfig<
    typeof airdropABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"ClaimAirdrop"`.
 */
export function useAirdropClaimAirdropEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'ClaimAirdrop'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, eventName: 'ClaimAirdrop', ...config } as UseContractEventConfig<
    typeof airdropABI,
    'ClaimAirdrop'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"ClaimAirdropBatch"`.
 */
export function useAirdropClaimAirdropBatchEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'ClaimAirdropBatch'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: airdropABI,
    eventName: 'ClaimAirdropBatch',
    ...config
  } as UseContractEventConfig<typeof airdropABI, 'ClaimAirdropBatch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"ClaimRewards"`.
 */
export function useAirdropClaimRewardsEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'ClaimRewards'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, eventName: 'ClaimRewards', ...config } as UseContractEventConfig<
    typeof airdropABI,
    'ClaimRewards'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"ClaimRewardsBatch"`.
 */
export function useAirdropClaimRewardsBatchEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'ClaimRewardsBatch'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: airdropABI,
    eventName: 'ClaimRewardsBatch',
    ...config
  } as UseContractEventConfig<typeof airdropABI, 'ClaimRewardsBatch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"FallbackEther"`.
 */
export function useAirdropFallbackEtherEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'FallbackEther'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, eventName: 'FallbackEther', ...config } as UseContractEventConfig<
    typeof airdropABI,
    'FallbackEther'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"Initialized"`.
 */
export function useAirdropInitializedEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof airdropABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"Paused"`.
 */
export function useAirdropPausedEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof airdropABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"ReceiveEther"`.
 */
export function useAirdropReceiveEtherEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'ReceiveEther'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, eventName: 'ReceiveEther', ...config } as UseContractEventConfig<
    typeof airdropABI,
    'ReceiveEther'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useAirdropRoleAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'RoleAdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: airdropABI,
    eventName: 'RoleAdminChanged',
    ...config
  } as UseContractEventConfig<typeof airdropABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useAirdropRoleGrantedEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'RoleGranted'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, eventName: 'RoleGranted', ...config } as UseContractEventConfig<
    typeof airdropABI,
    'RoleGranted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useAirdropRoleRevokedEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'RoleRevoked'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, eventName: 'RoleRevoked', ...config } as UseContractEventConfig<
    typeof airdropABI,
    'RoleRevoked'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"SetMaxBatchSize"`.
 */
export function useAirdropSetMaxBatchSizeEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'SetMaxBatchSize'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: airdropABI,
    eventName: 'SetMaxBatchSize',
    ...config
  } as UseContractEventConfig<typeof airdropABI, 'SetMaxBatchSize'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"SetRouterContract"`.
 */
export function useAirdropSetRouterContractEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'SetRouterContract'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: airdropABI,
    eventName: 'SetRouterContract',
    ...config
  } as UseContractEventConfig<typeof airdropABI, 'SetRouterContract'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"SetStakeTogether"`.
 */
export function useAirdropSetStakeTogetherEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'SetStakeTogether'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: airdropABI,
    eventName: 'SetStakeTogether',
    ...config
  } as UseContractEventConfig<typeof airdropABI, 'SetStakeTogether'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useAirdropUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, eventName: 'Unpaused', ...config } as UseContractEventConfig<
    typeof airdropABI,
    'Unpaused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useAirdropUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof airdropABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: airdropABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof airdropABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__.
 */
export function useFeesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof feesABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: feesABI, ...config } as UseContractReadConfig<
    typeof feesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"ADMIN_ROLE"`.
 */
export function useFeesAdminRole<
  TFunctionName extends 'ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof feesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: feesABI, functionName: 'ADMIN_ROLE', ...config } as UseContractReadConfig<
    typeof feesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useFeesDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof feesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: feesABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config
  } as UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"UPGRADER_ROLE"`.
 */
export function useFeesUpgraderRole<
  TFunctionName extends 'UPGRADER_ROLE',
  TSelectData = ReadContractResult<typeof feesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: feesABI, functionName: 'UPGRADER_ROLE', ...config } as UseContractReadConfig<
    typeof feesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"distributeFeePercentage"`.
 */
export function useFeesDistributeFeePercentage<
  TFunctionName extends 'distributeFeePercentage',
  TSelectData = ReadContractResult<typeof feesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: feesABI,
    functionName: 'distributeFeePercentage',
    ...config
  } as UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"estimateDynamicFeePercentage"`.
 */
export function useFeesEstimateDynamicFeePercentage<
  TFunctionName extends 'estimateDynamicFeePercentage',
  TSelectData = ReadContractResult<typeof feesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: feesABI,
    functionName: 'estimateDynamicFeePercentage',
    ...config
  } as UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"estimateFeeFixed"`.
 */
export function useFeesEstimateFeeFixed<
  TFunctionName extends 'estimateFeeFixed',
  TSelectData = ReadContractResult<typeof feesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: feesABI, functionName: 'estimateFeeFixed', ...config } as UseContractReadConfig<
    typeof feesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"estimateFeePercentage"`.
 */
export function useFeesEstimateFeePercentage<
  TFunctionName extends 'estimateFeePercentage',
  TSelectData = ReadContractResult<typeof feesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: feesABI,
    functionName: 'estimateFeePercentage',
    ...config
  } as UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"fees"`.
 */
export function useFeesFees<
  TFunctionName extends 'fees',
  TSelectData = ReadContractResult<typeof feesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: feesABI, functionName: 'fees', ...config } as UseContractReadConfig<
    typeof feesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"getFee"`.
 */
export function useFeesGetFee<
  TFunctionName extends 'getFee',
  TSelectData = ReadContractResult<typeof feesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: feesABI, functionName: 'getFee', ...config } as UseContractReadConfig<
    typeof feesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"getFeeAddress"`.
 */
export function useFeesGetFeeAddress<
  TFunctionName extends 'getFeeAddress',
  TSelectData = ReadContractResult<typeof feesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: feesABI, functionName: 'getFeeAddress', ...config } as UseContractReadConfig<
    typeof feesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"getFeeAllocation"`.
 */
export function useFeesGetFeeAllocation<
  TFunctionName extends 'getFeeAllocation',
  TSelectData = ReadContractResult<typeof feesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: feesABI, functionName: 'getFeeAllocation', ...config } as UseContractReadConfig<
    typeof feesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"getFeeRolesAddresses"`.
 */
export function useFeesGetFeeRolesAddresses<
  TFunctionName extends 'getFeeRolesAddresses',
  TSelectData = ReadContractResult<typeof feesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: feesABI,
    functionName: 'getFeeRolesAddresses',
    ...config
  } as UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"getFeesRoles"`.
 */
export function useFeesGetFeesRoles<
  TFunctionName extends 'getFeesRoles',
  TSelectData = ReadContractResult<typeof feesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: feesABI, functionName: 'getFeesRoles', ...config } as UseContractReadConfig<
    typeof feesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useFeesGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof feesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: feesABI, functionName: 'getRoleAdmin', ...config } as UseContractReadConfig<
    typeof feesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"hasRole"`.
 */
export function useFeesHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof feesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: feesABI, functionName: 'hasRole', ...config } as UseContractReadConfig<
    typeof feesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"liquidityContract"`.
 */
export function useFeesLiquidityContract<
  TFunctionName extends 'liquidityContract',
  TSelectData = ReadContractResult<typeof feesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: feesABI,
    functionName: 'liquidityContract',
    ...config
  } as UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"maxFeeIncrease"`.
 */
export function useFeesMaxFeeIncrease<
  TFunctionName extends 'maxFeeIncrease',
  TSelectData = ReadContractResult<typeof feesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: feesABI, functionName: 'maxFeeIncrease', ...config } as UseContractReadConfig<
    typeof feesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"paused"`.
 */
export function useFeesPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof feesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: feesABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof feesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useFeesProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof feesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: feesABI, functionName: 'proxiableUUID', ...config } as UseContractReadConfig<
    typeof feesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"roleAddresses"`.
 */
export function useFeesRoleAddresses<
  TFunctionName extends 'roleAddresses',
  TSelectData = ReadContractResult<typeof feesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: feesABI, functionName: 'roleAddresses', ...config } as UseContractReadConfig<
    typeof feesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"stakeTogether"`.
 */
export function useFeesStakeTogether<
  TFunctionName extends 'stakeTogether',
  TSelectData = ReadContractResult<typeof feesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: feesABI, functionName: 'stakeTogether', ...config } as UseContractReadConfig<
    typeof feesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useFeesSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof feesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: feesABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__.
 */
export function useFeesWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof feesABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof feesABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof feesABI, TFunctionName, TMode>({ abi: feesABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"grantRole"`.
 */
export function useFeesGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof feesABI, 'grantRole'>['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof feesABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<typeof feesABI, 'grantRole', TMode>({
    abi: feesABI,
    functionName: 'grantRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"initialize"`.
 */
export function useFeesInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof feesABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof feesABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof feesABI, 'initialize', TMode>({
    abi: feesABI,
    functionName: 'initialize',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"pause"`.
 */
export function useFeesPause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof feesABI, 'pause'>['request']['abi'],
        'pause',
        TMode
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<typeof feesABI, 'pause', TMode> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any
) {
  return useContractWrite<typeof feesABI, 'pause', TMode>({
    abi: feesABI,
    functionName: 'pause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useFeesRenounceRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof feesABI, 'renounceRole'>['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof feesABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<typeof feesABI, 'renounceRole', TMode>({
    abi: feesABI,
    functionName: 'renounceRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useFeesRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof feesABI, 'revokeRole'>['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof feesABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<typeof feesABI, 'revokeRole', TMode>({
    abi: feesABI,
    functionName: 'revokeRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"setFeeAddress"`.
 */
export function useFeesSetFeeAddress<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof feesABI, 'setFeeAddress'>['request']['abi'],
        'setFeeAddress',
        TMode
      > & { functionName?: 'setFeeAddress' }
    : UseContractWriteConfig<typeof feesABI, 'setFeeAddress', TMode> & {
        abi?: never
        functionName?: 'setFeeAddress'
      } = {} as any
) {
  return useContractWrite<typeof feesABI, 'setFeeAddress', TMode>({
    abi: feesABI,
    functionName: 'setFeeAddress',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"setFeeAllocation"`.
 */
export function useFeesSetFeeAllocation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof feesABI, 'setFeeAllocation'>['request']['abi'],
        'setFeeAllocation',
        TMode
      > & { functionName?: 'setFeeAllocation' }
    : UseContractWriteConfig<typeof feesABI, 'setFeeAllocation', TMode> & {
        abi?: never
        functionName?: 'setFeeAllocation'
      } = {} as any
) {
  return useContractWrite<typeof feesABI, 'setFeeAllocation', TMode>({
    abi: feesABI,
    functionName: 'setFeeAllocation',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"setFeeValue"`.
 */
export function useFeesSetFeeValue<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof feesABI, 'setFeeValue'>['request']['abi'],
        'setFeeValue',
        TMode
      > & { functionName?: 'setFeeValue' }
    : UseContractWriteConfig<typeof feesABI, 'setFeeValue', TMode> & {
        abi?: never
        functionName?: 'setFeeValue'
      } = {} as any
) {
  return useContractWrite<typeof feesABI, 'setFeeValue', TMode>({
    abi: feesABI,
    functionName: 'setFeeValue',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"setLiquidityContract"`.
 */
export function useFeesSetLiquidityContract<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof feesABI, 'setLiquidityContract'>['request']['abi'],
        'setLiquidityContract',
        TMode
      > & { functionName?: 'setLiquidityContract' }
    : UseContractWriteConfig<typeof feesABI, 'setLiquidityContract', TMode> & {
        abi?: never
        functionName?: 'setLiquidityContract'
      } = {} as any
) {
  return useContractWrite<typeof feesABI, 'setLiquidityContract', TMode>({
    abi: feesABI,
    functionName: 'setLiquidityContract',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"setMaxFeeIncrease"`.
 */
export function useFeesSetMaxFeeIncrease<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof feesABI, 'setMaxFeeIncrease'>['request']['abi'],
        'setMaxFeeIncrease',
        TMode
      > & { functionName?: 'setMaxFeeIncrease' }
    : UseContractWriteConfig<typeof feesABI, 'setMaxFeeIncrease', TMode> & {
        abi?: never
        functionName?: 'setMaxFeeIncrease'
      } = {} as any
) {
  return useContractWrite<typeof feesABI, 'setMaxFeeIncrease', TMode>({
    abi: feesABI,
    functionName: 'setMaxFeeIncrease',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"setStakeTogether"`.
 */
export function useFeesSetStakeTogether<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof feesABI, 'setStakeTogether'>['request']['abi'],
        'setStakeTogether',
        TMode
      > & { functionName?: 'setStakeTogether' }
    : UseContractWriteConfig<typeof feesABI, 'setStakeTogether', TMode> & {
        abi?: never
        functionName?: 'setStakeTogether'
      } = {} as any
) {
  return useContractWrite<typeof feesABI, 'setStakeTogether', TMode>({
    abi: feesABI,
    functionName: 'setStakeTogether',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"unpause"`.
 */
export function useFeesUnpause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof feesABI, 'unpause'>['request']['abi'],
        'unpause',
        TMode
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<typeof feesABI, 'unpause', TMode> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any
) {
  return useContractWrite<typeof feesABI, 'unpause', TMode>({
    abi: feesABI,
    functionName: 'unpause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useFeesUpgradeTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof feesABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof feesABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any
) {
  return useContractWrite<typeof feesABI, 'upgradeTo', TMode>({
    abi: feesABI,
    functionName: 'upgradeTo',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useFeesUpgradeToAndCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof feesABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof feesABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any
) {
  return useContractWrite<typeof feesABI, 'upgradeToAndCall', TMode>({
    abi: feesABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__.
 */
export function usePrepareFeesWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof feesABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: feesABI, ...config } as UsePrepareContractWriteConfig<
    typeof feesABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareFeesGrantRole(
  config: Omit<UsePrepareContractWriteConfig<typeof feesABI, 'grantRole'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'grantRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof feesABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareFeesInitialize(
  config: Omit<UsePrepareContractWriteConfig<typeof feesABI, 'initialize'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'initialize',
    ...config
  } as UsePrepareContractWriteConfig<typeof feesABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareFeesPause(
  config: Omit<UsePrepareContractWriteConfig<typeof feesABI, 'pause'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'pause',
    ...config
  } as UsePrepareContractWriteConfig<typeof feesABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareFeesRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feesABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'renounceRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof feesABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareFeesRevokeRole(
  config: Omit<UsePrepareContractWriteConfig<typeof feesABI, 'revokeRole'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'revokeRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof feesABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"setFeeAddress"`.
 */
export function usePrepareFeesSetFeeAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feesABI, 'setFeeAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'setFeeAddress',
    ...config
  } as UsePrepareContractWriteConfig<typeof feesABI, 'setFeeAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"setFeeAllocation"`.
 */
export function usePrepareFeesSetFeeAllocation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feesABI, 'setFeeAllocation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'setFeeAllocation',
    ...config
  } as UsePrepareContractWriteConfig<typeof feesABI, 'setFeeAllocation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"setFeeValue"`.
 */
export function usePrepareFeesSetFeeValue(
  config: Omit<UsePrepareContractWriteConfig<typeof feesABI, 'setFeeValue'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'setFeeValue',
    ...config
  } as UsePrepareContractWriteConfig<typeof feesABI, 'setFeeValue'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"setLiquidityContract"`.
 */
export function usePrepareFeesSetLiquidityContract(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feesABI, 'setLiquidityContract'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'setLiquidityContract',
    ...config
  } as UsePrepareContractWriteConfig<typeof feesABI, 'setLiquidityContract'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"setMaxFeeIncrease"`.
 */
export function usePrepareFeesSetMaxFeeIncrease(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feesABI, 'setMaxFeeIncrease'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'setMaxFeeIncrease',
    ...config
  } as UsePrepareContractWriteConfig<typeof feesABI, 'setMaxFeeIncrease'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"setStakeTogether"`.
 */
export function usePrepareFeesSetStakeTogether(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feesABI, 'setStakeTogether'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'setStakeTogether',
    ...config
  } as UsePrepareContractWriteConfig<typeof feesABI, 'setStakeTogether'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareFeesUnpause(
  config: Omit<UsePrepareContractWriteConfig<typeof feesABI, 'unpause'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'unpause',
    ...config
  } as UsePrepareContractWriteConfig<typeof feesABI, 'unpause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareFeesUpgradeTo(
  config: Omit<UsePrepareContractWriteConfig<typeof feesABI, 'upgradeTo'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'upgradeTo',
    ...config
  } as UsePrepareContractWriteConfig<typeof feesABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareFeesUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feesABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as UsePrepareContractWriteConfig<typeof feesABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__.
 */
export function useFeesEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof feesABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: feesABI, ...config } as UseContractEventConfig<typeof feesABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useFeesAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof feesABI, 'AdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: feesABI, eventName: 'AdminChanged', ...config } as UseContractEventConfig<
    typeof feesABI,
    'AdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useFeesBeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof feesABI, 'BeaconUpgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: feesABI, eventName: 'BeaconUpgraded', ...config } as UseContractEventConfig<
    typeof feesABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"FallbackEther"`.
 */
export function useFeesFallbackEtherEvent(
  config: Omit<UseContractEventConfig<typeof feesABI, 'FallbackEther'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: feesABI, eventName: 'FallbackEther', ...config } as UseContractEventConfig<
    typeof feesABI,
    'FallbackEther'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"Initialized"`.
 */
export function useFeesInitializedEvent(
  config: Omit<UseContractEventConfig<typeof feesABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: feesABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof feesABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"Paused"`.
 */
export function useFeesPausedEvent(
  config: Omit<UseContractEventConfig<typeof feesABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: feesABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof feesABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"ReceiveEther"`.
 */
export function useFeesReceiveEtherEvent(
  config: Omit<UseContractEventConfig<typeof feesABI, 'ReceiveEther'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: feesABI, eventName: 'ReceiveEther', ...config } as UseContractEventConfig<
    typeof feesABI,
    'ReceiveEther'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useFeesRoleAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof feesABI, 'RoleAdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: feesABI, eventName: 'RoleAdminChanged', ...config } as UseContractEventConfig<
    typeof feesABI,
    'RoleAdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useFeesRoleGrantedEvent(
  config: Omit<UseContractEventConfig<typeof feesABI, 'RoleGranted'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: feesABI, eventName: 'RoleGranted', ...config } as UseContractEventConfig<
    typeof feesABI,
    'RoleGranted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useFeesRoleRevokedEvent(
  config: Omit<UseContractEventConfig<typeof feesABI, 'RoleRevoked'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: feesABI, eventName: 'RoleRevoked', ...config } as UseContractEventConfig<
    typeof feesABI,
    'RoleRevoked'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"SetFeeAddress"`.
 */
export function useFeesSetFeeAddressEvent(
  config: Omit<UseContractEventConfig<typeof feesABI, 'SetFeeAddress'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: feesABI, eventName: 'SetFeeAddress', ...config } as UseContractEventConfig<
    typeof feesABI,
    'SetFeeAddress'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"SetFeeAllocation"`.
 */
export function useFeesSetFeeAllocationEvent(
  config: Omit<UseContractEventConfig<typeof feesABI, 'SetFeeAllocation'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: feesABI, eventName: 'SetFeeAllocation', ...config } as UseContractEventConfig<
    typeof feesABI,
    'SetFeeAllocation'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"SetFeeValue"`.
 */
export function useFeesSetFeeValueEvent(
  config: Omit<UseContractEventConfig<typeof feesABI, 'SetFeeValue'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: feesABI, eventName: 'SetFeeValue', ...config } as UseContractEventConfig<
    typeof feesABI,
    'SetFeeValue'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"SetLiquidityContract"`.
 */
export function useFeesSetLiquidityContractEvent(
  config: Omit<UseContractEventConfig<typeof feesABI, 'SetLiquidityContract'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: feesABI,
    eventName: 'SetLiquidityContract',
    ...config
  } as UseContractEventConfig<typeof feesABI, 'SetLiquidityContract'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"SetMaxFeeIncrease"`.
 */
export function useFeesSetMaxFeeIncreaseEvent(
  config: Omit<UseContractEventConfig<typeof feesABI, 'SetMaxFeeIncrease'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: feesABI, eventName: 'SetMaxFeeIncrease', ...config } as UseContractEventConfig<
    typeof feesABI,
    'SetMaxFeeIncrease'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"SetRouterContract"`.
 */
export function useFeesSetRouterContractEvent(
  config: Omit<UseContractEventConfig<typeof feesABI, 'SetRouterContract'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: feesABI, eventName: 'SetRouterContract', ...config } as UseContractEventConfig<
    typeof feesABI,
    'SetRouterContract'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"SetStakeTogether"`.
 */
export function useFeesSetStakeTogetherEvent(
  config: Omit<UseContractEventConfig<typeof feesABI, 'SetStakeTogether'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: feesABI, eventName: 'SetStakeTogether', ...config } as UseContractEventConfig<
    typeof feesABI,
    'SetStakeTogether'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useFeesUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof feesABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: feesABI, eventName: 'Unpaused', ...config } as UseContractEventConfig<
    typeof feesABI,
    'Unpaused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useFeesUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof feesABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: feesABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof feesABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__.
 */
export function useLiquidityRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: liquidityABI, ...config } as UseContractReadConfig<
    typeof liquidityABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"ADMIN_ROLE"`.
 */
export function useLiquidityAdminRole<
  TFunctionName extends 'ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: liquidityABI, functionName: 'ADMIN_ROLE', ...config } as UseContractReadConfig<
    typeof liquidityABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useLiquidityDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: liquidityABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config
  } as UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useLiquidityDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: liquidityABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config
  } as UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"UPGRADER_ROLE"`.
 */
export function useLiquidityUpgraderRole<
  TFunctionName extends 'UPGRADER_ROLE',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: liquidityABI,
    functionName: 'UPGRADER_ROLE',
    ...config
  } as UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"allowance"`.
 */
export function useLiquidityAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: liquidityABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof liquidityABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useLiquidityBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: liquidityABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof liquidityABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"blocksPerDay"`.
 */
export function useLiquidityBlocksPerDay<
  TFunctionName extends 'blocksPerDay',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: liquidityABI,
    functionName: 'blocksPerDay',
    ...config
  } as UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"decimals"`.
 */
export function useLiquidityDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: liquidityABI, functionName: 'decimals', ...config } as UseContractReadConfig<
    typeof liquidityABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"depositLimit"`.
 */
export function useLiquidityDepositLimit<
  TFunctionName extends 'depositLimit',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: liquidityABI,
    functionName: 'depositLimit',
    ...config
  } as UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useLiquidityEip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: liquidityABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"enableDeposit"`.
 */
export function useLiquidityEnableDeposit<
  TFunctionName extends 'enableDeposit',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: liquidityABI,
    functionName: 'enableDeposit',
    ...config
  } as UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"enableLiquidity"`.
 */
export function useLiquidityEnableLiquidity<
  TFunctionName extends 'enableLiquidity',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: liquidityABI,
    functionName: 'enableLiquidity',
    ...config
  } as UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"feesContract"`.
 */
export function useLiquidityFeesContract<
  TFunctionName extends 'feesContract',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: liquidityABI,
    functionName: 'feesContract',
    ...config
  } as UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useLiquidityGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: liquidityABI,
    functionName: 'getRoleAdmin',
    ...config
  } as UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"hasRole"`.
 */
export function useLiquidityHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: liquidityABI, functionName: 'hasRole', ...config } as UseContractReadConfig<
    typeof liquidityABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"lastResetBlock"`.
 */
export function useLiquidityLastResetBlock<
  TFunctionName extends 'lastResetBlock',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: liquidityABI,
    functionName: 'lastResetBlock',
    ...config
  } as UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"minDepositAmount"`.
 */
export function useLiquidityMinDepositAmount<
  TFunctionName extends 'minDepositAmount',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: liquidityABI,
    functionName: 'minDepositAmount',
    ...config
  } as UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"name"`.
 */
export function useLiquidityName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: liquidityABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof liquidityABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"nonces"`.
 */
export function useLiquidityNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: liquidityABI, functionName: 'nonces', ...config } as UseContractReadConfig<
    typeof liquidityABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"paused"`.
 */
export function useLiquidityPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: liquidityABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof liquidityABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"pooledEthByShares"`.
 */
export function useLiquidityPooledEthByShares<
  TFunctionName extends 'pooledEthByShares',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: liquidityABI,
    functionName: 'pooledEthByShares',
    ...config
  } as UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useLiquidityProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: liquidityABI,
    functionName: 'proxiableUUID',
    ...config
  } as UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"routerContract"`.
 */
export function useLiquidityRouterContract<
  TFunctionName extends 'routerContract',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: liquidityABI,
    functionName: 'routerContract',
    ...config
  } as UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"sharesByPooledEth"`.
 */
export function useLiquiditySharesByPooledEth<
  TFunctionName extends 'sharesByPooledEth',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: liquidityABI,
    functionName: 'sharesByPooledEth',
    ...config
  } as UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"sharesOf"`.
 */
export function useLiquiditySharesOf<
  TFunctionName extends 'sharesOf',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: liquidityABI, functionName: 'sharesOf', ...config } as UseContractReadConfig<
    typeof liquidityABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"stakeTogether"`.
 */
export function useLiquidityStakeTogether<
  TFunctionName extends 'stakeTogether',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: liquidityABI,
    functionName: 'stakeTogether',
    ...config
  } as UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useLiquiditySupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: liquidityABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"symbol"`.
 */
export function useLiquiditySymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: liquidityABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof liquidityABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"totalDeposited"`.
 */
export function useLiquidityTotalDeposited<
  TFunctionName extends 'totalDeposited',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: liquidityABI,
    functionName: 'totalDeposited',
    ...config
  } as UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"totalLiquidityWithdrawn"`.
 */
export function useLiquidityTotalLiquidityWithdrawn<
  TFunctionName extends 'totalLiquidityWithdrawn',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: liquidityABI,
    functionName: 'totalLiquidityWithdrawn',
    ...config
  } as UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"totalPooledEther"`.
 */
export function useLiquidityTotalPooledEther<
  TFunctionName extends 'totalPooledEther',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: liquidityABI,
    functionName: 'totalPooledEther',
    ...config
  } as UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useLiquidityTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: liquidityABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof liquidityABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"totalWithdrawalsShares"`.
 */
export function useLiquidityTotalWithdrawalsShares<
  TFunctionName extends 'totalWithdrawalsShares',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: liquidityABI,
    functionName: 'totalWithdrawalsShares',
    ...config
  } as UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"totalWithdrawn"`.
 */
export function useLiquidityTotalWithdrawn<
  TFunctionName extends 'totalWithdrawn',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: liquidityABI,
    functionName: 'totalWithdrawn',
    ...config
  } as UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"withdrawalLimit"`.
 */
export function useLiquidityWithdrawalLimit<
  TFunctionName extends 'withdrawalLimit',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: liquidityABI,
    functionName: 'withdrawalLimit',
    ...config
  } as UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"withdrawalLiquidityLimit"`.
 */
export function useLiquidityWithdrawalLiquidityLimit<
  TFunctionName extends 'withdrawalLiquidityLimit',
  TSelectData = ReadContractResult<typeof liquidityABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: liquidityABI,
    functionName: 'withdrawalLiquidityLimit',
    ...config
  } as UseContractReadConfig<typeof liquidityABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__.
 */
export function useLiquidityWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof liquidityABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, TFunctionName, TMode>({ abi: liquidityABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"approve"`.
 */
export function useLiquidityApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof liquidityABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'approve', TMode>({
    abi: liquidityABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"bootstrap"`.
 */
export function useLiquidityBootstrap<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'bootstrap'>['request']['abi'],
        'bootstrap',
        TMode
      > & { functionName?: 'bootstrap' }
    : UseContractWriteConfig<typeof liquidityABI, 'bootstrap', TMode> & {
        abi?: never
        functionName?: 'bootstrap'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'bootstrap', TMode>({
    abi: liquidityABI,
    functionName: 'bootstrap',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"burn"`.
 */
export function useLiquidityBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'burn'>['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof liquidityABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'burn', TMode>({
    abi: liquidityABI,
    functionName: 'burn',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useLiquidityBurnFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'burnFrom'>['request']['abi'],
        'burnFrom',
        TMode
      > & { functionName?: 'burnFrom' }
    : UseContractWriteConfig<typeof liquidityABI, 'burnFrom', TMode> & {
        abi?: never
        functionName?: 'burnFrom'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'burnFrom', TMode>({
    abi: liquidityABI,
    functionName: 'burnFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useLiquidityDecreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'decreaseAllowance'>['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof liquidityABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'decreaseAllowance', TMode>({
    abi: liquidityABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"depositPool"`.
 */
export function useLiquidityDepositPool<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'depositPool'>['request']['abi'],
        'depositPool',
        TMode
      > & { functionName?: 'depositPool' }
    : UseContractWriteConfig<typeof liquidityABI, 'depositPool', TMode> & {
        abi?: never
        functionName?: 'depositPool'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'depositPool', TMode>({
    abi: liquidityABI,
    functionName: 'depositPool',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"grantRole"`.
 */
export function useLiquidityGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'grantRole'>['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof liquidityABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'grantRole', TMode>({
    abi: liquidityABI,
    functionName: 'grantRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useLiquidityIncreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'increaseAllowance'>['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof liquidityABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'increaseAllowance', TMode>({
    abi: liquidityABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"initialize"`.
 */
export function useLiquidityInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof liquidityABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'initialize', TMode>({
    abi: liquidityABI,
    functionName: 'initialize',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"pause"`.
 */
export function useLiquidityPause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'pause'>['request']['abi'],
        'pause',
        TMode
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<typeof liquidityABI, 'pause', TMode> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'pause', TMode>({
    abi: liquidityABI,
    functionName: 'pause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"permit"`.
 */
export function useLiquidityPermit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'permit'>['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof liquidityABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'permit', TMode>({
    abi: liquidityABI,
    functionName: 'permit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useLiquidityRenounceRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'renounceRole'>['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof liquidityABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'renounceRole', TMode>({
    abi: liquidityABI,
    functionName: 'renounceRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useLiquidityRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'revokeRole'>['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof liquidityABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'revokeRole', TMode>({
    abi: liquidityABI,
    functionName: 'revokeRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"setBlocksInterval"`.
 */
export function useLiquiditySetBlocksInterval<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'setBlocksInterval'>['request']['abi'],
        'setBlocksInterval',
        TMode
      > & { functionName?: 'setBlocksInterval' }
    : UseContractWriteConfig<typeof liquidityABI, 'setBlocksInterval', TMode> & {
        abi?: never
        functionName?: 'setBlocksInterval'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'setBlocksInterval', TMode>({
    abi: liquidityABI,
    functionName: 'setBlocksInterval',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"setDepositLimit"`.
 */
export function useLiquiditySetDepositLimit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'setDepositLimit'>['request']['abi'],
        'setDepositLimit',
        TMode
      > & { functionName?: 'setDepositLimit' }
    : UseContractWriteConfig<typeof liquidityABI, 'setDepositLimit', TMode> & {
        abi?: never
        functionName?: 'setDepositLimit'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'setDepositLimit', TMode>({
    abi: liquidityABI,
    functionName: 'setDepositLimit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"setEnableDeposit"`.
 */
export function useLiquiditySetEnableDeposit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'setEnableDeposit'>['request']['abi'],
        'setEnableDeposit',
        TMode
      > & { functionName?: 'setEnableDeposit' }
    : UseContractWriteConfig<typeof liquidityABI, 'setEnableDeposit', TMode> & {
        abi?: never
        functionName?: 'setEnableDeposit'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'setEnableDeposit', TMode>({
    abi: liquidityABI,
    functionName: 'setEnableDeposit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"setEnableLiquidity"`.
 */
export function useLiquiditySetEnableLiquidity<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'setEnableLiquidity'>['request']['abi'],
        'setEnableLiquidity',
        TMode
      > & { functionName?: 'setEnableLiquidity' }
    : UseContractWriteConfig<typeof liquidityABI, 'setEnableLiquidity', TMode> & {
        abi?: never
        functionName?: 'setEnableLiquidity'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'setEnableLiquidity', TMode>({
    abi: liquidityABI,
    functionName: 'setEnableLiquidity',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"setFees"`.
 */
export function useLiquiditySetFees<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'setFees'>['request']['abi'],
        'setFees',
        TMode
      > & { functionName?: 'setFees' }
    : UseContractWriteConfig<typeof liquidityABI, 'setFees', TMode> & {
        abi?: never
        functionName?: 'setFees'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'setFees', TMode>({
    abi: liquidityABI,
    functionName: 'setFees',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"setMinDepositPoolAmount"`.
 */
export function useLiquiditySetMinDepositPoolAmount<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'setMinDepositPoolAmount'>['request']['abi'],
        'setMinDepositPoolAmount',
        TMode
      > & { functionName?: 'setMinDepositPoolAmount' }
    : UseContractWriteConfig<typeof liquidityABI, 'setMinDepositPoolAmount', TMode> & {
        abi?: never
        functionName?: 'setMinDepositPoolAmount'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'setMinDepositPoolAmount', TMode>({
    abi: liquidityABI,
    functionName: 'setMinDepositPoolAmount',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"setRouterContract"`.
 */
export function useLiquiditySetRouterContract<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'setRouterContract'>['request']['abi'],
        'setRouterContract',
        TMode
      > & { functionName?: 'setRouterContract' }
    : UseContractWriteConfig<typeof liquidityABI, 'setRouterContract', TMode> & {
        abi?: never
        functionName?: 'setRouterContract'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'setRouterContract', TMode>({
    abi: liquidityABI,
    functionName: 'setRouterContract',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"setStakeTogether"`.
 */
export function useLiquiditySetStakeTogether<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'setStakeTogether'>['request']['abi'],
        'setStakeTogether',
        TMode
      > & { functionName?: 'setStakeTogether' }
    : UseContractWriteConfig<typeof liquidityABI, 'setStakeTogether', TMode> & {
        abi?: never
        functionName?: 'setStakeTogether'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'setStakeTogether', TMode>({
    abi: liquidityABI,
    functionName: 'setStakeTogether',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"setWithdrawalLimit"`.
 */
export function useLiquiditySetWithdrawalLimit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'setWithdrawalLimit'>['request']['abi'],
        'setWithdrawalLimit',
        TMode
      > & { functionName?: 'setWithdrawalLimit' }
    : UseContractWriteConfig<typeof liquidityABI, 'setWithdrawalLimit', TMode> & {
        abi?: never
        functionName?: 'setWithdrawalLimit'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'setWithdrawalLimit', TMode>({
    abi: liquidityABI,
    functionName: 'setWithdrawalLimit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"setWithdrawalLiquidityLimit"`.
 */
export function useLiquiditySetWithdrawalLiquidityLimit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'setWithdrawalLiquidityLimit'>['request']['abi'],
        'setWithdrawalLiquidityLimit',
        TMode
      > & { functionName?: 'setWithdrawalLiquidityLimit' }
    : UseContractWriteConfig<typeof liquidityABI, 'setWithdrawalLiquidityLimit', TMode> & {
        abi?: never
        functionName?: 'setWithdrawalLiquidityLimit'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'setWithdrawalLiquidityLimit', TMode>({
    abi: liquidityABI,
    functionName: 'setWithdrawalLiquidityLimit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"supplyLiquidity"`.
 */
export function useLiquiditySupplyLiquidity<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'supplyLiquidity'>['request']['abi'],
        'supplyLiquidity',
        TMode
      > & { functionName?: 'supplyLiquidity' }
    : UseContractWriteConfig<typeof liquidityABI, 'supplyLiquidity', TMode> & {
        abi?: never
        functionName?: 'supplyLiquidity'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'supplyLiquidity', TMode>({
    abi: liquidityABI,
    functionName: 'supplyLiquidity',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"transfer"`.
 */
export function useLiquidityTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof liquidityABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'transfer', TMode>({
    abi: liquidityABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useLiquidityTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof liquidityABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'transferFrom', TMode>({
    abi: liquidityABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"transferShares"`.
 */
export function useLiquidityTransferShares<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'transferShares'>['request']['abi'],
        'transferShares',
        TMode
      > & { functionName?: 'transferShares' }
    : UseContractWriteConfig<typeof liquidityABI, 'transferShares', TMode> & {
        abi?: never
        functionName?: 'transferShares'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'transferShares', TMode>({
    abi: liquidityABI,
    functionName: 'transferShares',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"transferSharesFrom"`.
 */
export function useLiquidityTransferSharesFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'transferSharesFrom'>['request']['abi'],
        'transferSharesFrom',
        TMode
      > & { functionName?: 'transferSharesFrom' }
    : UseContractWriteConfig<typeof liquidityABI, 'transferSharesFrom', TMode> & {
        abi?: never
        functionName?: 'transferSharesFrom'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'transferSharesFrom', TMode>({
    abi: liquidityABI,
    functionName: 'transferSharesFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"unpause"`.
 */
export function useLiquidityUnpause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'unpause'>['request']['abi'],
        'unpause',
        TMode
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<typeof liquidityABI, 'unpause', TMode> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'unpause', TMode>({
    abi: liquidityABI,
    functionName: 'unpause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useLiquidityUpgradeTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof liquidityABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'upgradeTo', TMode>({
    abi: liquidityABI,
    functionName: 'upgradeTo',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useLiquidityUpgradeToAndCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof liquidityABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'upgradeToAndCall', TMode>({
    abi: liquidityABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"withdrawLiquidity"`.
 */
export function useLiquidityWithdrawLiquidity<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'withdrawLiquidity'>['request']['abi'],
        'withdrawLiquidity',
        TMode
      > & { functionName?: 'withdrawLiquidity' }
    : UseContractWriteConfig<typeof liquidityABI, 'withdrawLiquidity', TMode> & {
        abi?: never
        functionName?: 'withdrawLiquidity'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'withdrawLiquidity', TMode>({
    abi: liquidityABI,
    functionName: 'withdrawLiquidity',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"withdrawPool"`.
 */
export function useLiquidityWithdrawPool<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof liquidityABI, 'withdrawPool'>['request']['abi'],
        'withdrawPool',
        TMode
      > & { functionName?: 'withdrawPool' }
    : UseContractWriteConfig<typeof liquidityABI, 'withdrawPool', TMode> & {
        abi?: never
        functionName?: 'withdrawPool'
      } = {} as any
) {
  return useContractWrite<typeof liquidityABI, 'withdrawPool', TMode>({
    abi: liquidityABI,
    functionName: 'withdrawPool',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__.
 */
export function usePrepareLiquidityWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof liquidityABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: liquidityABI, ...config } as UsePrepareContractWriteConfig<
    typeof liquidityABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareLiquidityApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"bootstrap"`.
 */
export function usePrepareLiquidityBootstrap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'bootstrap'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'bootstrap',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'bootstrap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareLiquidityBurn(
  config: Omit<UsePrepareContractWriteConfig<typeof liquidityABI, 'burn'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'burn',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareLiquidityBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'burnFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'burnFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'burnFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareLiquidityDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"depositPool"`.
 */
export function usePrepareLiquidityDepositPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'depositPool'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'depositPool',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'depositPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareLiquidityGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'grantRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareLiquidityIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareLiquidityInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'initialize',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareLiquidityPause(
  config: Omit<UsePrepareContractWriteConfig<typeof liquidityABI, 'pause'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'pause',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareLiquidityPermit(
  config: Omit<UsePrepareContractWriteConfig<typeof liquidityABI, 'permit'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'permit',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareLiquidityRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'renounceRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareLiquidityRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'revokeRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"setBlocksInterval"`.
 */
export function usePrepareLiquiditySetBlocksInterval(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'setBlocksInterval'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'setBlocksInterval',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'setBlocksInterval'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"setDepositLimit"`.
 */
export function usePrepareLiquiditySetDepositLimit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'setDepositLimit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'setDepositLimit',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'setDepositLimit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"setEnableDeposit"`.
 */
export function usePrepareLiquiditySetEnableDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'setEnableDeposit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'setEnableDeposit',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'setEnableDeposit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"setEnableLiquidity"`.
 */
export function usePrepareLiquiditySetEnableLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'setEnableLiquidity'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'setEnableLiquidity',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'setEnableLiquidity'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"setFees"`.
 */
export function usePrepareLiquiditySetFees(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'setFees'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'setFees',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'setFees'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"setMinDepositPoolAmount"`.
 */
export function usePrepareLiquiditySetMinDepositPoolAmount(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'setMinDepositPoolAmount'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'setMinDepositPoolAmount',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'setMinDepositPoolAmount'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"setRouterContract"`.
 */
export function usePrepareLiquiditySetRouterContract(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'setRouterContract'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'setRouterContract',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'setRouterContract'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"setStakeTogether"`.
 */
export function usePrepareLiquiditySetStakeTogether(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'setStakeTogether'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'setStakeTogether',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'setStakeTogether'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"setWithdrawalLimit"`.
 */
export function usePrepareLiquiditySetWithdrawalLimit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'setWithdrawalLimit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'setWithdrawalLimit',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'setWithdrawalLimit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"setWithdrawalLiquidityLimit"`.
 */
export function usePrepareLiquiditySetWithdrawalLiquidityLimit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'setWithdrawalLiquidityLimit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'setWithdrawalLiquidityLimit',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'setWithdrawalLiquidityLimit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"supplyLiquidity"`.
 */
export function usePrepareLiquiditySupplyLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'supplyLiquidity'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'supplyLiquidity',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'supplyLiquidity'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareLiquidityTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareLiquidityTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"transferShares"`.
 */
export function usePrepareLiquidityTransferShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'transferShares'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'transferShares',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'transferShares'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"transferSharesFrom"`.
 */
export function usePrepareLiquidityTransferSharesFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'transferSharesFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'transferSharesFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'transferSharesFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareLiquidityUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'unpause',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'unpause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareLiquidityUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'upgradeTo',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareLiquidityUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"withdrawLiquidity"`.
 */
export function usePrepareLiquidityWithdrawLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'withdrawLiquidity'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'withdrawLiquidity',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'withdrawLiquidity'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityABI}__ and `functionName` set to `"withdrawPool"`.
 */
export function usePrepareLiquidityWithdrawPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityABI, 'withdrawPool'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: liquidityABI,
    functionName: 'withdrawPool',
    ...config
  } as UsePrepareContractWriteConfig<typeof liquidityABI, 'withdrawPool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__.
 */
export function useLiquidityEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof liquidityABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: liquidityABI, ...config } as UseContractEventConfig<
    typeof liquidityABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useLiquidityAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof liquidityABI, 'AdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: liquidityABI, eventName: 'AdminChanged', ...config } as UseContractEventConfig<
    typeof liquidityABI,
    'AdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"Approval"`.
 */
export function useLiquidityApprovalEvent(
  config: Omit<UseContractEventConfig<typeof liquidityABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: liquidityABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof liquidityABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useLiquidityBeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof liquidityABI, 'BeaconUpgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: liquidityABI,
    eventName: 'BeaconUpgraded',
    ...config
  } as UseContractEventConfig<typeof liquidityABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"Bootstrap"`.
 */
export function useLiquidityBootstrapEvent(
  config: Omit<UseContractEventConfig<typeof liquidityABI, 'Bootstrap'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: liquidityABI, eventName: 'Bootstrap', ...config } as UseContractEventConfig<
    typeof liquidityABI,
    'Bootstrap'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"BurnShares"`.
 */
export function useLiquidityBurnSharesEvent(
  config: Omit<UseContractEventConfig<typeof liquidityABI, 'BurnShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: liquidityABI, eventName: 'BurnShares', ...config } as UseContractEventConfig<
    typeof liquidityABI,
    'BurnShares'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"DepositPool"`.
 */
export function useLiquidityDepositPoolEvent(
  config: Omit<UseContractEventConfig<typeof liquidityABI, 'DepositPool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: liquidityABI, eventName: 'DepositPool', ...config } as UseContractEventConfig<
    typeof liquidityABI,
    'DepositPool'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useLiquidityEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: liquidityABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof liquidityABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"Initialized"`.
 */
export function useLiquidityInitializedEvent(
  config: Omit<UseContractEventConfig<typeof liquidityABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: liquidityABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof liquidityABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"MintRewardsWithdrawalLenders"`.
 */
export function useLiquidityMintRewardsWithdrawalLendersEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityABI, 'MintRewardsWithdrawalLenders'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: liquidityABI,
    eventName: 'MintRewardsWithdrawalLenders',
    ...config
  } as UseContractEventConfig<typeof liquidityABI, 'MintRewardsWithdrawalLenders'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"MintRewardsWithdrawalLendersFallback"`.
 */
export function useLiquidityMintRewardsWithdrawalLendersFallbackEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityABI, 'MintRewardsWithdrawalLendersFallback'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: liquidityABI,
    eventName: 'MintRewardsWithdrawalLendersFallback',
    ...config
  } as UseContractEventConfig<typeof liquidityABI, 'MintRewardsWithdrawalLendersFallback'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"MintShares"`.
 */
export function useLiquidityMintSharesEvent(
  config: Omit<UseContractEventConfig<typeof liquidityABI, 'MintShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: liquidityABI, eventName: 'MintShares', ...config } as UseContractEventConfig<
    typeof liquidityABI,
    'MintShares'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"Paused"`.
 */
export function useLiquidityPausedEvent(
  config: Omit<UseContractEventConfig<typeof liquidityABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: liquidityABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof liquidityABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useLiquidityRoleAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof liquidityABI, 'RoleAdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: liquidityABI,
    eventName: 'RoleAdminChanged',
    ...config
  } as UseContractEventConfig<typeof liquidityABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useLiquidityRoleGrantedEvent(
  config: Omit<UseContractEventConfig<typeof liquidityABI, 'RoleGranted'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: liquidityABI, eventName: 'RoleGranted', ...config } as UseContractEventConfig<
    typeof liquidityABI,
    'RoleGranted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useLiquidityRoleRevokedEvent(
  config: Omit<UseContractEventConfig<typeof liquidityABI, 'RoleRevoked'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: liquidityABI, eventName: 'RoleRevoked', ...config } as UseContractEventConfig<
    typeof liquidityABI,
    'RoleRevoked'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"SetBlocksInterval"`.
 */
export function useLiquiditySetBlocksIntervalEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityABI, 'SetBlocksInterval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: liquidityABI,
    eventName: 'SetBlocksInterval',
    ...config
  } as UseContractEventConfig<typeof liquidityABI, 'SetBlocksInterval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"SetDepositLimit"`.
 */
export function useLiquiditySetDepositLimitEvent(
  config: Omit<UseContractEventConfig<typeof liquidityABI, 'SetDepositLimit'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: liquidityABI,
    eventName: 'SetDepositLimit',
    ...config
  } as UseContractEventConfig<typeof liquidityABI, 'SetDepositLimit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"SetEnableDeposit"`.
 */
export function useLiquiditySetEnableDepositEvent(
  config: Omit<UseContractEventConfig<typeof liquidityABI, 'SetEnableDeposit'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: liquidityABI,
    eventName: 'SetEnableDeposit',
    ...config
  } as UseContractEventConfig<typeof liquidityABI, 'SetEnableDeposit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"SetEnableLiquidity"`.
 */
export function useLiquiditySetEnableLiquidityEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityABI, 'SetEnableLiquidity'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: liquidityABI,
    eventName: 'SetEnableLiquidity',
    ...config
  } as UseContractEventConfig<typeof liquidityABI, 'SetEnableLiquidity'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"SetFees"`.
 */
export function useLiquiditySetFeesEvent(
  config: Omit<UseContractEventConfig<typeof liquidityABI, 'SetFees'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: liquidityABI, eventName: 'SetFees', ...config } as UseContractEventConfig<
    typeof liquidityABI,
    'SetFees'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"SetMinDepositPoolAmount"`.
 */
export function useLiquiditySetMinDepositPoolAmountEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityABI, 'SetMinDepositPoolAmount'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: liquidityABI,
    eventName: 'SetMinDepositPoolAmount',
    ...config
  } as UseContractEventConfig<typeof liquidityABI, 'SetMinDepositPoolAmount'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"SetRouterContract"`.
 */
export function useLiquiditySetRouterContractEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityABI, 'SetRouterContract'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: liquidityABI,
    eventName: 'SetRouterContract',
    ...config
  } as UseContractEventConfig<typeof liquidityABI, 'SetRouterContract'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"SetStakeTogether"`.
 */
export function useLiquiditySetStakeTogetherEvent(
  config: Omit<UseContractEventConfig<typeof liquidityABI, 'SetStakeTogether'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: liquidityABI,
    eventName: 'SetStakeTogether',
    ...config
  } as UseContractEventConfig<typeof liquidityABI, 'SetStakeTogether'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"SetWithdrawalLimit"`.
 */
export function useLiquiditySetWithdrawalLimitEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityABI, 'SetWithdrawalLimit'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: liquidityABI,
    eventName: 'SetWithdrawalLimit',
    ...config
  } as UseContractEventConfig<typeof liquidityABI, 'SetWithdrawalLimit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"SetWithdrawalLiquidityLimit"`.
 */
export function useLiquiditySetWithdrawalLiquidityLimitEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityABI, 'SetWithdrawalLiquidityLimit'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: liquidityABI,
    eventName: 'SetWithdrawalLiquidityLimit',
    ...config
  } as UseContractEventConfig<typeof liquidityABI, 'SetWithdrawalLiquidityLimit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"SupplyLiquidity"`.
 */
export function useLiquiditySupplyLiquidityEvent(
  config: Omit<UseContractEventConfig<typeof liquidityABI, 'SupplyLiquidity'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: liquidityABI,
    eventName: 'SupplyLiquidity',
    ...config
  } as UseContractEventConfig<typeof liquidityABI, 'SupplyLiquidity'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"Transfer"`.
 */
export function useLiquidityTransferEvent(
  config: Omit<UseContractEventConfig<typeof liquidityABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: liquidityABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof liquidityABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"TransferShares"`.
 */
export function useLiquidityTransferSharesEvent(
  config: Omit<UseContractEventConfig<typeof liquidityABI, 'TransferShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: liquidityABI,
    eventName: 'TransferShares',
    ...config
  } as UseContractEventConfig<typeof liquidityABI, 'TransferShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useLiquidityUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof liquidityABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: liquidityABI, eventName: 'Unpaused', ...config } as UseContractEventConfig<
    typeof liquidityABI,
    'Unpaused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useLiquidityUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof liquidityABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: liquidityABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof liquidityABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"WithdrawLiquidity"`.
 */
export function useLiquidityWithdrawLiquidityEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityABI, 'WithdrawLiquidity'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: liquidityABI,
    eventName: 'WithdrawLiquidity',
    ...config
  } as UseContractEventConfig<typeof liquidityABI, 'WithdrawLiquidity'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityABI}__ and `eventName` set to `"WithdrawPool"`.
 */
export function useLiquidityWithdrawPoolEvent(
  config: Omit<UseContractEventConfig<typeof liquidityABI, 'WithdrawPool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: liquidityABI, eventName: 'WithdrawPool', ...config } as UseContractEventConfig<
    typeof liquidityABI,
    'WithdrawPool'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__.
 */
export function useRouterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: routerABI, ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"ADMIN_ROLE"`.
 */
export function useRouterAdminRole<
  TFunctionName extends 'ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'ADMIN_ROLE', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useRouterDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"ORACLE_REPORT_MANAGER_ROLE"`.
 */
export function useRouterOracleReportManagerRole<
  TFunctionName extends 'ORACLE_REPORT_MANAGER_ROLE',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'ORACLE_REPORT_MANAGER_ROLE',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"ORACLE_REPORT_ROLE"`.
 */
export function useRouterOracleReportRole<
  TFunctionName extends 'ORACLE_REPORT_ROLE',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'ORACLE_REPORT_ROLE',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"ORACLE_REPORT_SENTINEL_ROLE"`.
 */
export function useRouterOracleReportSentinelRole<
  TFunctionName extends 'ORACLE_REPORT_SENTINEL_ROLE',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'ORACLE_REPORT_SENTINEL_ROLE',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"UPGRADER_ROLE"`.
 */
export function useRouterUpgraderRole<
  TFunctionName extends 'UPGRADER_ROLE',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'UPGRADER_ROLE', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"airdropContract"`.
 */
export function useRouterAirdropContract<
  TFunctionName extends 'airdropContract',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'airdropContract',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"auditReport"`.
 */
export function useRouterAuditReport<
  TFunctionName extends 'auditReport',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'auditReport', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"bunkerMode"`.
 */
export function useRouterBunkerMode<
  TFunctionName extends 'bunkerMode',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'bunkerMode', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"consensusInvalidatedReport"`.
 */
export function useRouterConsensusInvalidatedReport<
  TFunctionName extends 'consensusInvalidatedReport',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'consensusInvalidatedReport',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"consensusReport"`.
 */
export function useRouterConsensusReport<
  TFunctionName extends 'consensusReport',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'consensusReport',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"executedReports"`.
 */
export function useRouterExecutedReports<
  TFunctionName extends 'executedReports',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'executedReports',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"feesContract"`.
 */
export function useRouterFeesContract<
  TFunctionName extends 'feesContract',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'feesContract', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useRouterGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'getRoleAdmin', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"hasRole"`.
 */
export function useRouterHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'hasRole', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"isReadyToExecute"`.
 */
export function useRouterIsReadyToExecute<
  TFunctionName extends 'isReadyToExecute',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'isReadyToExecute',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"isReadyToSubmit"`.
 */
export function useRouterIsReadyToSubmit<
  TFunctionName extends 'isReadyToSubmit',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'isReadyToSubmit',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"isReportOracle"`.
 */
export function useRouterIsReportOracle<
  TFunctionName extends 'isReportOracle',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'isReportOracle', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"isReportOracleBlackListed"`.
 */
export function useRouterIsReportOracleBlackListed<
  TFunctionName extends 'isReportOracleBlackListed',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'isReportOracleBlackListed',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"lastConsensusEpoch"`.
 */
export function useRouterLastConsensusEpoch<
  TFunctionName extends 'lastConsensusEpoch',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'lastConsensusEpoch',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"lastExecutedConsensusEpoch"`.
 */
export function useRouterLastExecutedConsensusEpoch<
  TFunctionName extends 'lastExecutedConsensusEpoch',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'lastExecutedConsensusEpoch',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"liquidityContract"`.
 */
export function useRouterLiquidityContract<
  TFunctionName extends 'liquidityContract',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'liquidityContract',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"maxApr"`.
 */
export function useRouterMaxApr<
  TFunctionName extends 'maxApr',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'maxApr', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"maxValidatorsToExit"`.
 */
export function useRouterMaxValidatorsToExit<
  TFunctionName extends 'maxValidatorsToExit',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'maxValidatorsToExit',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"minBlocksBeforeExecution"`.
 */
export function useRouterMinBlocksBeforeExecution<
  TFunctionName extends 'minBlocksBeforeExecution',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'minBlocksBeforeExecution',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"minReportOracleQuorum"`.
 */
export function useRouterMinReportOracleQuorum<
  TFunctionName extends 'minReportOracleQuorum',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'minReportOracleQuorum',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"oracleBlackListLimit"`.
 */
export function useRouterOracleBlackListLimit<
  TFunctionName extends 'oracleBlackListLimit',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'oracleBlackListLimit',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"oracleReports"`.
 */
export function useRouterOracleReports<
  TFunctionName extends 'oracleReports',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'oracleReports', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"oracleReportsVotes"`.
 */
export function useRouterOracleReportsVotes<
  TFunctionName extends 'oracleReportsVotes',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'oracleReportsVotes',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"paused"`.
 */
export function useRouterPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useRouterProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'proxiableUUID', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"reportBlockFrequency"`.
 */
export function useRouterReportBlockFrequency<
  TFunctionName extends 'reportBlockFrequency',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'reportBlockFrequency',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"reportBlockNumber"`.
 */
export function useRouterReportBlockNumber<
  TFunctionName extends 'reportBlockNumber',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'reportBlockNumber',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"reportExecutionBlock"`.
 */
export function useRouterReportExecutionBlock<
  TFunctionName extends 'reportExecutionBlock',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'reportExecutionBlock',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"reportHistoric"`.
 */
export function useRouterReportHistoric<
  TFunctionName extends 'reportHistoric',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'reportHistoric', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"reportOracleQuorum"`.
 */
export function useRouterReportOracleQuorum<
  TFunctionName extends 'reportOracleQuorum',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'reportOracleQuorum',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"reportOraclesBlacklist"`.
 */
export function useRouterReportOraclesBlacklist<
  TFunctionName extends 'reportOraclesBlacklist',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'reportOraclesBlacklist',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"stakeTogether"`.
 */
export function useRouterStakeTogether<
  TFunctionName extends 'stakeTogether',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: routerABI, functionName: 'stakeTogether', ...config } as UseContractReadConfig<
    typeof routerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useRouterSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"totalReportOracles"`.
 */
export function useRouterTotalReportOracles<
  TFunctionName extends 'totalReportOracles',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'totalReportOracles',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"validatorsContract"`.
 */
export function useRouterValidatorsContract<
  TFunctionName extends 'validatorsContract',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'validatorsContract',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"withdrawalsContract"`.
 */
export function useRouterWithdrawalsContract<
  TFunctionName extends 'withdrawalsContract',
  TSelectData = ReadContractResult<typeof routerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: routerABI,
    functionName: 'withdrawalsContract',
    ...config
  } as UseContractReadConfig<typeof routerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__.
 */
export function useRouterWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof routerABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof routerABI, TFunctionName, TMode>({ abi: routerABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"addReportOracle"`.
 */
export function useRouterAddReportOracle<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'addReportOracle'>['request']['abi'],
        'addReportOracle',
        TMode
      > & { functionName?: 'addReportOracle' }
    : UseContractWriteConfig<typeof routerABI, 'addReportOracle', TMode> & {
        abi?: never
        functionName?: 'addReportOracle'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'addReportOracle', TMode>({
    abi: routerABI,
    functionName: 'addReportOracle',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"addSentinel"`.
 */
export function useRouterAddSentinel<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'addSentinel'>['request']['abi'],
        'addSentinel',
        TMode
      > & { functionName?: 'addSentinel' }
    : UseContractWriteConfig<typeof routerABI, 'addSentinel', TMode> & {
        abi?: never
        functionName?: 'addSentinel'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'addSentinel', TMode>({
    abi: routerABI,
    functionName: 'addSentinel',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"blacklistReportOracle"`.
 */
export function useRouterBlacklistReportOracle<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'blacklistReportOracle'>['request']['abi'],
        'blacklistReportOracle',
        TMode
      > & { functionName?: 'blacklistReportOracle' }
    : UseContractWriteConfig<typeof routerABI, 'blacklistReportOracle', TMode> & {
        abi?: never
        functionName?: 'blacklistReportOracle'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'blacklistReportOracle', TMode>({
    abi: routerABI,
    functionName: 'blacklistReportOracle',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"executeReport"`.
 */
export function useRouterExecuteReport<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'executeReport'>['request']['abi'],
        'executeReport',
        TMode
      > & { functionName?: 'executeReport' }
    : UseContractWriteConfig<typeof routerABI, 'executeReport', TMode> & {
        abi?: never
        functionName?: 'executeReport'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'executeReport', TMode>({
    abi: routerABI,
    functionName: 'executeReport',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"grantRole"`.
 */
export function useRouterGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'grantRole'>['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof routerABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'grantRole', TMode>({
    abi: routerABI,
    functionName: 'grantRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"initialize"`.
 */
export function useRouterInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof routerABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'initialize', TMode>({
    abi: routerABI,
    functionName: 'initialize',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"invalidateConsensus"`.
 */
export function useRouterInvalidateConsensus<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'invalidateConsensus'>['request']['abi'],
        'invalidateConsensus',
        TMode
      > & { functionName?: 'invalidateConsensus' }
    : UseContractWriteConfig<typeof routerABI, 'invalidateConsensus', TMode> & {
        abi?: never
        functionName?: 'invalidateConsensus'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'invalidateConsensus', TMode>({
    abi: routerABI,
    functionName: 'invalidateConsensus',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"pause"`.
 */
export function useRouterPause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'pause'>['request']['abi'],
        'pause',
        TMode
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<typeof routerABI, 'pause', TMode> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'pause', TMode>({
    abi: routerABI,
    functionName: 'pause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"removeReportOracle"`.
 */
export function useRouterRemoveReportOracle<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'removeReportOracle'>['request']['abi'],
        'removeReportOracle',
        TMode
      > & { functionName?: 'removeReportOracle' }
    : UseContractWriteConfig<typeof routerABI, 'removeReportOracle', TMode> & {
        abi?: never
        functionName?: 'removeReportOracle'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'removeReportOracle', TMode>({
    abi: routerABI,
    functionName: 'removeReportOracle',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"removeSentinel"`.
 */
export function useRouterRemoveSentinel<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'removeSentinel'>['request']['abi'],
        'removeSentinel',
        TMode
      > & { functionName?: 'removeSentinel' }
    : UseContractWriteConfig<typeof routerABI, 'removeSentinel', TMode> & {
        abi?: never
        functionName?: 'removeSentinel'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'removeSentinel', TMode>({
    abi: routerABI,
    functionName: 'removeSentinel',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useRouterRenounceRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'renounceRole'>['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof routerABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'renounceRole', TMode>({
    abi: routerABI,
    functionName: 'renounceRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"requestValidatorsExit"`.
 */
export function useRouterRequestValidatorsExit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'requestValidatorsExit'>['request']['abi'],
        'requestValidatorsExit',
        TMode
      > & { functionName?: 'requestValidatorsExit' }
    : UseContractWriteConfig<typeof routerABI, 'requestValidatorsExit', TMode> & {
        abi?: never
        functionName?: 'requestValidatorsExit'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'requestValidatorsExit', TMode>({
    abi: routerABI,
    functionName: 'requestValidatorsExit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useRouterRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'revokeRole'>['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof routerABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'revokeRole', TMode>({
    abi: routerABI,
    functionName: 'revokeRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"setBunkerMode"`.
 */
export function useRouterSetBunkerMode<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'setBunkerMode'>['request']['abi'],
        'setBunkerMode',
        TMode
      > & { functionName?: 'setBunkerMode' }
    : UseContractWriteConfig<typeof routerABI, 'setBunkerMode', TMode> & {
        abi?: never
        functionName?: 'setBunkerMode'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'setBunkerMode', TMode>({
    abi: routerABI,
    functionName: 'setBunkerMode',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"setLastConsensusEpoch"`.
 */
export function useRouterSetLastConsensusEpoch<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'setLastConsensusEpoch'>['request']['abi'],
        'setLastConsensusEpoch',
        TMode
      > & { functionName?: 'setLastConsensusEpoch' }
    : UseContractWriteConfig<typeof routerABI, 'setLastConsensusEpoch', TMode> & {
        abi?: never
        functionName?: 'setLastConsensusEpoch'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'setLastConsensusEpoch', TMode>({
    abi: routerABI,
    functionName: 'setLastConsensusEpoch',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"setMaxApr"`.
 */
export function useRouterSetMaxApr<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'setMaxApr'>['request']['abi'],
        'setMaxApr',
        TMode
      > & { functionName?: 'setMaxApr' }
    : UseContractWriteConfig<typeof routerABI, 'setMaxApr', TMode> & {
        abi?: never
        functionName?: 'setMaxApr'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'setMaxApr', TMode>({
    abi: routerABI,
    functionName: 'setMaxApr',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"setMaxValidatorsToExit"`.
 */
export function useRouterSetMaxValidatorsToExit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'setMaxValidatorsToExit'>['request']['abi'],
        'setMaxValidatorsToExit',
        TMode
      > & { functionName?: 'setMaxValidatorsToExit' }
    : UseContractWriteConfig<typeof routerABI, 'setMaxValidatorsToExit', TMode> & {
        abi?: never
        functionName?: 'setMaxValidatorsToExit'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'setMaxValidatorsToExit', TMode>({
    abi: routerABI,
    functionName: 'setMaxValidatorsToExit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"setMinBlockBeforeExecution"`.
 */
export function useRouterSetMinBlockBeforeExecution<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'setMinBlockBeforeExecution'>['request']['abi'],
        'setMinBlockBeforeExecution',
        TMode
      > & { functionName?: 'setMinBlockBeforeExecution' }
    : UseContractWriteConfig<typeof routerABI, 'setMinBlockBeforeExecution', TMode> & {
        abi?: never
        functionName?: 'setMinBlockBeforeExecution'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'setMinBlockBeforeExecution', TMode>({
    abi: routerABI,
    functionName: 'setMinBlockBeforeExecution',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"setMinReportOracleQuorum"`.
 */
export function useRouterSetMinReportOracleQuorum<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'setMinReportOracleQuorum'>['request']['abi'],
        'setMinReportOracleQuorum',
        TMode
      > & { functionName?: 'setMinReportOracleQuorum' }
    : UseContractWriteConfig<typeof routerABI, 'setMinReportOracleQuorum', TMode> & {
        abi?: never
        functionName?: 'setMinReportOracleQuorum'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'setMinReportOracleQuorum', TMode>({
    abi: routerABI,
    functionName: 'setMinReportOracleQuorum',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"setReportBlockFrequency"`.
 */
export function useRouterSetReportBlockFrequency<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'setReportBlockFrequency'>['request']['abi'],
        'setReportBlockFrequency',
        TMode
      > & { functionName?: 'setReportBlockFrequency' }
    : UseContractWriteConfig<typeof routerABI, 'setReportBlockFrequency', TMode> & {
        abi?: never
        functionName?: 'setReportBlockFrequency'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'setReportBlockFrequency', TMode>({
    abi: routerABI,
    functionName: 'setReportBlockFrequency',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"setReportOraclePenalizeLimit"`.
 */
export function useRouterSetReportOraclePenalizeLimit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'setReportOraclePenalizeLimit'>['request']['abi'],
        'setReportOraclePenalizeLimit',
        TMode
      > & { functionName?: 'setReportOraclePenalizeLimit' }
    : UseContractWriteConfig<typeof routerABI, 'setReportOraclePenalizeLimit', TMode> & {
        abi?: never
        functionName?: 'setReportOraclePenalizeLimit'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'setReportOraclePenalizeLimit', TMode>({
    abi: routerABI,
    functionName: 'setReportOraclePenalizeLimit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"setReportOracleQuorum"`.
 */
export function useRouterSetReportOracleQuorum<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'setReportOracleQuorum'>['request']['abi'],
        'setReportOracleQuorum',
        TMode
      > & { functionName?: 'setReportOracleQuorum' }
    : UseContractWriteConfig<typeof routerABI, 'setReportOracleQuorum', TMode> & {
        abi?: never
        functionName?: 'setReportOracleQuorum'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'setReportOracleQuorum', TMode>({
    abi: routerABI,
    functionName: 'setReportOracleQuorum',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"setStakeTogether"`.
 */
export function useRouterSetStakeTogether<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'setStakeTogether'>['request']['abi'],
        'setStakeTogether',
        TMode
      > & { functionName?: 'setStakeTogether' }
    : UseContractWriteConfig<typeof routerABI, 'setStakeTogether', TMode> & {
        abi?: never
        functionName?: 'setStakeTogether'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'setStakeTogether', TMode>({
    abi: routerABI,
    functionName: 'setStakeTogether',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"submitReport"`.
 */
export function useRouterSubmitReport<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'submitReport'>['request']['abi'],
        'submitReport',
        TMode
      > & { functionName?: 'submitReport' }
    : UseContractWriteConfig<typeof routerABI, 'submitReport', TMode> & {
        abi?: never
        functionName?: 'submitReport'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'submitReport', TMode>({
    abi: routerABI,
    functionName: 'submitReport',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"unBlacklistReportOracle"`.
 */
export function useRouterUnBlacklistReportOracle<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'unBlacklistReportOracle'>['request']['abi'],
        'unBlacklistReportOracle',
        TMode
      > & { functionName?: 'unBlacklistReportOracle' }
    : UseContractWriteConfig<typeof routerABI, 'unBlacklistReportOracle', TMode> & {
        abi?: never
        functionName?: 'unBlacklistReportOracle'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'unBlacklistReportOracle', TMode>({
    abi: routerABI,
    functionName: 'unBlacklistReportOracle',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"unpause"`.
 */
export function useRouterUnpause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'unpause'>['request']['abi'],
        'unpause',
        TMode
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<typeof routerABI, 'unpause', TMode> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'unpause', TMode>({
    abi: routerABI,
    functionName: 'unpause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useRouterUpgradeTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof routerABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'upgradeTo', TMode>({
    abi: routerABI,
    functionName: 'upgradeTo',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useRouterUpgradeToAndCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof routerABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof routerABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any
) {
  return useContractWrite<typeof routerABI, 'upgradeToAndCall', TMode>({
    abi: routerABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__.
 */
export function usePrepareRouterWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof routerABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: routerABI, ...config } as UsePrepareContractWriteConfig<
    typeof routerABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"addReportOracle"`.
 */
export function usePrepareRouterAddReportOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'addReportOracle'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'addReportOracle',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'addReportOracle'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"addSentinel"`.
 */
export function usePrepareRouterAddSentinel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'addSentinel'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'addSentinel',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'addSentinel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"blacklistReportOracle"`.
 */
export function usePrepareRouterBlacklistReportOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'blacklistReportOracle'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'blacklistReportOracle',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'blacklistReportOracle'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"executeReport"`.
 */
export function usePrepareRouterExecuteReport(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'executeReport'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'executeReport',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'executeReport'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareRouterGrantRole(
  config: Omit<UsePrepareContractWriteConfig<typeof routerABI, 'grantRole'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'grantRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareRouterInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'initialize',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"invalidateConsensus"`.
 */
export function usePrepareRouterInvalidateConsensus(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'invalidateConsensus'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'invalidateConsensus',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'invalidateConsensus'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareRouterPause(
  config: Omit<UsePrepareContractWriteConfig<typeof routerABI, 'pause'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'pause',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"removeReportOracle"`.
 */
export function usePrepareRouterRemoveReportOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'removeReportOracle'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'removeReportOracle',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'removeReportOracle'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"removeSentinel"`.
 */
export function usePrepareRouterRemoveSentinel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'removeSentinel'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'removeSentinel',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'removeSentinel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareRouterRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'renounceRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"requestValidatorsExit"`.
 */
export function usePrepareRouterRequestValidatorsExit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'requestValidatorsExit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'requestValidatorsExit',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'requestValidatorsExit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareRouterRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'revokeRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"setBunkerMode"`.
 */
export function usePrepareRouterSetBunkerMode(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'setBunkerMode'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'setBunkerMode',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'setBunkerMode'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"setLastConsensusEpoch"`.
 */
export function usePrepareRouterSetLastConsensusEpoch(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'setLastConsensusEpoch'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'setLastConsensusEpoch',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'setLastConsensusEpoch'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"setMaxApr"`.
 */
export function usePrepareRouterSetMaxApr(
  config: Omit<UsePrepareContractWriteConfig<typeof routerABI, 'setMaxApr'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'setMaxApr',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'setMaxApr'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"setMaxValidatorsToExit"`.
 */
export function usePrepareRouterSetMaxValidatorsToExit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'setMaxValidatorsToExit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'setMaxValidatorsToExit',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'setMaxValidatorsToExit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"setMinBlockBeforeExecution"`.
 */
export function usePrepareRouterSetMinBlockBeforeExecution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'setMinBlockBeforeExecution'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'setMinBlockBeforeExecution',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'setMinBlockBeforeExecution'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"setMinReportOracleQuorum"`.
 */
export function usePrepareRouterSetMinReportOracleQuorum(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'setMinReportOracleQuorum'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'setMinReportOracleQuorum',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'setMinReportOracleQuorum'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"setReportBlockFrequency"`.
 */
export function usePrepareRouterSetReportBlockFrequency(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'setReportBlockFrequency'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'setReportBlockFrequency',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'setReportBlockFrequency'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"setReportOraclePenalizeLimit"`.
 */
export function usePrepareRouterSetReportOraclePenalizeLimit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'setReportOraclePenalizeLimit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'setReportOraclePenalizeLimit',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'setReportOraclePenalizeLimit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"setReportOracleQuorum"`.
 */
export function usePrepareRouterSetReportOracleQuorum(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'setReportOracleQuorum'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'setReportOracleQuorum',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'setReportOracleQuorum'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"setStakeTogether"`.
 */
export function usePrepareRouterSetStakeTogether(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'setStakeTogether'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'setStakeTogether',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'setStakeTogether'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"submitReport"`.
 */
export function usePrepareRouterSubmitReport(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'submitReport'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'submitReport',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'submitReport'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"unBlacklistReportOracle"`.
 */
export function usePrepareRouterUnBlacklistReportOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'unBlacklistReportOracle'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'unBlacklistReportOracle',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'unBlacklistReportOracle'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareRouterUnpause(
  config: Omit<UsePrepareContractWriteConfig<typeof routerABI, 'unpause'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'unpause',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'unpause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareRouterUpgradeTo(
  config: Omit<UsePrepareContractWriteConfig<typeof routerABI, 'upgradeTo'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'upgradeTo',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link routerABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareRouterUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof routerABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: routerABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as UsePrepareContractWriteConfig<typeof routerABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__.
 */
export function useRouterEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof routerABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: routerABI, ...config } as UseContractEventConfig<typeof routerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"AddReportOracle"`.
 */
export function useRouterAddReportOracleEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'AddReportOracle'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'AddReportOracle', ...config } as UseContractEventConfig<
    typeof routerABI,
    'AddReportOracle'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useRouterAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'AdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'AdminChanged', ...config } as UseContractEventConfig<
    typeof routerABI,
    'AdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useRouterBeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'BeaconUpgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'BeaconUpgraded', ...config } as UseContractEventConfig<
    typeof routerABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"BlacklistReportOracle"`.
 */
export function useRouterBlacklistReportOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof routerABI, 'BlacklistReportOracle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'BlacklistReportOracle',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'BlacklistReportOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"BlacklistReportOracleManually"`.
 */
export function useRouterBlacklistReportOracleManuallyEvent(
  config: Omit<
    UseContractEventConfig<typeof routerABI, 'BlacklistReportOracleManually'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'BlacklistReportOracleManually',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'BlacklistReportOracleManually'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"ConsensusApprove"`.
 */
export function useRouterConsensusApproveEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'ConsensusApprove'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'ConsensusApprove',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'ConsensusApprove'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"ConsensusNotReached"`.
 */
export function useRouterConsensusNotReachedEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'ConsensusNotReached'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'ConsensusNotReached',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'ConsensusNotReached'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"ExecuteReport"`.
 */
export function useRouterExecuteReportEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'ExecuteReport'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'ExecuteReport', ...config } as UseContractEventConfig<
    typeof routerABI,
    'ExecuteReport'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"FallbackEther"`.
 */
export function useRouterFallbackEtherEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'FallbackEther'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'FallbackEther', ...config } as UseContractEventConfig<
    typeof routerABI,
    'FallbackEther'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"Initialized"`.
 */
export function useRouterInitializedEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof routerABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"InvalidateConsensus"`.
 */
export function useRouterInvalidateConsensusEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'InvalidateConsensus'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'InvalidateConsensus',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'InvalidateConsensus'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"Paused"`.
 */
export function useRouterPausedEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof routerABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"PenalizeReportOracle"`.
 */
export function useRouterPenalizeReportOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof routerABI, 'PenalizeReportOracle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'PenalizeReportOracle',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'PenalizeReportOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"ReceiveEther"`.
 */
export function useRouterReceiveEtherEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'ReceiveEther'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'ReceiveEther', ...config } as UseContractEventConfig<
    typeof routerABI,
    'ReceiveEther'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"RemoveReportOracle"`.
 */
export function useRouterRemoveReportOracleEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'RemoveReportOracle'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'RemoveReportOracle',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'RemoveReportOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"RequestValidatorsExit"`.
 */
export function useRouterRequestValidatorsExitEvent(
  config: Omit<
    UseContractEventConfig<typeof routerABI, 'RequestValidatorsExit'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'RequestValidatorsExit',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'RequestValidatorsExit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"RewardReportOracle"`.
 */
export function useRouterRewardReportOracleEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'RewardReportOracle'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'RewardReportOracle',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'RewardReportOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useRouterRoleAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'RoleAdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'RoleAdminChanged',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useRouterRoleGrantedEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'RoleGranted'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'RoleGranted', ...config } as UseContractEventConfig<
    typeof routerABI,
    'RoleGranted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useRouterRoleRevokedEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'RoleRevoked'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'RoleRevoked', ...config } as UseContractEventConfig<
    typeof routerABI,
    'RoleRevoked'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"SetBunkerMode"`.
 */
export function useRouterSetBunkerModeEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'SetBunkerMode'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'SetBunkerMode', ...config } as UseContractEventConfig<
    typeof routerABI,
    'SetBunkerMode'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"SetLastConsensusEpoch"`.
 */
export function useRouterSetLastConsensusEpochEvent(
  config: Omit<
    UseContractEventConfig<typeof routerABI, 'SetLastConsensusEpoch'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'SetLastConsensusEpoch',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'SetLastConsensusEpoch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"SetMaxApr"`.
 */
export function useRouterSetMaxAprEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'SetMaxApr'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'SetMaxApr', ...config } as UseContractEventConfig<
    typeof routerABI,
    'SetMaxApr'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"SetMaxValidatorsToExit"`.
 */
export function useRouterSetMaxValidatorsToExitEvent(
  config: Omit<
    UseContractEventConfig<typeof routerABI, 'SetMaxValidatorsToExit'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'SetMaxValidatorsToExit',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'SetMaxValidatorsToExit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"SetMinBlockBeforeExecution"`.
 */
export function useRouterSetMinBlockBeforeExecutionEvent(
  config: Omit<
    UseContractEventConfig<typeof routerABI, 'SetMinBlockBeforeExecution'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'SetMinBlockBeforeExecution',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'SetMinBlockBeforeExecution'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"SetMinReportOracleQuorum"`.
 */
export function useRouterSetMinReportOracleQuorumEvent(
  config: Omit<
    UseContractEventConfig<typeof routerABI, 'SetMinReportOracleQuorum'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'SetMinReportOracleQuorum',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'SetMinReportOracleQuorum'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"SetReportBlockFrequency"`.
 */
export function useRouterSetReportBlockFrequencyEvent(
  config: Omit<
    UseContractEventConfig<typeof routerABI, 'SetReportBlockFrequency'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'SetReportBlockFrequency',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'SetReportBlockFrequency'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"SetReportBlockNumber"`.
 */
export function useRouterSetReportBlockNumberEvent(
  config: Omit<
    UseContractEventConfig<typeof routerABI, 'SetReportBlockNumber'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'SetReportBlockNumber',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'SetReportBlockNumber'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"SetReportEpochFrequency"`.
 */
export function useRouterSetReportEpochFrequencyEvent(
  config: Omit<
    UseContractEventConfig<typeof routerABI, 'SetReportEpochFrequency'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'SetReportEpochFrequency',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'SetReportEpochFrequency'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"SetReportEpochNumber"`.
 */
export function useRouterSetReportEpochNumberEvent(
  config: Omit<
    UseContractEventConfig<typeof routerABI, 'SetReportEpochNumber'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'SetReportEpochNumber',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'SetReportEpochNumber'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"SetReportOraclePenalizeLimit"`.
 */
export function useRouterSetReportOraclePenalizeLimitEvent(
  config: Omit<
    UseContractEventConfig<typeof routerABI, 'SetReportOraclePenalizeLimit'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'SetReportOraclePenalizeLimit',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'SetReportOraclePenalizeLimit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"SetReportOracleQuorum"`.
 */
export function useRouterSetReportOracleQuorumEvent(
  config: Omit<
    UseContractEventConfig<typeof routerABI, 'SetReportOracleQuorum'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'SetReportOracleQuorum',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'SetReportOracleQuorum'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"SetStakeTogether"`.
 */
export function useRouterSetStakeTogetherEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'SetStakeTogether'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'SetStakeTogether',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'SetStakeTogether'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"SkipNextBlockInterval"`.
 */
export function useRouterSkipNextBlockIntervalEvent(
  config: Omit<
    UseContractEventConfig<typeof routerABI, 'SkipNextBlockInterval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'SkipNextBlockInterval',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'SkipNextBlockInterval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"SubmitReport"`.
 */
export function useRouterSubmitReportEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'SubmitReport'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'SubmitReport', ...config } as UseContractEventConfig<
    typeof routerABI,
    'SubmitReport'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"UnBlacklistReportOracle"`.
 */
export function useRouterUnBlacklistReportOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof routerABI, 'UnBlacklistReportOracle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'UnBlacklistReportOracle',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'UnBlacklistReportOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useRouterUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'Unpaused', ...config } as UseContractEventConfig<
    typeof routerABI,
    'Unpaused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"UpdateReportOracleQuorum"`.
 */
export function useRouterUpdateReportOracleQuorumEvent(
  config: Omit<
    UseContractEventConfig<typeof routerABI, 'UpdateReportOracleQuorum'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'UpdateReportOracleQuorum',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'UpdateReportOracleQuorum'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useRouterUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: routerABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof routerABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link routerABI}__ and `eventName` set to `"ValidatorsToExit"`.
 */
export function useRouterValidatorsToExitEvent(
  config: Omit<UseContractEventConfig<typeof routerABI, 'ValidatorsToExit'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: routerABI,
    eventName: 'ValidatorsToExit',
    ...config
  } as UseContractEventConfig<typeof routerABI, 'ValidatorsToExit'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__.
 */
export function useSharesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: sharesABI, ...config } as UseContractReadConfig<
    typeof sharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"ADMIN_ROLE"`.
 */
export function useSharesAdminRole<
  TFunctionName extends 'ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sharesABI, functionName: 'ADMIN_ROLE', ...config } as UseContractReadConfig<
    typeof sharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useSharesDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sharesABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config
  } as UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useSharesDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sharesABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config
  } as UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"POOL_MANAGER_ROLE"`.
 */
export function useSharesPoolManagerRole<
  TFunctionName extends 'POOL_MANAGER_ROLE',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sharesABI,
    functionName: 'POOL_MANAGER_ROLE',
    ...config
  } as UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"UPGRADER_ROLE"`.
 */
export function useSharesUpgraderRole<
  TFunctionName extends 'UPGRADER_ROLE',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sharesABI, functionName: 'UPGRADER_ROLE', ...config } as UseContractReadConfig<
    typeof sharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"airdropContract"`.
 */
export function useSharesAirdropContract<
  TFunctionName extends 'airdropContract',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sharesABI,
    functionName: 'airdropContract',
    ...config
  } as UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"allowance"`.
 */
export function useSharesAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sharesABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof sharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useSharesBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sharesABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof sharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"beaconBalance"`.
 */
export function useSharesBeaconBalance<
  TFunctionName extends 'beaconBalance',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sharesABI, functionName: 'beaconBalance', ...config } as UseContractReadConfig<
    typeof sharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"config"`.
 */
export function useSharesConfig<
  TFunctionName extends 'config',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sharesABI, functionName: 'config', ...config } as UseContractReadConfig<
    typeof sharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"decimals"`.
 */
export function useSharesDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sharesABI, functionName: 'decimals', ...config } as UseContractReadConfig<
    typeof sharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"delegationSharesOf"`.
 */
export function useSharesDelegationSharesOf<
  TFunctionName extends 'delegationSharesOf',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sharesABI,
    functionName: 'delegationSharesOf',
    ...config
  } as UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useSharesEip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sharesABI, functionName: 'eip712Domain', ...config } as UseContractReadConfig<
    typeof sharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"feesContract"`.
 */
export function useSharesFeesContract<
  TFunctionName extends 'feesContract',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sharesABI, functionName: 'feesContract', ...config } as UseContractReadConfig<
    typeof sharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useSharesGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sharesABI, functionName: 'getRoleAdmin', ...config } as UseContractReadConfig<
    typeof sharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"hasRole"`.
 */
export function useSharesHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sharesABI, functionName: 'hasRole', ...config } as UseContractReadConfig<
    typeof sharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"isPool"`.
 */
export function useSharesIsPool<
  TFunctionName extends 'isPool',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sharesABI, functionName: 'isPool', ...config } as UseContractReadConfig<
    typeof sharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"liquidityBalance"`.
 */
export function useSharesLiquidityBalance<
  TFunctionName extends 'liquidityBalance',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sharesABI,
    functionName: 'liquidityBalance',
    ...config
  } as UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"liquidityContract"`.
 */
export function useSharesLiquidityContract<
  TFunctionName extends 'liquidityContract',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sharesABI,
    functionName: 'liquidityContract',
    ...config
  } as UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"lockedShares"`.
 */
export function useSharesLockedShares<
  TFunctionName extends 'lockedShares',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sharesABI, functionName: 'lockedShares', ...config } as UseContractReadConfig<
    typeof sharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"lockedSharesOf"`.
 */
export function useSharesLockedSharesOf<
  TFunctionName extends 'lockedSharesOf',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sharesABI, functionName: 'lockedSharesOf', ...config } as UseContractReadConfig<
    typeof sharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"maxDelegations"`.
 */
export function useSharesMaxDelegations<
  TFunctionName extends 'maxDelegations',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sharesABI, functionName: 'maxDelegations', ...config } as UseContractReadConfig<
    typeof sharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"name"`.
 */
export function useSharesName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sharesABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof sharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"netSharesOf"`.
 */
export function useSharesNetSharesOf<
  TFunctionName extends 'netSharesOf',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sharesABI, functionName: 'netSharesOf', ...config } as UseContractReadConfig<
    typeof sharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"nonces"`.
 */
export function useSharesNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sharesABI, functionName: 'nonces', ...config } as UseContractReadConfig<
    typeof sharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"paused"`.
 */
export function useSharesPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sharesABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof sharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"poolSharesOf"`.
 */
export function useSharesPoolSharesOf<
  TFunctionName extends 'poolSharesOf',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sharesABI, functionName: 'poolSharesOf', ...config } as UseContractReadConfig<
    typeof sharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"pooledEthByShares"`.
 */
export function useSharesPooledEthByShares<
  TFunctionName extends 'pooledEthByShares',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sharesABI,
    functionName: 'pooledEthByShares',
    ...config
  } as UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useSharesProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sharesABI, functionName: 'proxiableUUID', ...config } as UseContractReadConfig<
    typeof sharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"routerContract"`.
 */
export function useSharesRouterContract<
  TFunctionName extends 'routerContract',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sharesABI, functionName: 'routerContract', ...config } as UseContractReadConfig<
    typeof sharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"sharesByPooledEth"`.
 */
export function useSharesSharesByPooledEth<
  TFunctionName extends 'sharesByPooledEth',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sharesABI,
    functionName: 'sharesByPooledEth',
    ...config
  } as UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"sharesOf"`.
 */
export function useSharesSharesOf<
  TFunctionName extends 'sharesOf',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sharesABI, functionName: 'sharesOf', ...config } as UseContractReadConfig<
    typeof sharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useSharesSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sharesABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"symbol"`.
 */
export function useSharesSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sharesABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof sharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"totalLockedShares"`.
 */
export function useSharesTotalLockedShares<
  TFunctionName extends 'totalLockedShares',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sharesABI,
    functionName: 'totalLockedShares',
    ...config
  } as UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"totalPoolShares"`.
 */
export function useSharesTotalPoolShares<
  TFunctionName extends 'totalPoolShares',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sharesABI,
    functionName: 'totalPoolShares',
    ...config
  } as UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"totalPooledEther"`.
 */
export function useSharesTotalPooledEther<
  TFunctionName extends 'totalPooledEther',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sharesABI,
    functionName: 'totalPooledEther',
    ...config
  } as UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"totalShares"`.
 */
export function useSharesTotalShares<
  TFunctionName extends 'totalShares',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sharesABI, functionName: 'totalShares', ...config } as UseContractReadConfig<
    typeof sharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useSharesTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: sharesABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof sharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"validatorsContract"`.
 */
export function useSharesValidatorsContract<
  TFunctionName extends 'validatorsContract',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sharesABI,
    functionName: 'validatorsContract',
    ...config
  } as UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"withdrawalCredentials"`.
 */
export function useSharesWithdrawalCredentials<
  TFunctionName extends 'withdrawalCredentials',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sharesABI,
    functionName: 'withdrawalCredentials',
    ...config
  } as UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"withdrawalsContract"`.
 */
export function useSharesWithdrawalsContract<
  TFunctionName extends 'withdrawalsContract',
  TSelectData = ReadContractResult<typeof sharesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sharesABI,
    functionName: 'withdrawalsContract',
    ...config
  } as UseContractReadConfig<typeof sharesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sharesABI}__.
 */
export function useSharesWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sharesABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof sharesABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof sharesABI, TFunctionName, TMode>({ abi: sharesABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"approve"`.
 */
export function useSharesApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sharesABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof sharesABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof sharesABI, 'approve', TMode>({
    abi: sharesABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"burn"`.
 */
export function useSharesBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sharesABI, 'burn'>['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof sharesABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any
) {
  return useContractWrite<typeof sharesABI, 'burn', TMode>({
    abi: sharesABI,
    functionName: 'burn',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useSharesBurnFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sharesABI, 'burnFrom'>['request']['abi'],
        'burnFrom',
        TMode
      > & { functionName?: 'burnFrom' }
    : UseContractWriteConfig<typeof sharesABI, 'burnFrom', TMode> & {
        abi?: never
        functionName?: 'burnFrom'
      } = {} as any
) {
  return useContractWrite<typeof sharesABI, 'burnFrom', TMode>({
    abi: sharesABI,
    functionName: 'burnFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"claimRewards"`.
 */
export function useSharesClaimRewards<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sharesABI, 'claimRewards'>['request']['abi'],
        'claimRewards',
        TMode
      > & { functionName?: 'claimRewards' }
    : UseContractWriteConfig<typeof sharesABI, 'claimRewards', TMode> & {
        abi?: never
        functionName?: 'claimRewards'
      } = {} as any
) {
  return useContractWrite<typeof sharesABI, 'claimRewards', TMode>({
    abi: sharesABI,
    functionName: 'claimRewards',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useSharesDecreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sharesABI, 'decreaseAllowance'>['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof sharesABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof sharesABI, 'decreaseAllowance', TMode>({
    abi: sharesABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"grantRole"`.
 */
export function useSharesGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sharesABI, 'grantRole'>['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof sharesABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<typeof sharesABI, 'grantRole', TMode>({
    abi: sharesABI,
    functionName: 'grantRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useSharesIncreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sharesABI, 'increaseAllowance'>['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof sharesABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof sharesABI, 'increaseAllowance', TMode>({
    abi: sharesABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"lockShares"`.
 */
export function useSharesLockShares<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sharesABI, 'lockShares'>['request']['abi'],
        'lockShares',
        TMode
      > & { functionName?: 'lockShares' }
    : UseContractWriteConfig<typeof sharesABI, 'lockShares', TMode> & {
        abi?: never
        functionName?: 'lockShares'
      } = {} as any
) {
  return useContractWrite<typeof sharesABI, 'lockShares', TMode>({
    abi: sharesABI,
    functionName: 'lockShares',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"mintPenalty"`.
 */
export function useSharesMintPenalty<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sharesABI, 'mintPenalty'>['request']['abi'],
        'mintPenalty',
        TMode
      > & { functionName?: 'mintPenalty' }
    : UseContractWriteConfig<typeof sharesABI, 'mintPenalty', TMode> & {
        abi?: never
        functionName?: 'mintPenalty'
      } = {} as any
) {
  return useContractWrite<typeof sharesABI, 'mintPenalty', TMode>({
    abi: sharesABI,
    functionName: 'mintPenalty',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"mintRewards"`.
 */
export function useSharesMintRewards<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sharesABI, 'mintRewards'>['request']['abi'],
        'mintRewards',
        TMode
      > & { functionName?: 'mintRewards' }
    : UseContractWriteConfig<typeof sharesABI, 'mintRewards', TMode> & {
        abi?: never
        functionName?: 'mintRewards'
      } = {} as any
) {
  return useContractWrite<typeof sharesABI, 'mintRewards', TMode>({
    abi: sharesABI,
    functionName: 'mintRewards',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"permit"`.
 */
export function useSharesPermit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sharesABI, 'permit'>['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof sharesABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<typeof sharesABI, 'permit', TMode>({
    abi: sharesABI,
    functionName: 'permit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useSharesRenounceRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sharesABI, 'renounceRole'>['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof sharesABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<typeof sharesABI, 'renounceRole', TMode>({
    abi: sharesABI,
    functionName: 'renounceRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useSharesRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sharesABI, 'revokeRole'>['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof sharesABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<typeof sharesABI, 'revokeRole', TMode>({
    abi: sharesABI,
    functionName: 'revokeRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"setBeaconBalance"`.
 */
export function useSharesSetBeaconBalance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sharesABI, 'setBeaconBalance'>['request']['abi'],
        'setBeaconBalance',
        TMode
      > & { functionName?: 'setBeaconBalance' }
    : UseContractWriteConfig<typeof sharesABI, 'setBeaconBalance', TMode> & {
        abi?: never
        functionName?: 'setBeaconBalance'
      } = {} as any
) {
  return useContractWrite<typeof sharesABI, 'setBeaconBalance', TMode>({
    abi: sharesABI,
    functionName: 'setBeaconBalance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"setLiquidityBalance"`.
 */
export function useSharesSetLiquidityBalance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sharesABI, 'setLiquidityBalance'>['request']['abi'],
        'setLiquidityBalance',
        TMode
      > & { functionName?: 'setLiquidityBalance' }
    : UseContractWriteConfig<typeof sharesABI, 'setLiquidityBalance', TMode> & {
        abi?: never
        functionName?: 'setLiquidityBalance'
      } = {} as any
) {
  return useContractWrite<typeof sharesABI, 'setLiquidityBalance', TMode>({
    abi: sharesABI,
    functionName: 'setLiquidityBalance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"transfer"`.
 */
export function useSharesTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sharesABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof sharesABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof sharesABI, 'transfer', TMode>({
    abi: sharesABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useSharesTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sharesABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof sharesABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof sharesABI, 'transferFrom', TMode>({
    abi: sharesABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"transferPoolShares"`.
 */
export function useSharesTransferPoolShares<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sharesABI, 'transferPoolShares'>['request']['abi'],
        'transferPoolShares',
        TMode
      > & { functionName?: 'transferPoolShares' }
    : UseContractWriteConfig<typeof sharesABI, 'transferPoolShares', TMode> & {
        abi?: never
        functionName?: 'transferPoolShares'
      } = {} as any
) {
  return useContractWrite<typeof sharesABI, 'transferPoolShares', TMode>({
    abi: sharesABI,
    functionName: 'transferPoolShares',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"transferShares"`.
 */
export function useSharesTransferShares<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sharesABI, 'transferShares'>['request']['abi'],
        'transferShares',
        TMode
      > & { functionName?: 'transferShares' }
    : UseContractWriteConfig<typeof sharesABI, 'transferShares', TMode> & {
        abi?: never
        functionName?: 'transferShares'
      } = {} as any
) {
  return useContractWrite<typeof sharesABI, 'transferShares', TMode>({
    abi: sharesABI,
    functionName: 'transferShares',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"transferSharesFrom"`.
 */
export function useSharesTransferSharesFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sharesABI, 'transferSharesFrom'>['request']['abi'],
        'transferSharesFrom',
        TMode
      > & { functionName?: 'transferSharesFrom' }
    : UseContractWriteConfig<typeof sharesABI, 'transferSharesFrom', TMode> & {
        abi?: never
        functionName?: 'transferSharesFrom'
      } = {} as any
) {
  return useContractWrite<typeof sharesABI, 'transferSharesFrom', TMode>({
    abi: sharesABI,
    functionName: 'transferSharesFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"unlockShares"`.
 */
export function useSharesUnlockShares<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sharesABI, 'unlockShares'>['request']['abi'],
        'unlockShares',
        TMode
      > & { functionName?: 'unlockShares' }
    : UseContractWriteConfig<typeof sharesABI, 'unlockShares', TMode> & {
        abi?: never
        functionName?: 'unlockShares'
      } = {} as any
) {
  return useContractWrite<typeof sharesABI, 'unlockShares', TMode>({
    abi: sharesABI,
    functionName: 'unlockShares',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useSharesUpgradeTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sharesABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof sharesABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any
) {
  return useContractWrite<typeof sharesABI, 'upgradeTo', TMode>({
    abi: sharesABI,
    functionName: 'upgradeTo',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useSharesUpgradeToAndCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sharesABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof sharesABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any
) {
  return useContractWrite<typeof sharesABI, 'upgradeToAndCall', TMode>({
    abi: sharesABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sharesABI}__.
 */
export function usePrepareSharesWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof sharesABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: sharesABI, ...config } as UsePrepareContractWriteConfig<
    typeof sharesABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareSharesApprove(
  config: Omit<UsePrepareContractWriteConfig<typeof sharesABI, 'approve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: sharesABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof sharesABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareSharesBurn(
  config: Omit<UsePrepareContractWriteConfig<typeof sharesABI, 'burn'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: sharesABI,
    functionName: 'burn',
    ...config
  } as UsePrepareContractWriteConfig<typeof sharesABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareSharesBurnFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof sharesABI, 'burnFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: sharesABI,
    functionName: 'burnFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof sharesABI, 'burnFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"claimRewards"`.
 */
export function usePrepareSharesClaimRewards(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sharesABI, 'claimRewards'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sharesABI,
    functionName: 'claimRewards',
    ...config
  } as UsePrepareContractWriteConfig<typeof sharesABI, 'claimRewards'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareSharesDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sharesABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sharesABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof sharesABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareSharesGrantRole(
  config: Omit<UsePrepareContractWriteConfig<typeof sharesABI, 'grantRole'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: sharesABI,
    functionName: 'grantRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof sharesABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareSharesIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sharesABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sharesABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof sharesABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"lockShares"`.
 */
export function usePrepareSharesLockShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sharesABI, 'lockShares'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sharesABI,
    functionName: 'lockShares',
    ...config
  } as UsePrepareContractWriteConfig<typeof sharesABI, 'lockShares'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"mintPenalty"`.
 */
export function usePrepareSharesMintPenalty(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sharesABI, 'mintPenalty'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sharesABI,
    functionName: 'mintPenalty',
    ...config
  } as UsePrepareContractWriteConfig<typeof sharesABI, 'mintPenalty'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"mintRewards"`.
 */
export function usePrepareSharesMintRewards(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sharesABI, 'mintRewards'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sharesABI,
    functionName: 'mintRewards',
    ...config
  } as UsePrepareContractWriteConfig<typeof sharesABI, 'mintRewards'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareSharesPermit(
  config: Omit<UsePrepareContractWriteConfig<typeof sharesABI, 'permit'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: sharesABI,
    functionName: 'permit',
    ...config
  } as UsePrepareContractWriteConfig<typeof sharesABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareSharesRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sharesABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sharesABI,
    functionName: 'renounceRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof sharesABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareSharesRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sharesABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sharesABI,
    functionName: 'revokeRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof sharesABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"setBeaconBalance"`.
 */
export function usePrepareSharesSetBeaconBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sharesABI, 'setBeaconBalance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sharesABI,
    functionName: 'setBeaconBalance',
    ...config
  } as UsePrepareContractWriteConfig<typeof sharesABI, 'setBeaconBalance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"setLiquidityBalance"`.
 */
export function usePrepareSharesSetLiquidityBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sharesABI, 'setLiquidityBalance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sharesABI,
    functionName: 'setLiquidityBalance',
    ...config
  } as UsePrepareContractWriteConfig<typeof sharesABI, 'setLiquidityBalance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareSharesTransfer(
  config: Omit<UsePrepareContractWriteConfig<typeof sharesABI, 'transfer'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: sharesABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof sharesABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareSharesTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sharesABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sharesABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof sharesABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"transferPoolShares"`.
 */
export function usePrepareSharesTransferPoolShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sharesABI, 'transferPoolShares'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sharesABI,
    functionName: 'transferPoolShares',
    ...config
  } as UsePrepareContractWriteConfig<typeof sharesABI, 'transferPoolShares'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"transferShares"`.
 */
export function usePrepareSharesTransferShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sharesABI, 'transferShares'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sharesABI,
    functionName: 'transferShares',
    ...config
  } as UsePrepareContractWriteConfig<typeof sharesABI, 'transferShares'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"transferSharesFrom"`.
 */
export function usePrepareSharesTransferSharesFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sharesABI, 'transferSharesFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sharesABI,
    functionName: 'transferSharesFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof sharesABI, 'transferSharesFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"unlockShares"`.
 */
export function usePrepareSharesUnlockShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sharesABI, 'unlockShares'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sharesABI,
    functionName: 'unlockShares',
    ...config
  } as UsePrepareContractWriteConfig<typeof sharesABI, 'unlockShares'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareSharesUpgradeTo(
  config: Omit<UsePrepareContractWriteConfig<typeof sharesABI, 'upgradeTo'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: sharesABI,
    functionName: 'upgradeTo',
    ...config
  } as UsePrepareContractWriteConfig<typeof sharesABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sharesABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareSharesUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sharesABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sharesABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as UsePrepareContractWriteConfig<typeof sharesABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__.
 */
export function useSharesEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof sharesABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, ...config } as UseContractEventConfig<typeof sharesABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"AddPool"`.
 */
export function useSharesAddPoolEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'AddPool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'AddPool', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'AddPool'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useSharesAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'AdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'AdminChanged', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'AdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"Approval"`.
 */
export function useSharesApprovalEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useSharesBeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'BeaconUpgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'BeaconUpgraded', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"BurnPoolShares"`.
 */
export function useSharesBurnPoolSharesEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'BurnPoolShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'BurnPoolShares', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'BurnPoolShares'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"BurnShares"`.
 */
export function useSharesBurnSharesEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'BurnShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'BurnShares', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'BurnShares'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"ClaimRewards"`.
 */
export function useSharesClaimRewardsEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'ClaimRewards'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'ClaimRewards', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'ClaimRewards'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"DepositBase"`.
 */
export function useSharesDepositBaseEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'DepositBase'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'DepositBase', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'DepositBase'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"DepositDonationPool"`.
 */
export function useSharesDepositDonationPoolEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'DepositDonationPool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: sharesABI,
    eventName: 'DepositDonationPool',
    ...config
  } as UseContractEventConfig<typeof sharesABI, 'DepositDonationPool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"DepositPool"`.
 */
export function useSharesDepositPoolEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'DepositPool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'DepositPool', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'DepositPool'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"DepositProtocolLimitReached"`.
 */
export function useSharesDepositProtocolLimitReachedEvent(
  config: Omit<
    UseContractEventConfig<typeof sharesABI, 'DepositProtocolLimitReached'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sharesABI,
    eventName: 'DepositProtocolLimitReached',
    ...config
  } as UseContractEventConfig<typeof sharesABI, 'DepositProtocolLimitReached'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useSharesEip712DomainChangedEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'EIP712DomainChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: sharesABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof sharesABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"Initialized"`.
 */
export function useSharesInitializedEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"LockShares"`.
 */
export function useSharesLockSharesEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'LockShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'LockShares', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'LockShares'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"MintPenalty"`.
 */
export function useSharesMintPenaltyEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'MintPenalty'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'MintPenalty', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'MintPenalty'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"MintPoolShares"`.
 */
export function useSharesMintPoolSharesEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'MintPoolShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'MintPoolShares', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'MintPoolShares'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"MintRewards"`.
 */
export function useSharesMintRewardsEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'MintRewards'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'MintRewards', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'MintRewards'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"MintRewardsAccounts"`.
 */
export function useSharesMintRewardsAccountsEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'MintRewardsAccounts'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: sharesABI,
    eventName: 'MintRewardsAccounts',
    ...config
  } as UseContractEventConfig<typeof sharesABI, 'MintRewardsAccounts'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"MintRewardsAccountsFallback"`.
 */
export function useSharesMintRewardsAccountsFallbackEvent(
  config: Omit<
    UseContractEventConfig<typeof sharesABI, 'MintRewardsAccountsFallback'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sharesABI,
    eventName: 'MintRewardsAccountsFallback',
    ...config
  } as UseContractEventConfig<typeof sharesABI, 'MintRewardsAccountsFallback'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"MintShares"`.
 */
export function useSharesMintSharesEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'MintShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'MintShares', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'MintShares'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"Paused"`.
 */
export function useSharesPausedEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"RefundPool"`.
 */
export function useSharesRefundPoolEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'RefundPool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'RefundPool', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'RefundPool'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"RemovePool"`.
 */
export function useSharesRemovePoolEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'RemovePool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'RemovePool', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'RemovePool'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useSharesRoleAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'RoleAdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: sharesABI,
    eventName: 'RoleAdminChanged',
    ...config
  } as UseContractEventConfig<typeof sharesABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useSharesRoleGrantedEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'RoleGranted'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'RoleGranted', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'RoleGranted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useSharesRoleRevokedEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'RoleRevoked'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'RoleRevoked', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'RoleRevoked'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"SetBeaconBalance"`.
 */
export function useSharesSetBeaconBalanceEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'SetBeaconBalance'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: sharesABI,
    eventName: 'SetBeaconBalance',
    ...config
  } as UseContractEventConfig<typeof sharesABI, 'SetBeaconBalance'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"SetConfig"`.
 */
export function useSharesSetConfigEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'SetConfig'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'SetConfig', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'SetConfig'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"SetLiquidityBalance"`.
 */
export function useSharesSetLiquidityBalanceEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'SetLiquidityBalance'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: sharesABI,
    eventName: 'SetLiquidityBalance',
    ...config
  } as UseContractEventConfig<typeof sharesABI, 'SetLiquidityBalance'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"SupplyLiquidity"`.
 */
export function useSharesSupplyLiquidityEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'SupplyLiquidity'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'SupplyLiquidity', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'SupplyLiquidity'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"Transfer"`.
 */
export function useSharesTransferEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"TransferDelegationShares"`.
 */
export function useSharesTransferDelegationSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof sharesABI, 'TransferDelegationShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sharesABI,
    eventName: 'TransferDelegationShares',
    ...config
  } as UseContractEventConfig<typeof sharesABI, 'TransferDelegationShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"TransferPoolDelegationShares"`.
 */
export function useSharesTransferPoolDelegationSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof sharesABI, 'TransferPoolDelegationShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sharesABI,
    eventName: 'TransferPoolDelegationShares',
    ...config
  } as UseContractEventConfig<typeof sharesABI, 'TransferPoolDelegationShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"TransferPoolShares"`.
 */
export function useSharesTransferPoolSharesEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'TransferPoolShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: sharesABI,
    eventName: 'TransferPoolShares',
    ...config
  } as UseContractEventConfig<typeof sharesABI, 'TransferPoolShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"TransferShares"`.
 */
export function useSharesTransferSharesEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'TransferShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'TransferShares', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'TransferShares'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"UnlockShares"`.
 */
export function useSharesUnlockSharesEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'UnlockShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'UnlockShares', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'UnlockShares'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useSharesUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'Unpaused', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'Unpaused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useSharesUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"WithdrawLiquidity"`.
 */
export function useSharesWithdrawLiquidityEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'WithdrawLiquidity'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: sharesABI,
    eventName: 'WithdrawLiquidity',
    ...config
  } as UseContractEventConfig<typeof sharesABI, 'WithdrawLiquidity'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"WithdrawPool"`.
 */
export function useSharesWithdrawPoolEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'WithdrawPool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: sharesABI, eventName: 'WithdrawPool', ...config } as UseContractEventConfig<
    typeof sharesABI,
    'WithdrawPool'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"WithdrawValidator"`.
 */
export function useSharesWithdrawValidatorEvent(
  config: Omit<UseContractEventConfig<typeof sharesABI, 'WithdrawValidator'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: sharesABI,
    eventName: 'WithdrawValidator',
    ...config
  } as UseContractEventConfig<typeof sharesABI, 'WithdrawValidator'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sharesABI}__ and `eventName` set to `"WithdrawalLimitReached"`.
 */
export function useSharesWithdrawalLimitReachedEvent(
  config: Omit<
    UseContractEventConfig<typeof sharesABI, 'WithdrawalLimitReached'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sharesABI,
    eventName: 'WithdrawalLimitReached',
    ...config
  } as UseContractEventConfig<typeof sharesABI, 'WithdrawalLimitReached'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__.
 */
export function useStakeTogetherRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: stakeTogetherABI, ...config } as UseContractReadConfig<
    typeof stakeTogetherABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"ADMIN_ROLE"`.
 */
export function useStakeTogetherAdminRole<
  TFunctionName extends 'ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'ADMIN_ROLE',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useStakeTogetherDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useStakeTogetherDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"POOL_MANAGER_ROLE"`.
 */
export function useStakeTogetherPoolManagerRole<
  TFunctionName extends 'POOL_MANAGER_ROLE',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'POOL_MANAGER_ROLE',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"UPGRADER_ROLE"`.
 */
export function useStakeTogetherUpgraderRole<
  TFunctionName extends 'UPGRADER_ROLE',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'UPGRADER_ROLE',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"airdropContract"`.
 */
export function useStakeTogetherAirdropContract<
  TFunctionName extends 'airdropContract',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'airdropContract',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"allowance"`.
 */
export function useStakeTogetherAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useStakeTogetherBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"beaconBalance"`.
 */
export function useStakeTogetherBeaconBalance<
  TFunctionName extends 'beaconBalance',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'beaconBalance',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"config"`.
 */
export function useStakeTogetherConfig<
  TFunctionName extends 'config',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: stakeTogetherABI, functionName: 'config', ...config } as UseContractReadConfig<
    typeof stakeTogetherABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"decimals"`.
 */
export function useStakeTogetherDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'decimals',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"delegationSharesOf"`.
 */
export function useStakeTogetherDelegationSharesOf<
  TFunctionName extends 'delegationSharesOf',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'delegationSharesOf',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useStakeTogetherEip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"feesContract"`.
 */
export function useStakeTogetherFeesContract<
  TFunctionName extends 'feesContract',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'feesContract',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useStakeTogetherGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'getRoleAdmin',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"hasRole"`.
 */
export function useStakeTogetherHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: stakeTogetherABI, functionName: 'hasRole', ...config } as UseContractReadConfig<
    typeof stakeTogetherABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"isPool"`.
 */
export function useStakeTogetherIsPool<
  TFunctionName extends 'isPool',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: stakeTogetherABI, functionName: 'isPool', ...config } as UseContractReadConfig<
    typeof stakeTogetherABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"lastResetBlock"`.
 */
export function useStakeTogetherLastResetBlock<
  TFunctionName extends 'lastResetBlock',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'lastResetBlock',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"liquidityBalance"`.
 */
export function useStakeTogetherLiquidityBalance<
  TFunctionName extends 'liquidityBalance',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'liquidityBalance',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"liquidityContract"`.
 */
export function useStakeTogetherLiquidityContract<
  TFunctionName extends 'liquidityContract',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'liquidityContract',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"lockedShares"`.
 */
export function useStakeTogetherLockedShares<
  TFunctionName extends 'lockedShares',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'lockedShares',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"lockedSharesOf"`.
 */
export function useStakeTogetherLockedSharesOf<
  TFunctionName extends 'lockedSharesOf',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'lockedSharesOf',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"maxDelegations"`.
 */
export function useStakeTogetherMaxDelegations<
  TFunctionName extends 'maxDelegations',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'maxDelegations',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"name"`.
 */
export function useStakeTogetherName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: stakeTogetherABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof stakeTogetherABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"netSharesOf"`.
 */
export function useStakeTogetherNetSharesOf<
  TFunctionName extends 'netSharesOf',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'netSharesOf',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"nonces"`.
 */
export function useStakeTogetherNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: stakeTogetherABI, functionName: 'nonces', ...config } as UseContractReadConfig<
    typeof stakeTogetherABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"paused"`.
 */
export function useStakeTogetherPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: stakeTogetherABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof stakeTogetherABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"poolBalance"`.
 */
export function useStakeTogetherPoolBalance<
  TFunctionName extends 'poolBalance',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'poolBalance',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"poolCount"`.
 */
export function useStakeTogetherPoolCount<
  TFunctionName extends 'poolCount',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'poolCount',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"poolSharesOf"`.
 */
export function useStakeTogetherPoolSharesOf<
  TFunctionName extends 'poolSharesOf',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'poolSharesOf',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"pooledEthByShares"`.
 */
export function useStakeTogetherPooledEthByShares<
  TFunctionName extends 'pooledEthByShares',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'pooledEthByShares',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useStakeTogetherProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'proxiableUUID',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"routerContract"`.
 */
export function useStakeTogetherRouterContract<
  TFunctionName extends 'routerContract',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'routerContract',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"sharesByPooledEth"`.
 */
export function useStakeTogetherSharesByPooledEth<
  TFunctionName extends 'sharesByPooledEth',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'sharesByPooledEth',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"sharesOf"`.
 */
export function useStakeTogetherSharesOf<
  TFunctionName extends 'sharesOf',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'sharesOf',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useStakeTogetherSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"symbol"`.
 */
export function useStakeTogetherSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: stakeTogetherABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof stakeTogetherABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"totalDeposited"`.
 */
export function useStakeTogetherTotalDeposited<
  TFunctionName extends 'totalDeposited',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'totalDeposited',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"totalLockedShares"`.
 */
export function useStakeTogetherTotalLockedShares<
  TFunctionName extends 'totalLockedShares',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'totalLockedShares',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"totalPoolShares"`.
 */
export function useStakeTogetherTotalPoolShares<
  TFunctionName extends 'totalPoolShares',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'totalPoolShares',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"totalPooledEther"`.
 */
export function useStakeTogetherTotalPooledEther<
  TFunctionName extends 'totalPooledEther',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'totalPooledEther',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"totalShares"`.
 */
export function useStakeTogetherTotalShares<
  TFunctionName extends 'totalShares',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'totalShares',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useStakeTogetherTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"totalWithdrawn"`.
 */
export function useStakeTogetherTotalWithdrawn<
  TFunctionName extends 'totalWithdrawn',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'totalWithdrawn',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"validatorsContract"`.
 */
export function useStakeTogetherValidatorsContract<
  TFunctionName extends 'validatorsContract',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'validatorsContract',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawalCredentials"`.
 */
export function useStakeTogetherWithdrawalCredentials<
  TFunctionName extends 'withdrawalCredentials',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'withdrawalCredentials',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawalsContract"`.
 */
export function useStakeTogetherWithdrawalsContract<
  TFunctionName extends 'withdrawalsContract',
  TSelectData = ReadContractResult<typeof stakeTogetherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stakeTogetherABI,
    functionName: 'withdrawalsContract',
    ...config
  } as UseContractReadConfig<typeof stakeTogetherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__.
 */
export function useStakeTogetherWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof stakeTogetherABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, TFunctionName, TMode>({
    abi: stakeTogetherABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"addPool"`.
 */
export function useStakeTogetherAddPool<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'addPool'>['request']['abi'],
        'addPool',
        TMode
      > & { functionName?: 'addPool' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'addPool', TMode> & {
        abi?: never
        functionName?: 'addPool'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'addPool', TMode>({
    abi: stakeTogetherABI,
    functionName: 'addPool',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"approve"`.
 */
export function useStakeTogetherApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'approve', TMode>({
    abi: stakeTogetherABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"burn"`.
 */
export function useStakeTogetherBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'burn'>['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'burn', TMode>({
    abi: stakeTogetherABI,
    functionName: 'burn',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useStakeTogetherBurnFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'burnFrom'>['request']['abi'],
        'burnFrom',
        TMode
      > & { functionName?: 'burnFrom' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'burnFrom', TMode> & {
        abi?: never
        functionName?: 'burnFrom'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'burnFrom', TMode>({
    abi: stakeTogetherABI,
    functionName: 'burnFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"claimRewards"`.
 */
export function useStakeTogetherClaimRewards<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'claimRewards'>['request']['abi'],
        'claimRewards',
        TMode
      > & { functionName?: 'claimRewards' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'claimRewards', TMode> & {
        abi?: never
        functionName?: 'claimRewards'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'claimRewards', TMode>({
    abi: stakeTogetherABI,
    functionName: 'claimRewards',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"createValidator"`.
 */
export function useStakeTogetherCreateValidator<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'createValidator'>['request']['abi'],
        'createValidator',
        TMode
      > & { functionName?: 'createValidator' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'createValidator', TMode> & {
        abi?: never
        functionName?: 'createValidator'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'createValidator', TMode>({
    abi: stakeTogetherABI,
    functionName: 'createValidator',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useStakeTogetherDecreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'decreaseAllowance'>['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'decreaseAllowance', TMode>({
    abi: stakeTogetherABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"depositDonationPool"`.
 */
export function useStakeTogetherDepositDonationPool<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'depositDonationPool'>['request']['abi'],
        'depositDonationPool',
        TMode
      > & { functionName?: 'depositDonationPool' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'depositDonationPool', TMode> & {
        abi?: never
        functionName?: 'depositDonationPool'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'depositDonationPool', TMode>({
    abi: stakeTogetherABI,
    functionName: 'depositDonationPool',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"depositPool"`.
 */
export function useStakeTogetherDepositPool<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'depositPool'>['request']['abi'],
        'depositPool',
        TMode
      > & { functionName?: 'depositPool' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'depositPool', TMode> & {
        abi?: never
        functionName?: 'depositPool'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'depositPool', TMode>({
    abi: stakeTogetherABI,
    functionName: 'depositPool',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"grantRole"`.
 */
export function useStakeTogetherGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'grantRole'>['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'grantRole', TMode>({
    abi: stakeTogetherABI,
    functionName: 'grantRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useStakeTogetherIncreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'increaseAllowance'>['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'increaseAllowance', TMode>({
    abi: stakeTogetherABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"initialize"`.
 */
export function useStakeTogetherInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'initialize', TMode>({
    abi: stakeTogetherABI,
    functionName: 'initialize',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"lockShares"`.
 */
export function useStakeTogetherLockShares<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'lockShares'>['request']['abi'],
        'lockShares',
        TMode
      > & { functionName?: 'lockShares' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'lockShares', TMode> & {
        abi?: never
        functionName?: 'lockShares'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'lockShares', TMode>({
    abi: stakeTogetherABI,
    functionName: 'lockShares',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"mintPenalty"`.
 */
export function useStakeTogetherMintPenalty<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'mintPenalty'>['request']['abi'],
        'mintPenalty',
        TMode
      > & { functionName?: 'mintPenalty' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'mintPenalty', TMode> & {
        abi?: never
        functionName?: 'mintPenalty'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'mintPenalty', TMode>({
    abi: stakeTogetherABI,
    functionName: 'mintPenalty',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"mintRewards"`.
 */
export function useStakeTogetherMintRewards<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'mintRewards'>['request']['abi'],
        'mintRewards',
        TMode
      > & { functionName?: 'mintRewards' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'mintRewards', TMode> & {
        abi?: never
        functionName?: 'mintRewards'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'mintRewards', TMode>({
    abi: stakeTogetherABI,
    functionName: 'mintRewards',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"pause"`.
 */
export function useStakeTogetherPause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'pause'>['request']['abi'],
        'pause',
        TMode
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'pause', TMode> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'pause', TMode>({
    abi: stakeTogetherABI,
    functionName: 'pause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"permit"`.
 */
export function useStakeTogetherPermit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'permit'>['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'permit', TMode>({
    abi: stakeTogetherABI,
    functionName: 'permit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"refundPool"`.
 */
export function useStakeTogetherRefundPool<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'refundPool'>['request']['abi'],
        'refundPool',
        TMode
      > & { functionName?: 'refundPool' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'refundPool', TMode> & {
        abi?: never
        functionName?: 'refundPool'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'refundPool', TMode>({
    abi: stakeTogetherABI,
    functionName: 'refundPool',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"removePool"`.
 */
export function useStakeTogetherRemovePool<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'removePool'>['request']['abi'],
        'removePool',
        TMode
      > & { functionName?: 'removePool' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'removePool', TMode> & {
        abi?: never
        functionName?: 'removePool'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'removePool', TMode>({
    abi: stakeTogetherABI,
    functionName: 'removePool',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useStakeTogetherRenounceRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'renounceRole'>['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'renounceRole', TMode>({
    abi: stakeTogetherABI,
    functionName: 'renounceRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useStakeTogetherRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'revokeRole'>['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'revokeRole', TMode>({
    abi: stakeTogetherABI,
    functionName: 'revokeRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setBeaconBalance"`.
 */
export function useStakeTogetherSetBeaconBalance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setBeaconBalance'>['request']['abi'],
        'setBeaconBalance',
        TMode
      > & { functionName?: 'setBeaconBalance' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setBeaconBalance', TMode> & {
        abi?: never
        functionName?: 'setBeaconBalance'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setBeaconBalance', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setBeaconBalance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setConfig"`.
 */
export function useStakeTogetherSetConfig<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setConfig'>['request']['abi'],
        'setConfig',
        TMode
      > & { functionName?: 'setConfig' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setConfig', TMode> & {
        abi?: never
        functionName?: 'setConfig'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setConfig', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setConfig',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setLiquidityBalance"`.
 */
export function useStakeTogetherSetLiquidityBalance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'setLiquidityBalance'>['request']['abi'],
        'setLiquidityBalance',
        TMode
      > & { functionName?: 'setLiquidityBalance' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'setLiquidityBalance', TMode> & {
        abi?: never
        functionName?: 'setLiquidityBalance'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'setLiquidityBalance', TMode>({
    abi: stakeTogetherABI,
    functionName: 'setLiquidityBalance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transfer"`.
 */
export function useStakeTogetherTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'transfer', TMode>({
    abi: stakeTogetherABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useStakeTogetherTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'transferFrom', TMode>({
    abi: stakeTogetherABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferPoolShares"`.
 */
export function useStakeTogetherTransferPoolShares<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'transferPoolShares'>['request']['abi'],
        'transferPoolShares',
        TMode
      > & { functionName?: 'transferPoolShares' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'transferPoolShares', TMode> & {
        abi?: never
        functionName?: 'transferPoolShares'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'transferPoolShares', TMode>({
    abi: stakeTogetherABI,
    functionName: 'transferPoolShares',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferShares"`.
 */
export function useStakeTogetherTransferShares<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'transferShares'>['request']['abi'],
        'transferShares',
        TMode
      > & { functionName?: 'transferShares' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'transferShares', TMode> & {
        abi?: never
        functionName?: 'transferShares'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'transferShares', TMode>({
    abi: stakeTogetherABI,
    functionName: 'transferShares',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferSharesFrom"`.
 */
export function useStakeTogetherTransferSharesFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'transferSharesFrom'>['request']['abi'],
        'transferSharesFrom',
        TMode
      > & { functionName?: 'transferSharesFrom' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'transferSharesFrom', TMode> & {
        abi?: never
        functionName?: 'transferSharesFrom'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'transferSharesFrom', TMode>({
    abi: stakeTogetherABI,
    functionName: 'transferSharesFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"unlockShares"`.
 */
export function useStakeTogetherUnlockShares<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'unlockShares'>['request']['abi'],
        'unlockShares',
        TMode
      > & { functionName?: 'unlockShares' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'unlockShares', TMode> & {
        abi?: never
        functionName?: 'unlockShares'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'unlockShares', TMode>({
    abi: stakeTogetherABI,
    functionName: 'unlockShares',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"unpause"`.
 */
export function useStakeTogetherUnpause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'unpause'>['request']['abi'],
        'unpause',
        TMode
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'unpause', TMode> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'unpause', TMode>({
    abi: stakeTogetherABI,
    functionName: 'unpause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useStakeTogetherUpgradeTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'upgradeTo', TMode>({
    abi: stakeTogetherABI,
    functionName: 'upgradeTo',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useStakeTogetherUpgradeToAndCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'upgradeToAndCall', TMode>({
    abi: stakeTogetherABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawLiquidity"`.
 */
export function useStakeTogetherWithdrawLiquidity<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'withdrawLiquidity'>['request']['abi'],
        'withdrawLiquidity',
        TMode
      > & { functionName?: 'withdrawLiquidity' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'withdrawLiquidity', TMode> & {
        abi?: never
        functionName?: 'withdrawLiquidity'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'withdrawLiquidity', TMode>({
    abi: stakeTogetherABI,
    functionName: 'withdrawLiquidity',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawPool"`.
 */
export function useStakeTogetherWithdrawPool<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'withdrawPool'>['request']['abi'],
        'withdrawPool',
        TMode
      > & { functionName?: 'withdrawPool' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'withdrawPool', TMode> & {
        abi?: never
        functionName?: 'withdrawPool'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'withdrawPool', TMode>({
    abi: stakeTogetherABI,
    functionName: 'withdrawPool',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawValidator"`.
 */
export function useStakeTogetherWithdrawValidator<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stakeTogetherABI, 'withdrawValidator'>['request']['abi'],
        'withdrawValidator',
        TMode
      > & { functionName?: 'withdrawValidator' }
    : UseContractWriteConfig<typeof stakeTogetherABI, 'withdrawValidator', TMode> & {
        abi?: never
        functionName?: 'withdrawValidator'
      } = {} as any
) {
  return useContractWrite<typeof stakeTogetherABI, 'withdrawValidator', TMode>({
    abi: stakeTogetherABI,
    functionName: 'withdrawValidator',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__.
 */
export function usePrepareStakeTogetherWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof stakeTogetherABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: stakeTogetherABI, ...config } as UsePrepareContractWriteConfig<
    typeof stakeTogetherABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"addPool"`.
 */
export function usePrepareStakeTogetherAddPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'addPool'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'addPool',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'addPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareStakeTogetherApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareStakeTogetherBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'burn',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareStakeTogetherBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'burnFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'burnFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'burnFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"claimRewards"`.
 */
export function usePrepareStakeTogetherClaimRewards(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'claimRewards'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'claimRewards',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'claimRewards'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"createValidator"`.
 */
export function usePrepareStakeTogetherCreateValidator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'createValidator'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'createValidator',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'createValidator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareStakeTogetherDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"depositDonationPool"`.
 */
export function usePrepareStakeTogetherDepositDonationPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'depositDonationPool'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'depositDonationPool',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'depositDonationPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"depositPool"`.
 */
export function usePrepareStakeTogetherDepositPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'depositPool'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'depositPool',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'depositPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareStakeTogetherGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'grantRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareStakeTogetherIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareStakeTogetherInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'initialize',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"lockShares"`.
 */
export function usePrepareStakeTogetherLockShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'lockShares'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'lockShares',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'lockShares'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"mintPenalty"`.
 */
export function usePrepareStakeTogetherMintPenalty(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'mintPenalty'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'mintPenalty',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'mintPenalty'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"mintRewards"`.
 */
export function usePrepareStakeTogetherMintRewards(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'mintRewards'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'mintRewards',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'mintRewards'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareStakeTogetherPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'pause'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'pause',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareStakeTogetherPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'permit',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"refundPool"`.
 */
export function usePrepareStakeTogetherRefundPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'refundPool'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'refundPool',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'refundPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"removePool"`.
 */
export function usePrepareStakeTogetherRemovePool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'removePool'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'removePool',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'removePool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareStakeTogetherRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'renounceRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareStakeTogetherRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'revokeRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setBeaconBalance"`.
 */
export function usePrepareStakeTogetherSetBeaconBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setBeaconBalance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setBeaconBalance',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setBeaconBalance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setConfig"`.
 */
export function usePrepareStakeTogetherSetConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setConfig'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setConfig',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setConfig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"setLiquidityBalance"`.
 */
export function usePrepareStakeTogetherSetLiquidityBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setLiquidityBalance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'setLiquidityBalance',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'setLiquidityBalance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareStakeTogetherTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareStakeTogetherTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferPoolShares"`.
 */
export function usePrepareStakeTogetherTransferPoolShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferPoolShares'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'transferPoolShares',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferPoolShares'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferShares"`.
 */
export function usePrepareStakeTogetherTransferShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferShares'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'transferShares',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferShares'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"transferSharesFrom"`.
 */
export function usePrepareStakeTogetherTransferSharesFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferSharesFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'transferSharesFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'transferSharesFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"unlockShares"`.
 */
export function usePrepareStakeTogetherUnlockShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'unlockShares'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'unlockShares',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'unlockShares'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareStakeTogetherUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'unpause',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'unpause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareStakeTogetherUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'upgradeTo',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareStakeTogetherUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawLiquidity"`.
 */
export function usePrepareStakeTogetherWithdrawLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'withdrawLiquidity'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'withdrawLiquidity',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'withdrawLiquidity'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawPool"`.
 */
export function usePrepareStakeTogetherWithdrawPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'withdrawPool'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'withdrawPool',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'withdrawPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTogetherABI}__ and `functionName` set to `"withdrawValidator"`.
 */
export function usePrepareStakeTogetherWithdrawValidator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'withdrawValidator'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakeTogetherABI,
    functionName: 'withdrawValidator',
    ...config
  } as UsePrepareContractWriteConfig<typeof stakeTogetherABI, 'withdrawValidator'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__.
 */
export function useStakeTogetherEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: stakeTogetherABI, ...config } as UseContractEventConfig<
    typeof stakeTogetherABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"AddPool"`.
 */
export function useStakeTogetherAddPoolEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'AddPool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: stakeTogetherABI, eventName: 'AddPool', ...config } as UseContractEventConfig<
    typeof stakeTogetherABI,
    'AddPool'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useStakeTogetherAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'AdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'AdminChanged',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Approval"`.
 */
export function useStakeTogetherApprovalEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: stakeTogetherABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof stakeTogetherABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useStakeTogetherBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'BeaconUpgraded',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"BurnPoolShares"`.
 */
export function useStakeTogetherBurnPoolSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'BurnPoolShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'BurnPoolShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'BurnPoolShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"BurnShares"`.
 */
export function useStakeTogetherBurnSharesEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'BurnShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'BurnShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'BurnShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"ClaimRewards"`.
 */
export function useStakeTogetherClaimRewardsEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'ClaimRewards'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'ClaimRewards',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'ClaimRewards'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"DepositBase"`.
 */
export function useStakeTogetherDepositBaseEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'DepositBase'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'DepositBase',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'DepositBase'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"DepositDonationPool"`.
 */
export function useStakeTogetherDepositDonationPoolEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'DepositDonationPool'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'DepositDonationPool',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'DepositDonationPool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"DepositPool"`.
 */
export function useStakeTogetherDepositPoolEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'DepositPool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'DepositPool',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'DepositPool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"DepositProtocolLimitReached"`.
 */
export function useStakeTogetherDepositProtocolLimitReachedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'DepositProtocolLimitReached'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'DepositProtocolLimitReached',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'DepositProtocolLimitReached'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useStakeTogetherEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Initialized"`.
 */
export function useStakeTogetherInitializedEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"LockShares"`.
 */
export function useStakeTogetherLockSharesEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'LockShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'LockShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'LockShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"MintPenalty"`.
 */
export function useStakeTogetherMintPenaltyEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'MintPenalty'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'MintPenalty',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'MintPenalty'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"MintPoolShares"`.
 */
export function useStakeTogetherMintPoolSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'MintPoolShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'MintPoolShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'MintPoolShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"MintRewards"`.
 */
export function useStakeTogetherMintRewardsEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'MintRewards'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'MintRewards',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'MintRewards'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"MintRewardsAccounts"`.
 */
export function useStakeTogetherMintRewardsAccountsEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'MintRewardsAccounts'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'MintRewardsAccounts',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'MintRewardsAccounts'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"MintRewardsAccountsFallback"`.
 */
export function useStakeTogetherMintRewardsAccountsFallbackEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'MintRewardsAccountsFallback'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'MintRewardsAccountsFallback',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'MintRewardsAccountsFallback'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"MintShares"`.
 */
export function useStakeTogetherMintSharesEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'MintShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'MintShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'MintShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Paused"`.
 */
export function useStakeTogetherPausedEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: stakeTogetherABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof stakeTogetherABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"RefundPool"`.
 */
export function useStakeTogetherRefundPoolEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'RefundPool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'RefundPool',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'RefundPool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"RemovePool"`.
 */
export function useStakeTogetherRemovePoolEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'RemovePool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'RemovePool',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'RemovePool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useStakeTogetherRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'RoleAdminChanged',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useStakeTogetherRoleGrantedEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'RoleGranted'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'RoleGranted',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useStakeTogetherRoleRevokedEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'RoleRevoked'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'RoleRevoked',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetBeaconBalance"`.
 */
export function useStakeTogetherSetBeaconBalanceEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetBeaconBalance'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetBeaconBalance',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetBeaconBalance'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetConfig"`.
 */
export function useStakeTogetherSetConfigEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'SetConfig'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetConfig',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetConfig'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SetLiquidityBalance"`.
 */
export function useStakeTogetherSetLiquidityBalanceEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SetLiquidityBalance'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SetLiquidityBalance',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SetLiquidityBalance'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"SupplyLiquidity"`.
 */
export function useStakeTogetherSupplyLiquidityEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'SupplyLiquidity'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'SupplyLiquidity',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'SupplyLiquidity'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Transfer"`.
 */
export function useStakeTogetherTransferEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: stakeTogetherABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof stakeTogetherABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"TransferDelegationShares"`.
 */
export function useStakeTogetherTransferDelegationSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'TransferDelegationShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'TransferDelegationShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'TransferDelegationShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"TransferPoolDelegationShares"`.
 */
export function useStakeTogetherTransferPoolDelegationSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'TransferPoolDelegationShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'TransferPoolDelegationShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'TransferPoolDelegationShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"TransferPoolShares"`.
 */
export function useStakeTogetherTransferPoolSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'TransferPoolShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'TransferPoolShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'TransferPoolShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"TransferShares"`.
 */
export function useStakeTogetherTransferSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'TransferShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'TransferShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'TransferShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"UnlockShares"`.
 */
export function useStakeTogetherUnlockSharesEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'UnlockShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'UnlockShares',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'UnlockShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useStakeTogetherUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: stakeTogetherABI, eventName: 'Unpaused', ...config } as UseContractEventConfig<
    typeof stakeTogetherABI,
    'Unpaused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useStakeTogetherUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: stakeTogetherABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof stakeTogetherABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"WithdrawLiquidity"`.
 */
export function useStakeTogetherWithdrawLiquidityEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'WithdrawLiquidity'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'WithdrawLiquidity',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'WithdrawLiquidity'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"WithdrawPool"`.
 */
export function useStakeTogetherWithdrawPoolEvent(
  config: Omit<UseContractEventConfig<typeof stakeTogetherABI, 'WithdrawPool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'WithdrawPool',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'WithdrawPool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"WithdrawValidator"`.
 */
export function useStakeTogetherWithdrawValidatorEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'WithdrawValidator'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'WithdrawValidator',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'WithdrawValidator'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTogetherABI}__ and `eventName` set to `"WithdrawalLimitReached"`.
 */
export function useStakeTogetherWithdrawalLimitReachedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTogetherABI, 'WithdrawalLimitReached'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stakeTogetherABI,
    eventName: 'WithdrawalLimitReached',
    ...config
  } as UseContractEventConfig<typeof stakeTogetherABI, 'WithdrawalLimitReached'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__.
 */
export function useValidatorsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: validatorsABI, ...config } as UseContractReadConfig<
    typeof validatorsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"ADMIN_ROLE"`.
 */
export function useValidatorsAdminRole<
  TFunctionName extends 'ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: validatorsABI, functionName: 'ADMIN_ROLE', ...config } as UseContractReadConfig<
    typeof validatorsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useValidatorsDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"ORACLE_VALIDATOR_MANAGER_ROLE"`.
 */
export function useValidatorsOracleValidatorManagerRole<
  TFunctionName extends 'ORACLE_VALIDATOR_MANAGER_ROLE',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'ORACLE_VALIDATOR_MANAGER_ROLE',
    ...config
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"ORACLE_VALIDATOR_ROLE"`.
 */
export function useValidatorsOracleValidatorRole<
  TFunctionName extends 'ORACLE_VALIDATOR_ROLE',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'ORACLE_VALIDATOR_ROLE',
    ...config
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"ORACLE_VALIDATOR_SENTINEL_ROLE"`.
 */
export function useValidatorsOracleValidatorSentinelRole<
  TFunctionName extends 'ORACLE_VALIDATOR_SENTINEL_ROLE',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'ORACLE_VALIDATOR_SENTINEL_ROLE',
    ...config
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"UPGRADER_ROLE"`.
 */
export function useValidatorsUpgraderRole<
  TFunctionName extends 'UPGRADER_ROLE',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'UPGRADER_ROLE',
    ...config
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"currentOracleIndex"`.
 */
export function useValidatorsCurrentOracleIndex<
  TFunctionName extends 'currentOracleIndex',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'currentOracleIndex',
    ...config
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"currentValidatorOracle"`.
 */
export function useValidatorsCurrentValidatorOracle<
  TFunctionName extends 'currentValidatorOracle',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'currentValidatorOracle',
    ...config
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"depositContract"`.
 */
export function useValidatorsDepositContract<
  TFunctionName extends 'depositContract',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'depositContract',
    ...config
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"enableBorrow"`.
 */
export function useValidatorsEnableBorrow<
  TFunctionName extends 'enableBorrow',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'enableBorrow',
    ...config
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"feesContract"`.
 */
export function useValidatorsFeesContract<
  TFunctionName extends 'feesContract',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'feesContract',
    ...config
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useValidatorsGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getRoleAdmin',
    ...config
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"hasRole"`.
 */
export function useValidatorsHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: validatorsABI, functionName: 'hasRole', ...config } as UseContractReadConfig<
    typeof validatorsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"isValidator"`.
 */
export function useValidatorsIsValidator<
  TFunctionName extends 'isValidator',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'isValidator',
    ...config
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"isValidatorOracle"`.
 */
export function useValidatorsIsValidatorOracle<
  TFunctionName extends 'isValidatorOracle',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'isValidatorOracle',
    ...config
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"paused"`.
 */
export function useValidatorsPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: validatorsABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof validatorsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useValidatorsProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'proxiableUUID',
    ...config
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"routerContract"`.
 */
export function useValidatorsRouterContract<
  TFunctionName extends 'routerContract',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'routerContract',
    ...config
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"stakeTogether"`.
 */
export function useValidatorsStakeTogether<
  TFunctionName extends 'stakeTogether',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'stakeTogether',
    ...config
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useValidatorsSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"totalValidators"`.
 */
export function useValidatorsTotalValidators<
  TFunctionName extends 'totalValidators',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'totalValidators',
    ...config
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"validatorOracles"`.
 */
export function useValidatorsValidatorOracles<
  TFunctionName extends 'validatorOracles',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'validatorOracles',
    ...config
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"validatorSize"`.
 */
export function useValidatorsValidatorSize<
  TFunctionName extends 'validatorSize',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'validatorSize',
    ...config
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"validators"`.
 */
export function useValidatorsValidators<
  TFunctionName extends 'validators',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: validatorsABI, functionName: 'validators', ...config } as UseContractReadConfig<
    typeof validatorsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__.
 */
export function useValidatorsWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof validatorsABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, TFunctionName, TMode>({ abi: validatorsABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"addValidatorOracle"`.
 */
export function useValidatorsAddValidatorOracle<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'addValidatorOracle'>['request']['abi'],
        'addValidatorOracle',
        TMode
      > & { functionName?: 'addValidatorOracle' }
    : UseContractWriteConfig<typeof validatorsABI, 'addValidatorOracle', TMode> & {
        abi?: never
        functionName?: 'addValidatorOracle'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'addValidatorOracle', TMode>({
    abi: validatorsABI,
    functionName: 'addValidatorOracle',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"createValidator"`.
 */
export function useValidatorsCreateValidator<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'createValidator'>['request']['abi'],
        'createValidator',
        TMode
      > & { functionName?: 'createValidator' }
    : UseContractWriteConfig<typeof validatorsABI, 'createValidator', TMode> & {
        abi?: never
        functionName?: 'createValidator'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'createValidator', TMode>({
    abi: validatorsABI,
    functionName: 'createValidator',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"forceNextValidatorOracle"`.
 */
export function useValidatorsForceNextValidatorOracle<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'forceNextValidatorOracle'>['request']['abi'],
        'forceNextValidatorOracle',
        TMode
      > & { functionName?: 'forceNextValidatorOracle' }
    : UseContractWriteConfig<typeof validatorsABI, 'forceNextValidatorOracle', TMode> & {
        abi?: never
        functionName?: 'forceNextValidatorOracle'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'forceNextValidatorOracle', TMode>({
    abi: validatorsABI,
    functionName: 'forceNextValidatorOracle',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"grantRole"`.
 */
export function useValidatorsGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'grantRole'>['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof validatorsABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'grantRole', TMode>({
    abi: validatorsABI,
    functionName: 'grantRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"initialize"`.
 */
export function useValidatorsInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof validatorsABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'initialize', TMode>({
    abi: validatorsABI,
    functionName: 'initialize',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"pause"`.
 */
export function useValidatorsPause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'pause'>['request']['abi'],
        'pause',
        TMode
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<typeof validatorsABI, 'pause', TMode> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'pause', TMode>({
    abi: validatorsABI,
    functionName: 'pause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"removeValidator"`.
 */
export function useValidatorsRemoveValidator<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'removeValidator'>['request']['abi'],
        'removeValidator',
        TMode
      > & { functionName?: 'removeValidator' }
    : UseContractWriteConfig<typeof validatorsABI, 'removeValidator', TMode> & {
        abi?: never
        functionName?: 'removeValidator'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'removeValidator', TMode>({
    abi: validatorsABI,
    functionName: 'removeValidator',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"removeValidatorOracle"`.
 */
export function useValidatorsRemoveValidatorOracle<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'removeValidatorOracle'>['request']['abi'],
        'removeValidatorOracle',
        TMode
      > & { functionName?: 'removeValidatorOracle' }
    : UseContractWriteConfig<typeof validatorsABI, 'removeValidatorOracle', TMode> & {
        abi?: never
        functionName?: 'removeValidatorOracle'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'removeValidatorOracle', TMode>({
    abi: validatorsABI,
    functionName: 'removeValidatorOracle',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useValidatorsRenounceRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'renounceRole'>['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof validatorsABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'renounceRole', TMode>({
    abi: validatorsABI,
    functionName: 'renounceRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useValidatorsRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'revokeRole'>['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof validatorsABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'revokeRole', TMode>({
    abi: validatorsABI,
    functionName: 'revokeRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"setRouterContract"`.
 */
export function useValidatorsSetRouterContract<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'setRouterContract'>['request']['abi'],
        'setRouterContract',
        TMode
      > & { functionName?: 'setRouterContract' }
    : UseContractWriteConfig<typeof validatorsABI, 'setRouterContract', TMode> & {
        abi?: never
        functionName?: 'setRouterContract'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'setRouterContract', TMode>({
    abi: validatorsABI,
    functionName: 'setRouterContract',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"setStakeTogether"`.
 */
export function useValidatorsSetStakeTogether<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'setStakeTogether'>['request']['abi'],
        'setStakeTogether',
        TMode
      > & { functionName?: 'setStakeTogether' }
    : UseContractWriteConfig<typeof validatorsABI, 'setStakeTogether', TMode> & {
        abi?: never
        functionName?: 'setStakeTogether'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'setStakeTogether', TMode>({
    abi: validatorsABI,
    functionName: 'setStakeTogether',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"setValidatorSize"`.
 */
export function useValidatorsSetValidatorSize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'setValidatorSize'>['request']['abi'],
        'setValidatorSize',
        TMode
      > & { functionName?: 'setValidatorSize' }
    : UseContractWriteConfig<typeof validatorsABI, 'setValidatorSize', TMode> & {
        abi?: never
        functionName?: 'setValidatorSize'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'setValidatorSize', TMode>({
    abi: validatorsABI,
    functionName: 'setValidatorSize',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"unpause"`.
 */
export function useValidatorsUnpause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'unpause'>['request']['abi'],
        'unpause',
        TMode
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<typeof validatorsABI, 'unpause', TMode> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'unpause', TMode>({
    abi: validatorsABI,
    functionName: 'unpause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useValidatorsUpgradeTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof validatorsABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'upgradeTo', TMode>({
    abi: validatorsABI,
    functionName: 'upgradeTo',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useValidatorsUpgradeToAndCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof validatorsABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'upgradeToAndCall', TMode>({
    abi: validatorsABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__.
 */
export function usePrepareValidatorsWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof validatorsABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: validatorsABI, ...config } as UsePrepareContractWriteConfig<
    typeof validatorsABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"addValidatorOracle"`.
 */
export function usePrepareValidatorsAddValidatorOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'addValidatorOracle'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'addValidatorOracle',
    ...config
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'addValidatorOracle'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"createValidator"`.
 */
export function usePrepareValidatorsCreateValidator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'createValidator'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'createValidator',
    ...config
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'createValidator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"forceNextValidatorOracle"`.
 */
export function usePrepareValidatorsForceNextValidatorOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'forceNextValidatorOracle'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'forceNextValidatorOracle',
    ...config
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'forceNextValidatorOracle'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareValidatorsGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'grantRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareValidatorsInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'initialize',
    ...config
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareValidatorsPause(
  config: Omit<UsePrepareContractWriteConfig<typeof validatorsABI, 'pause'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'pause',
    ...config
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"removeValidator"`.
 */
export function usePrepareValidatorsRemoveValidator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'removeValidator'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'removeValidator',
    ...config
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'removeValidator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"removeValidatorOracle"`.
 */
export function usePrepareValidatorsRemoveValidatorOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'removeValidatorOracle'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'removeValidatorOracle',
    ...config
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'removeValidatorOracle'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareValidatorsRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'renounceRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareValidatorsRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'revokeRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"setRouterContract"`.
 */
export function usePrepareValidatorsSetRouterContract(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'setRouterContract'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'setRouterContract',
    ...config
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'setRouterContract'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"setStakeTogether"`.
 */
export function usePrepareValidatorsSetStakeTogether(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'setStakeTogether'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'setStakeTogether',
    ...config
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'setStakeTogether'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"setValidatorSize"`.
 */
export function usePrepareValidatorsSetValidatorSize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'setValidatorSize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'setValidatorSize',
    ...config
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'setValidatorSize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareValidatorsUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'unpause',
    ...config
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'unpause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareValidatorsUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'upgradeTo',
    ...config
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareValidatorsUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__.
 */
export function useValidatorsEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof validatorsABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: validatorsABI, ...config } as UseContractEventConfig<
    typeof validatorsABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"AddValidatorOracle"`.
 */
export function useValidatorsAddValidatorOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'AddValidatorOracle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'AddValidatorOracle',
    ...config
  } as UseContractEventConfig<typeof validatorsABI, 'AddValidatorOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useValidatorsAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof validatorsABI, 'AdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'AdminChanged',
    ...config
  } as UseContractEventConfig<typeof validatorsABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useValidatorsBeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof validatorsABI, 'BeaconUpgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'BeaconUpgraded',
    ...config
  } as UseContractEventConfig<typeof validatorsABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"CreateValidator"`.
 */
export function useValidatorsCreateValidatorEvent(
  config: Omit<UseContractEventConfig<typeof validatorsABI, 'CreateValidator'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'CreateValidator',
    ...config
  } as UseContractEventConfig<typeof validatorsABI, 'CreateValidator'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"FallbackEther"`.
 */
export function useValidatorsFallbackEtherEvent(
  config: Omit<UseContractEventConfig<typeof validatorsABI, 'FallbackEther'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'FallbackEther',
    ...config
  } as UseContractEventConfig<typeof validatorsABI, 'FallbackEther'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"Initialized"`.
 */
export function useValidatorsInitializedEvent(
  config: Omit<UseContractEventConfig<typeof validatorsABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: validatorsABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof validatorsABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"Paused"`.
 */
export function useValidatorsPausedEvent(
  config: Omit<UseContractEventConfig<typeof validatorsABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: validatorsABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof validatorsABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"ReceiveEther"`.
 */
export function useValidatorsReceiveEtherEvent(
  config: Omit<UseContractEventConfig<typeof validatorsABI, 'ReceiveEther'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'ReceiveEther',
    ...config
  } as UseContractEventConfig<typeof validatorsABI, 'ReceiveEther'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"RemoveValidator"`.
 */
export function useValidatorsRemoveValidatorEvent(
  config: Omit<UseContractEventConfig<typeof validatorsABI, 'RemoveValidator'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'RemoveValidator',
    ...config
  } as UseContractEventConfig<typeof validatorsABI, 'RemoveValidator'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"RemoveValidatorOracle"`.
 */
export function useValidatorsRemoveValidatorOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'RemoveValidatorOracle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'RemoveValidatorOracle',
    ...config
  } as UseContractEventConfig<typeof validatorsABI, 'RemoveValidatorOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useValidatorsRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'RoleAdminChanged',
    ...config
  } as UseContractEventConfig<typeof validatorsABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useValidatorsRoleGrantedEvent(
  config: Omit<UseContractEventConfig<typeof validatorsABI, 'RoleGranted'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: validatorsABI, eventName: 'RoleGranted', ...config } as UseContractEventConfig<
    typeof validatorsABI,
    'RoleGranted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useValidatorsRoleRevokedEvent(
  config: Omit<UseContractEventConfig<typeof validatorsABI, 'RoleRevoked'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: validatorsABI, eventName: 'RoleRevoked', ...config } as UseContractEventConfig<
    typeof validatorsABI,
    'RoleRevoked'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"SetRouterContract"`.
 */
export function useValidatorsSetRouterContractEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'SetRouterContract'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'SetRouterContract',
    ...config
  } as UseContractEventConfig<typeof validatorsABI, 'SetRouterContract'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"SetStakeTogether"`.
 */
export function useValidatorsSetStakeTogetherEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'SetStakeTogether'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'SetStakeTogether',
    ...config
  } as UseContractEventConfig<typeof validatorsABI, 'SetStakeTogether'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"SetValidatorSize"`.
 */
export function useValidatorsSetValidatorSizeEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'SetValidatorSize'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'SetValidatorSize',
    ...config
  } as UseContractEventConfig<typeof validatorsABI, 'SetValidatorSize'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useValidatorsUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof validatorsABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: validatorsABI, eventName: 'Unpaused', ...config } as UseContractEventConfig<
    typeof validatorsABI,
    'Unpaused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useValidatorsUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof validatorsABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: validatorsABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof validatorsABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__.
 */
export function useWithdrawalsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: withdrawalsABI, ...config } as UseContractReadConfig<
    typeof withdrawalsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"ADMIN_ROLE"`.
 */
export function useWithdrawalsAdminRole<
  TFunctionName extends 'ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: withdrawalsABI,
    functionName: 'ADMIN_ROLE',
    ...config
  } as UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useWithdrawalsDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: withdrawalsABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config
  } as UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useWithdrawalsDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: withdrawalsABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config
  } as UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"UPGRADER_ROLE"`.
 */
export function useWithdrawalsUpgraderRole<
  TFunctionName extends 'UPGRADER_ROLE',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: withdrawalsABI,
    functionName: 'UPGRADER_ROLE',
    ...config
  } as UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"allowance"`.
 */
export function useWithdrawalsAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: withdrawalsABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof withdrawalsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useWithdrawalsBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: withdrawalsABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof withdrawalsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"decimals"`.
 */
export function useWithdrawalsDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: withdrawalsABI, functionName: 'decimals', ...config } as UseContractReadConfig<
    typeof withdrawalsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useWithdrawalsEip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: withdrawalsABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useWithdrawalsGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: withdrawalsABI,
    functionName: 'getRoleAdmin',
    ...config
  } as UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"hasRole"`.
 */
export function useWithdrawalsHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: withdrawalsABI, functionName: 'hasRole', ...config } as UseContractReadConfig<
    typeof withdrawalsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"isWithdrawReady"`.
 */
export function useWithdrawalsIsWithdrawReady<
  TFunctionName extends 'isWithdrawReady',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: withdrawalsABI,
    functionName: 'isWithdrawReady',
    ...config
  } as UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"name"`.
 */
export function useWithdrawalsName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: withdrawalsABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof withdrawalsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"nonces"`.
 */
export function useWithdrawalsNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: withdrawalsABI, functionName: 'nonces', ...config } as UseContractReadConfig<
    typeof withdrawalsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"paused"`.
 */
export function useWithdrawalsPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: withdrawalsABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof withdrawalsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useWithdrawalsProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: withdrawalsABI,
    functionName: 'proxiableUUID',
    ...config
  } as UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"stakeTogether"`.
 */
export function useWithdrawalsStakeTogether<
  TFunctionName extends 'stakeTogether',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: withdrawalsABI,
    functionName: 'stakeTogether',
    ...config
  } as UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useWithdrawalsSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: withdrawalsABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"symbol"`.
 */
export function useWithdrawalsSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: withdrawalsABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof withdrawalsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useWithdrawalsTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof withdrawalsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: withdrawalsABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof withdrawalsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__.
 */
export function useWithdrawalsWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof withdrawalsABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, TFunctionName, TMode>({
    abi: withdrawalsABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"approve"`.
 */
export function useWithdrawalsApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'approve', TMode>({
    abi: withdrawalsABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"burn"`.
 */
export function useWithdrawalsBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'burn'>['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'burn', TMode>({
    abi: withdrawalsABI,
    functionName: 'burn',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useWithdrawalsBurnFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'burnFrom'>['request']['abi'],
        'burnFrom',
        TMode
      > & { functionName?: 'burnFrom' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'burnFrom', TMode> & {
        abi?: never
        functionName?: 'burnFrom'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'burnFrom', TMode>({
    abi: withdrawalsABI,
    functionName: 'burnFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useWithdrawalsDecreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'decreaseAllowance'>['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'decreaseAllowance', TMode>({
    abi: withdrawalsABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"grantRole"`.
 */
export function useWithdrawalsGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'grantRole'>['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'grantRole', TMode>({
    abi: withdrawalsABI,
    functionName: 'grantRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useWithdrawalsIncreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'increaseAllowance'>['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'increaseAllowance', TMode>({
    abi: withdrawalsABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"initialize"`.
 */
export function useWithdrawalsInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'initialize', TMode>({
    abi: withdrawalsABI,
    functionName: 'initialize',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"mint"`.
 */
export function useWithdrawalsMint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'mint'>['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'mint', TMode>({
    abi: withdrawalsABI,
    functionName: 'mint',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"pause"`.
 */
export function useWithdrawalsPause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'pause'>['request']['abi'],
        'pause',
        TMode
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'pause', TMode> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'pause', TMode>({
    abi: withdrawalsABI,
    functionName: 'pause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"permit"`.
 */
export function useWithdrawalsPermit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'permit'>['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'permit', TMode>({
    abi: withdrawalsABI,
    functionName: 'permit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useWithdrawalsRenounceRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'renounceRole'>['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'renounceRole', TMode>({
    abi: withdrawalsABI,
    functionName: 'renounceRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useWithdrawalsRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'revokeRole'>['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'revokeRole', TMode>({
    abi: withdrawalsABI,
    functionName: 'revokeRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"setStakeTogether"`.
 */
export function useWithdrawalsSetStakeTogether<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'setStakeTogether'>['request']['abi'],
        'setStakeTogether',
        TMode
      > & { functionName?: 'setStakeTogether' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'setStakeTogether', TMode> & {
        abi?: never
        functionName?: 'setStakeTogether'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'setStakeTogether', TMode>({
    abi: withdrawalsABI,
    functionName: 'setStakeTogether',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"transfer"`.
 */
export function useWithdrawalsTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'transfer', TMode>({
    abi: withdrawalsABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useWithdrawalsTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'transferFrom', TMode>({
    abi: withdrawalsABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"unpause"`.
 */
export function useWithdrawalsUnpause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'unpause'>['request']['abi'],
        'unpause',
        TMode
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'unpause', TMode> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'unpause', TMode>({
    abi: withdrawalsABI,
    functionName: 'unpause',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useWithdrawalsUpgradeTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'upgradeTo', TMode>({
    abi: withdrawalsABI,
    functionName: 'upgradeTo',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useWithdrawalsUpgradeToAndCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'upgradeToAndCall', TMode>({
    abi: withdrawalsABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"withdraw"`.
 */
export function useWithdrawalsWithdraw<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof withdrawalsABI, 'withdraw'>['request']['abi'],
        'withdraw',
        TMode
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<typeof withdrawalsABI, 'withdraw', TMode> & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any
) {
  return useContractWrite<typeof withdrawalsABI, 'withdraw', TMode>({
    abi: withdrawalsABI,
    functionName: 'withdraw',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__.
 */
export function usePrepareWithdrawalsWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof withdrawalsABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: withdrawalsABI, ...config } as UsePrepareContractWriteConfig<
    typeof withdrawalsABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareWithdrawalsApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareWithdrawalsBurn(
  config: Omit<UsePrepareContractWriteConfig<typeof withdrawalsABI, 'burn'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'burn',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareWithdrawalsBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'burnFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'burnFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'burnFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareWithdrawalsDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareWithdrawalsGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'grantRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareWithdrawalsIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareWithdrawalsInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'initialize',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareWithdrawalsMint(
  config: Omit<UsePrepareContractWriteConfig<typeof withdrawalsABI, 'mint'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'mint',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareWithdrawalsPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'pause'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'pause',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareWithdrawalsPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'permit',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareWithdrawalsRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'renounceRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareWithdrawalsRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'revokeRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"setStakeTogether"`.
 */
export function usePrepareWithdrawalsSetStakeTogether(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'setStakeTogether'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'setStakeTogether',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'setStakeTogether'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareWithdrawalsTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareWithdrawalsTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareWithdrawalsUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'unpause',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'unpause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareWithdrawalsUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'upgradeTo',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareWithdrawalsUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link withdrawalsABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareWithdrawalsWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof withdrawalsABI, 'withdraw'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: withdrawalsABI,
    functionName: 'withdraw',
    ...config
  } as UsePrepareContractWriteConfig<typeof withdrawalsABI, 'withdraw'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__.
 */
export function useWithdrawalsEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof withdrawalsABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: withdrawalsABI, ...config } as UseContractEventConfig<
    typeof withdrawalsABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useWithdrawalsAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof withdrawalsABI, 'AdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: withdrawalsABI,
    eventName: 'AdminChanged',
    ...config
  } as UseContractEventConfig<typeof withdrawalsABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"Approval"`.
 */
export function useWithdrawalsApprovalEvent(
  config: Omit<UseContractEventConfig<typeof withdrawalsABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: withdrawalsABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof withdrawalsABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useWithdrawalsBeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof withdrawalsABI, 'BeaconUpgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: withdrawalsABI,
    eventName: 'BeaconUpgraded',
    ...config
  } as UseContractEventConfig<typeof withdrawalsABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useWithdrawalsEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof withdrawalsABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: withdrawalsABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof withdrawalsABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"FallbackEther"`.
 */
export function useWithdrawalsFallbackEtherEvent(
  config: Omit<UseContractEventConfig<typeof withdrawalsABI, 'FallbackEther'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: withdrawalsABI,
    eventName: 'FallbackEther',
    ...config
  } as UseContractEventConfig<typeof withdrawalsABI, 'FallbackEther'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"Initialized"`.
 */
export function useWithdrawalsInitializedEvent(
  config: Omit<UseContractEventConfig<typeof withdrawalsABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: withdrawalsABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof withdrawalsABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"Paused"`.
 */
export function useWithdrawalsPausedEvent(
  config: Omit<UseContractEventConfig<typeof withdrawalsABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: withdrawalsABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof withdrawalsABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"ReceiveEther"`.
 */
export function useWithdrawalsReceiveEtherEvent(
  config: Omit<UseContractEventConfig<typeof withdrawalsABI, 'ReceiveEther'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: withdrawalsABI,
    eventName: 'ReceiveEther',
    ...config
  } as UseContractEventConfig<typeof withdrawalsABI, 'ReceiveEther'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useWithdrawalsRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof withdrawalsABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: withdrawalsABI,
    eventName: 'RoleAdminChanged',
    ...config
  } as UseContractEventConfig<typeof withdrawalsABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useWithdrawalsRoleGrantedEvent(
  config: Omit<UseContractEventConfig<typeof withdrawalsABI, 'RoleGranted'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: withdrawalsABI,
    eventName: 'RoleGranted',
    ...config
  } as UseContractEventConfig<typeof withdrawalsABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useWithdrawalsRoleRevokedEvent(
  config: Omit<UseContractEventConfig<typeof withdrawalsABI, 'RoleRevoked'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: withdrawalsABI,
    eventName: 'RoleRevoked',
    ...config
  } as UseContractEventConfig<typeof withdrawalsABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"SetStakeTogether"`.
 */
export function useWithdrawalsSetStakeTogetherEvent(
  config: Omit<
    UseContractEventConfig<typeof withdrawalsABI, 'SetStakeTogether'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: withdrawalsABI,
    eventName: 'SetStakeTogether',
    ...config
  } as UseContractEventConfig<typeof withdrawalsABI, 'SetStakeTogether'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"Transfer"`.
 */
export function useWithdrawalsTransferEvent(
  config: Omit<UseContractEventConfig<typeof withdrawalsABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: withdrawalsABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof withdrawalsABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useWithdrawalsUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof withdrawalsABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: withdrawalsABI, eventName: 'Unpaused', ...config } as UseContractEventConfig<
    typeof withdrawalsABI,
    'Unpaused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useWithdrawalsUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof withdrawalsABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: withdrawalsABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof withdrawalsABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link withdrawalsABI}__ and `eventName` set to `"Withdraw"`.
 */
export function useWithdrawalsWithdrawEvent(
  config: Omit<UseContractEventConfig<typeof withdrawalsABI, 'Withdraw'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: withdrawalsABI, eventName: 'Withdraw', ...config } as UseContractEventConfig<
    typeof withdrawalsABI,
    'Withdraw'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAirdropABI}__.
 */
export function useIAirdropEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iAirdropABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: iAirdropABI, ...config } as UseContractEventConfig<
    typeof iAirdropABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAirdropABI}__ and `eventName` set to `"AddAirdropMerkleRoot"`.
 */
export function useIAirdropAddAirdropMerkleRootEvent(
  config: Omit<
    UseContractEventConfig<typeof iAirdropABI, 'AddAirdropMerkleRoot'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iAirdropABI,
    eventName: 'AddAirdropMerkleRoot',
    ...config
  } as UseContractEventConfig<typeof iAirdropABI, 'AddAirdropMerkleRoot'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAirdropABI}__ and `eventName` set to `"AddMerkleRoots"`.
 */
export function useIAirdropAddMerkleRootsEvent(
  config: Omit<UseContractEventConfig<typeof iAirdropABI, 'AddMerkleRoots'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iAirdropABI,
    eventName: 'AddMerkleRoots',
    ...config
  } as UseContractEventConfig<typeof iAirdropABI, 'AddMerkleRoots'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAirdropABI}__ and `eventName` set to `"ClaimAirdrop"`.
 */
export function useIAirdropClaimAirdropEvent(
  config: Omit<UseContractEventConfig<typeof iAirdropABI, 'ClaimAirdrop'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iAirdropABI, eventName: 'ClaimAirdrop', ...config } as UseContractEventConfig<
    typeof iAirdropABI,
    'ClaimAirdrop'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAirdropABI}__ and `eventName` set to `"ClaimAirdropBatch"`.
 */
export function useIAirdropClaimAirdropBatchEvent(
  config: Omit<UseContractEventConfig<typeof iAirdropABI, 'ClaimAirdropBatch'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iAirdropABI,
    eventName: 'ClaimAirdropBatch',
    ...config
  } as UseContractEventConfig<typeof iAirdropABI, 'ClaimAirdropBatch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAirdropABI}__ and `eventName` set to `"ClaimRewards"`.
 */
export function useIAirdropClaimRewardsEvent(
  config: Omit<UseContractEventConfig<typeof iAirdropABI, 'ClaimRewards'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iAirdropABI, eventName: 'ClaimRewards', ...config } as UseContractEventConfig<
    typeof iAirdropABI,
    'ClaimRewards'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAirdropABI}__ and `eventName` set to `"ClaimRewardsBatch"`.
 */
export function useIAirdropClaimRewardsBatchEvent(
  config: Omit<UseContractEventConfig<typeof iAirdropABI, 'ClaimRewardsBatch'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iAirdropABI,
    eventName: 'ClaimRewardsBatch',
    ...config
  } as UseContractEventConfig<typeof iAirdropABI, 'ClaimRewardsBatch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAirdropABI}__ and `eventName` set to `"FallbackEther"`.
 */
export function useIAirdropFallbackEtherEvent(
  config: Omit<UseContractEventConfig<typeof iAirdropABI, 'FallbackEther'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iAirdropABI, eventName: 'FallbackEther', ...config } as UseContractEventConfig<
    typeof iAirdropABI,
    'FallbackEther'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAirdropABI}__ and `eventName` set to `"ReceiveEther"`.
 */
export function useIAirdropReceiveEtherEvent(
  config: Omit<UseContractEventConfig<typeof iAirdropABI, 'ReceiveEther'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iAirdropABI, eventName: 'ReceiveEther', ...config } as UseContractEventConfig<
    typeof iAirdropABI,
    'ReceiveEther'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAirdropABI}__ and `eventName` set to `"SetMaxBatchSize"`.
 */
export function useIAirdropSetMaxBatchSizeEvent(
  config: Omit<UseContractEventConfig<typeof iAirdropABI, 'SetMaxBatchSize'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iAirdropABI,
    eventName: 'SetMaxBatchSize',
    ...config
  } as UseContractEventConfig<typeof iAirdropABI, 'SetMaxBatchSize'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAirdropABI}__ and `eventName` set to `"SetRouterContract"`.
 */
export function useIAirdropSetRouterContractEvent(
  config: Omit<UseContractEventConfig<typeof iAirdropABI, 'SetRouterContract'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iAirdropABI,
    eventName: 'SetRouterContract',
    ...config
  } as UseContractEventConfig<typeof iAirdropABI, 'SetRouterContract'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAirdropABI}__ and `eventName` set to `"SetStakeTogether"`.
 */
export function useIAirdropSetStakeTogetherEvent(
  config: Omit<UseContractEventConfig<typeof iAirdropABI, 'SetStakeTogether'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iAirdropABI,
    eventName: 'SetStakeTogether',
    ...config
  } as UseContractEventConfig<typeof iAirdropABI, 'SetStakeTogether'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iDepositContractABI}__.
 */
export function useIDepositContractRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iDepositContractABI, TFunctionName>
>(
  config: Omit<UseContractReadConfig<typeof iDepositContractABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: iDepositContractABI, ...config } as UseContractReadConfig<
    typeof iDepositContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iDepositContractABI}__ and `functionName` set to `"get_deposit_count"`.
 */
export function useIDepositContractGetDepositCount<
  TFunctionName extends 'get_deposit_count',
  TSelectData = ReadContractResult<typeof iDepositContractABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof iDepositContractABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iDepositContractABI,
    functionName: 'get_deposit_count',
    ...config
  } as UseContractReadConfig<typeof iDepositContractABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iDepositContractABI}__ and `functionName` set to `"get_deposit_root"`.
 */
export function useIDepositContractGetDepositRoot<
  TFunctionName extends 'get_deposit_root',
  TSelectData = ReadContractResult<typeof iDepositContractABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof iDepositContractABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iDepositContractABI,
    functionName: 'get_deposit_root',
    ...config
  } as UseContractReadConfig<typeof iDepositContractABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iDepositContractABI}__.
 */
export function useIDepositContractWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iDepositContractABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iDepositContractABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof iDepositContractABI, TFunctionName, TMode>({
    abi: iDepositContractABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iDepositContractABI}__ and `functionName` set to `"deposit"`.
 */
export function useIDepositContractDeposit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iDepositContractABI, 'deposit'>['request']['abi'],
        'deposit',
        TMode
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<typeof iDepositContractABI, 'deposit', TMode> & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any
) {
  return useContractWrite<typeof iDepositContractABI, 'deposit', TMode>({
    abi: iDepositContractABI,
    functionName: 'deposit',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iDepositContractABI}__.
 */
export function usePrepareIDepositContractWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof iDepositContractABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: iDepositContractABI, ...config } as UsePrepareContractWriteConfig<
    typeof iDepositContractABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iDepositContractABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareIDepositContractDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iDepositContractABI, 'deposit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iDepositContractABI,
    functionName: 'deposit',
    ...config
  } as UsePrepareContractWriteConfig<typeof iDepositContractABI, 'deposit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iDepositContractABI}__.
 */
export function useIDepositContractEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iDepositContractABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: iDepositContractABI, ...config } as UseContractEventConfig<
    typeof iDepositContractABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iDepositContractABI}__ and `eventName` set to `"DepositEvent"`.
 */
export function useIDepositContractDepositEventEvent(
  config: Omit<
    UseContractEventConfig<typeof iDepositContractABI, 'DepositEvent'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iDepositContractABI,
    eventName: 'DepositEvent',
    ...config
  } as UseContractEventConfig<typeof iDepositContractABI, 'DepositEvent'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iFeesABI}__.
 */
export function useIFeesEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iFeesABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: iFeesABI, ...config } as UseContractEventConfig<typeof iFeesABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iFeesABI}__ and `eventName` set to `"FallbackEther"`.
 */
export function useIFeesFallbackEtherEvent(
  config: Omit<UseContractEventConfig<typeof iFeesABI, 'FallbackEther'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iFeesABI, eventName: 'FallbackEther', ...config } as UseContractEventConfig<
    typeof iFeesABI,
    'FallbackEther'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iFeesABI}__ and `eventName` set to `"ReceiveEther"`.
 */
export function useIFeesReceiveEtherEvent(
  config: Omit<UseContractEventConfig<typeof iFeesABI, 'ReceiveEther'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iFeesABI, eventName: 'ReceiveEther', ...config } as UseContractEventConfig<
    typeof iFeesABI,
    'ReceiveEther'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iFeesABI}__ and `eventName` set to `"SetFeeAddress"`.
 */
export function useIFeesSetFeeAddressEvent(
  config: Omit<UseContractEventConfig<typeof iFeesABI, 'SetFeeAddress'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iFeesABI, eventName: 'SetFeeAddress', ...config } as UseContractEventConfig<
    typeof iFeesABI,
    'SetFeeAddress'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iFeesABI}__ and `eventName` set to `"SetFeeAllocation"`.
 */
export function useIFeesSetFeeAllocationEvent(
  config: Omit<UseContractEventConfig<typeof iFeesABI, 'SetFeeAllocation'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iFeesABI, eventName: 'SetFeeAllocation', ...config } as UseContractEventConfig<
    typeof iFeesABI,
    'SetFeeAllocation'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iFeesABI}__ and `eventName` set to `"SetFeeValue"`.
 */
export function useIFeesSetFeeValueEvent(
  config: Omit<UseContractEventConfig<typeof iFeesABI, 'SetFeeValue'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iFeesABI, eventName: 'SetFeeValue', ...config } as UseContractEventConfig<
    typeof iFeesABI,
    'SetFeeValue'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iFeesABI}__ and `eventName` set to `"SetLiquidityContract"`.
 */
export function useIFeesSetLiquidityContractEvent(
  config: Omit<UseContractEventConfig<typeof iFeesABI, 'SetLiquidityContract'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iFeesABI,
    eventName: 'SetLiquidityContract',
    ...config
  } as UseContractEventConfig<typeof iFeesABI, 'SetLiquidityContract'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iFeesABI}__ and `eventName` set to `"SetMaxFeeIncrease"`.
 */
export function useIFeesSetMaxFeeIncreaseEvent(
  config: Omit<UseContractEventConfig<typeof iFeesABI, 'SetMaxFeeIncrease'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iFeesABI,
    eventName: 'SetMaxFeeIncrease',
    ...config
  } as UseContractEventConfig<typeof iFeesABI, 'SetMaxFeeIncrease'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iFeesABI}__ and `eventName` set to `"SetRouterContract"`.
 */
export function useIFeesSetRouterContractEvent(
  config: Omit<UseContractEventConfig<typeof iFeesABI, 'SetRouterContract'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iFeesABI,
    eventName: 'SetRouterContract',
    ...config
  } as UseContractEventConfig<typeof iFeesABI, 'SetRouterContract'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iFeesABI}__ and `eventName` set to `"SetStakeTogether"`.
 */
export function useIFeesSetStakeTogetherEvent(
  config: Omit<UseContractEventConfig<typeof iFeesABI, 'SetStakeTogether'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iFeesABI, eventName: 'SetStakeTogether', ...config } as UseContractEventConfig<
    typeof iFeesABI,
    'SetStakeTogether'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__.
 */
export function useIStakeTogetherEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iStakeTogetherABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: iStakeTogetherABI, ...config } as UseContractEventConfig<
    typeof iStakeTogetherABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"AddPool"`.
 */
export function useIStakeTogetherAddPoolEvent(
  config: Omit<UseContractEventConfig<typeof iStakeTogetherABI, 'AddPool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iStakeTogetherABI, eventName: 'AddPool', ...config } as UseContractEventConfig<
    typeof iStakeTogetherABI,
    'AddPool'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"BurnPoolShares"`.
 */
export function useIStakeTogetherBurnPoolSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'BurnPoolShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'BurnPoolShares',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'BurnPoolShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"BurnShares"`.
 */
export function useIStakeTogetherBurnSharesEvent(
  config: Omit<UseContractEventConfig<typeof iStakeTogetherABI, 'BurnShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'BurnShares',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'BurnShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"ClaimRewards"`.
 */
export function useIStakeTogetherClaimRewardsEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'ClaimRewards'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'ClaimRewards',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'ClaimRewards'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"DepositBase"`.
 */
export function useIStakeTogetherDepositBaseEvent(
  config: Omit<UseContractEventConfig<typeof iStakeTogetherABI, 'DepositBase'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'DepositBase',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'DepositBase'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"DepositDonationPool"`.
 */
export function useIStakeTogetherDepositDonationPoolEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'DepositDonationPool'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'DepositDonationPool',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'DepositDonationPool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"DepositPool"`.
 */
export function useIStakeTogetherDepositPoolEvent(
  config: Omit<UseContractEventConfig<typeof iStakeTogetherABI, 'DepositPool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'DepositPool',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'DepositPool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"DepositProtocolLimitReached"`.
 */
export function useIStakeTogetherDepositProtocolLimitReachedEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'DepositProtocolLimitReached'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'DepositProtocolLimitReached',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'DepositProtocolLimitReached'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"LockShares"`.
 */
export function useIStakeTogetherLockSharesEvent(
  config: Omit<UseContractEventConfig<typeof iStakeTogetherABI, 'LockShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'LockShares',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'LockShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"MintPenalty"`.
 */
export function useIStakeTogetherMintPenaltyEvent(
  config: Omit<UseContractEventConfig<typeof iStakeTogetherABI, 'MintPenalty'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'MintPenalty',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'MintPenalty'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"MintPoolShares"`.
 */
export function useIStakeTogetherMintPoolSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'MintPoolShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'MintPoolShares',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'MintPoolShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"MintRewards"`.
 */
export function useIStakeTogetherMintRewardsEvent(
  config: Omit<UseContractEventConfig<typeof iStakeTogetherABI, 'MintRewards'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'MintRewards',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'MintRewards'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"MintRewardsAccounts"`.
 */
export function useIStakeTogetherMintRewardsAccountsEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'MintRewardsAccounts'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'MintRewardsAccounts',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'MintRewardsAccounts'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"MintRewardsAccountsFallback"`.
 */
export function useIStakeTogetherMintRewardsAccountsFallbackEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'MintRewardsAccountsFallback'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'MintRewardsAccountsFallback',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'MintRewardsAccountsFallback'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"MintShares"`.
 */
export function useIStakeTogetherMintSharesEvent(
  config: Omit<UseContractEventConfig<typeof iStakeTogetherABI, 'MintShares'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'MintShares',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'MintShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"RefundPool"`.
 */
export function useIStakeTogetherRefundPoolEvent(
  config: Omit<UseContractEventConfig<typeof iStakeTogetherABI, 'RefundPool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'RefundPool',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'RefundPool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"RemovePool"`.
 */
export function useIStakeTogetherRemovePoolEvent(
  config: Omit<UseContractEventConfig<typeof iStakeTogetherABI, 'RemovePool'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'RemovePool',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'RemovePool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"SetBeaconBalance"`.
 */
export function useIStakeTogetherSetBeaconBalanceEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'SetBeaconBalance'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'SetBeaconBalance',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'SetBeaconBalance'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"SetConfig"`.
 */
export function useIStakeTogetherSetConfigEvent(
  config: Omit<UseContractEventConfig<typeof iStakeTogetherABI, 'SetConfig'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'SetConfig',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'SetConfig'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"SetLiquidityBalance"`.
 */
export function useIStakeTogetherSetLiquidityBalanceEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'SetLiquidityBalance'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'SetLiquidityBalance',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'SetLiquidityBalance'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"SupplyLiquidity"`.
 */
export function useIStakeTogetherSupplyLiquidityEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'SupplyLiquidity'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'SupplyLiquidity',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'SupplyLiquidity'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"TransferDelegationShares"`.
 */
export function useIStakeTogetherTransferDelegationSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'TransferDelegationShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'TransferDelegationShares',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'TransferDelegationShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"TransferPoolDelegationShares"`.
 */
export function useIStakeTogetherTransferPoolDelegationSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'TransferPoolDelegationShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'TransferPoolDelegationShares',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'TransferPoolDelegationShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"TransferPoolShares"`.
 */
export function useIStakeTogetherTransferPoolSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'TransferPoolShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'TransferPoolShares',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'TransferPoolShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"TransferShares"`.
 */
export function useIStakeTogetherTransferSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'TransferShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'TransferShares',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'TransferShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"UnlockShares"`.
 */
export function useIStakeTogetherUnlockSharesEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'UnlockShares'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'UnlockShares',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'UnlockShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"WithdrawLiquidity"`.
 */
export function useIStakeTogetherWithdrawLiquidityEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'WithdrawLiquidity'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'WithdrawLiquidity',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'WithdrawLiquidity'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"WithdrawPool"`.
 */
export function useIStakeTogetherWithdrawPoolEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'WithdrawPool'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'WithdrawPool',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'WithdrawPool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"WithdrawValidator"`.
 */
export function useIStakeTogetherWithdrawValidatorEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'WithdrawValidator'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'WithdrawValidator',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'WithdrawValidator'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeTogetherABI}__ and `eventName` set to `"WithdrawalLimitReached"`.
 */
export function useIStakeTogetherWithdrawalLimitReachedEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeTogetherABI, 'WithdrawalLimitReached'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iStakeTogetherABI,
    eventName: 'WithdrawalLimitReached',
    ...config
  } as UseContractEventConfig<typeof iStakeTogetherABI, 'WithdrawalLimitReached'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlUpgradeableABI}__.
 */
export function useAccessControlUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof accessControlUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlUpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: accessControlUpgradeableABI, ...config } as UseContractReadConfig<
    typeof accessControlUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useAccessControlUpgradeableDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof accessControlUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accessControlUpgradeableABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config
  } as UseContractReadConfig<typeof accessControlUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useAccessControlUpgradeableGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof accessControlUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accessControlUpgradeableABI,
    functionName: 'getRoleAdmin',
    ...config
  } as UseContractReadConfig<typeof accessControlUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"hasRole"`.
 */
export function useAccessControlUpgradeableHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof accessControlUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accessControlUpgradeableABI,
    functionName: 'hasRole',
    ...config
  } as UseContractReadConfig<typeof accessControlUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useAccessControlUpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof accessControlUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accessControlUpgradeableABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<typeof accessControlUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__.
 */
export function useAccessControlUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accessControlUpgradeableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof accessControlUpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof accessControlUpgradeableABI, TFunctionName, TMode>({
    abi: accessControlUpgradeableABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"grantRole"`.
 */
export function useAccessControlUpgradeableGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accessControlUpgradeableABI, 'grantRole'>['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof accessControlUpgradeableABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<typeof accessControlUpgradeableABI, 'grantRole', TMode>({
    abi: accessControlUpgradeableABI,
    functionName: 'grantRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useAccessControlUpgradeableRenounceRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accessControlUpgradeableABI, 'renounceRole'>['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof accessControlUpgradeableABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<typeof accessControlUpgradeableABI, 'renounceRole', TMode>({
    abi: accessControlUpgradeableABI,
    functionName: 'renounceRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useAccessControlUpgradeableRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accessControlUpgradeableABI, 'revokeRole'>['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof accessControlUpgradeableABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<typeof accessControlUpgradeableABI, 'revokeRole', TMode>({
    abi: accessControlUpgradeableABI,
    functionName: 'revokeRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__.
 */
export function usePrepareAccessControlUpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accessControlUpgradeableABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof accessControlUpgradeableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareAccessControlUpgradeableGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlUpgradeableABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accessControlUpgradeableABI,
    functionName: 'grantRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof accessControlUpgradeableABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareAccessControlUpgradeableRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlUpgradeableABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accessControlUpgradeableABI,
    functionName: 'renounceRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof accessControlUpgradeableABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareAccessControlUpgradeableRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlUpgradeableABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accessControlUpgradeableABI,
    functionName: 'revokeRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof accessControlUpgradeableABI, 'revokeRole'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlUpgradeableABI}__.
 */
export function useAccessControlUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof accessControlUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: accessControlUpgradeableABI, ...config } as UseContractEventConfig<
    typeof accessControlUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useAccessControlUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accessControlUpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof accessControlUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useAccessControlUpgradeableRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlUpgradeableABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accessControlUpgradeableABI,
    eventName: 'RoleAdminChanged',
    ...config
  } as UseContractEventConfig<typeof accessControlUpgradeableABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useAccessControlUpgradeableRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlUpgradeableABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accessControlUpgradeableABI,
    eventName: 'RoleGranted',
    ...config
  } as UseContractEventConfig<typeof accessControlUpgradeableABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useAccessControlUpgradeableRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlUpgradeableABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accessControlUpgradeableABI,
    eventName: 'RoleRevoked',
    ...config
  } as UseContractEventConfig<typeof accessControlUpgradeableABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__.
 */
export function useIAccessControlUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iAccessControlUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlUpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: iAccessControlUpgradeableABI, ...config } as UseContractReadConfig<
    typeof iAccessControlUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useIAccessControlUpgradeableGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof iAccessControlUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iAccessControlUpgradeableABI,
    functionName: 'getRoleAdmin',
    ...config
  } as UseContractReadConfig<typeof iAccessControlUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"hasRole"`.
 */
export function useIAccessControlUpgradeableHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof iAccessControlUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iAccessControlUpgradeableABI,
    functionName: 'hasRole',
    ...config
  } as UseContractReadConfig<typeof iAccessControlUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__.
 */
export function useIAccessControlUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iAccessControlUpgradeableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iAccessControlUpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof iAccessControlUpgradeableABI, TFunctionName, TMode>({
    abi: iAccessControlUpgradeableABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"grantRole"`.
 */
export function useIAccessControlUpgradeableGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iAccessControlUpgradeableABI, 'grantRole'>['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof iAccessControlUpgradeableABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<typeof iAccessControlUpgradeableABI, 'grantRole', TMode>({
    abi: iAccessControlUpgradeableABI,
    functionName: 'grantRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useIAccessControlUpgradeableRenounceRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iAccessControlUpgradeableABI, 'renounceRole'>['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof iAccessControlUpgradeableABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<typeof iAccessControlUpgradeableABI, 'renounceRole', TMode>({
    abi: iAccessControlUpgradeableABI,
    functionName: 'renounceRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useIAccessControlUpgradeableRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iAccessControlUpgradeableABI, 'revokeRole'>['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof iAccessControlUpgradeableABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<typeof iAccessControlUpgradeableABI, 'revokeRole', TMode>({
    abi: iAccessControlUpgradeableABI,
    functionName: 'revokeRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__.
 */
export function usePrepareIAccessControlUpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iAccessControlUpgradeableABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof iAccessControlUpgradeableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareIAccessControlUpgradeableGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlUpgradeableABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iAccessControlUpgradeableABI,
    functionName: 'grantRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof iAccessControlUpgradeableABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareIAccessControlUpgradeableRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlUpgradeableABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iAccessControlUpgradeableABI,
    functionName: 'renounceRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof iAccessControlUpgradeableABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareIAccessControlUpgradeableRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlUpgradeableABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iAccessControlUpgradeableABI,
    functionName: 'revokeRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof iAccessControlUpgradeableABI, 'revokeRole'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__.
 */
export function useIAccessControlUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iAccessControlUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: iAccessControlUpgradeableABI, ...config } as UseContractEventConfig<
    typeof iAccessControlUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useIAccessControlUpgradeableRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlUpgradeableABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iAccessControlUpgradeableABI,
    eventName: 'RoleAdminChanged',
    ...config
  } as UseContractEventConfig<typeof iAccessControlUpgradeableABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useIAccessControlUpgradeableRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlUpgradeableABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iAccessControlUpgradeableABI,
    eventName: 'RoleGranted',
    ...config
  } as UseContractEventConfig<typeof iAccessControlUpgradeableABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useIAccessControlUpgradeableRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlUpgradeableABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: iAccessControlUpgradeableABI,
    eventName: 'RoleRevoked',
    ...config
  } as UseContractEventConfig<typeof iAccessControlUpgradeableABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967UpgradeableABI}__.
 */
export function useIerc1967UpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc1967UpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ierc1967UpgradeableABI, ...config } as UseContractEventConfig<
    typeof ierc1967UpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967UpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useIerc1967UpgradeableAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1967UpgradeableABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc1967UpgradeableABI,
    eventName: 'AdminChanged',
    ...config
  } as UseContractEventConfig<typeof ierc1967UpgradeableABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967UpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useIerc1967UpgradeableBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1967UpgradeableABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc1967UpgradeableABI,
    eventName: 'BeaconUpgraded',
    ...config
  } as UseContractEventConfig<typeof ierc1967UpgradeableABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967UpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useIerc1967UpgradeableUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1967UpgradeableABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc1967UpgradeableABI,
    eventName: 'Upgraded',
    ...config
  } as UseContractEventConfig<typeof ierc1967UpgradeableABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5267UpgradeableABI}__.
 */
export function useIerc5267UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc5267UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc5267UpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: ierc5267UpgradeableABI, ...config } as UseContractReadConfig<
    typeof ierc5267UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc5267UpgradeableABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useIerc5267UpgradeableEip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<typeof ierc5267UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc5267UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc5267UpgradeableABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof ierc5267UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc5267UpgradeableABI}__.
 */
export function useIerc5267UpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc5267UpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ierc5267UpgradeableABI, ...config } as UseContractEventConfig<
    typeof ierc5267UpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc5267UpgradeableABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useIerc5267UpgradeableEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc5267UpgradeableABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc5267UpgradeableABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof ierc5267UpgradeableABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableUpgradeableABI}__.
 */
export function useIerc1822ProxiableUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1822ProxiableUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1822ProxiableUpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: ierc1822ProxiableUpgradeableABI, ...config } as UseContractReadConfig<
    typeof ierc1822ProxiableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableUpgradeableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useIerc1822ProxiableUpgradeableProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof ierc1822ProxiableUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1822ProxiableUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc1822ProxiableUpgradeableABI,
    functionName: 'proxiableUUID',
    ...config
  } as UseContractReadConfig<typeof ierc1822ProxiableUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableUpgradeableABI}__.
 */
export function usePausableUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pausableUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pausableUpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: pausableUpgradeableABI, ...config } as UseContractReadConfig<
    typeof pausableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableUpgradeableABI}__ and `functionName` set to `"paused"`.
 */
export function usePausableUpgradeablePaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof pausableUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof pausableUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: pausableUpgradeableABI,
    functionName: 'paused',
    ...config
  } as UseContractReadConfig<typeof pausableUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableUpgradeableABI}__.
 */
export function usePausableUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof pausableUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: pausableUpgradeableABI, ...config } as UseContractEventConfig<
    typeof pausableUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function usePausableUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof pausableUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: pausableUpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof pausableUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableUpgradeableABI}__ and `eventName` set to `"Paused"`.
 */
export function usePausableUpgradeablePausedEvent(
  config: Omit<UseContractEventConfig<typeof pausableUpgradeableABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: pausableUpgradeableABI,
    eventName: 'Paused',
    ...config
  } as UseContractEventConfig<typeof pausableUpgradeableABI, 'Paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableUpgradeableABI}__ and `eventName` set to `"Unpaused"`.
 */
export function usePausableUpgradeableUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof pausableUpgradeableABI, 'Unpaused'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: pausableUpgradeableABI,
    eventName: 'Unpaused',
    ...config
  } as UseContractEventConfig<typeof pausableUpgradeableABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reentrancyGuardUpgradeableABI}__.
 */
export function useReentrancyGuardUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof reentrancyGuardUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: reentrancyGuardUpgradeableABI, ...config } as UseContractEventConfig<
    typeof reentrancyGuardUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reentrancyGuardUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useReentrancyGuardUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof reentrancyGuardUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reentrancyGuardUpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof reentrancyGuardUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link contextUpgradeableABI}__.
 */
export function useContextUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof contextUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: contextUpgradeableABI, ...config } as UseContractEventConfig<
    typeof contextUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link contextUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useContextUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof contextUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: contextUpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof contextUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__.
 */
export function useErc1967UpgradeUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc1967UpgradeUpgradeableABI, ...config } as UseContractEventConfig<
    typeof erc1967UpgradeUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useErc1967UpgradeUpgradeableAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'AdminChanged',
    ...config
  } as UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useErc1967UpgradeUpgradeableBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'BeaconUpgraded',
    ...config
  } as UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc1967UpgradeUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useErc1967UpgradeUpgradeableUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'Upgraded',
    ...config
  } as UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconUpgradeableABI}__.
 */
export function useIBeaconUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iBeaconUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof iBeaconUpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: iBeaconUpgradeableABI, ...config } as UseContractReadConfig<
    typeof iBeaconUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconUpgradeableABI}__ and `functionName` set to `"implementation"`.
 */
export function useIBeaconUpgradeableImplementation<
  TFunctionName extends 'implementation',
  TSelectData = ReadContractResult<typeof iBeaconUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof iBeaconUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iBeaconUpgradeableABI,
    functionName: 'implementation',
    ...config
  } as UseContractReadConfig<typeof iBeaconUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__.
 */
export function useInitializableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof initializableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: initializableABI, ...config } as UseContractEventConfig<
    typeof initializableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useInitializableInitializedEvent(
  config: Omit<UseContractEventConfig<typeof initializableABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: initializableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof initializableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof uupsUpgradeableABI, TFunctionName>
>(
  config: Omit<UseContractReadConfig<typeof uupsUpgradeableABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: uupsUpgradeableABI, ...config } as UseContractReadConfig<
    typeof uupsUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useUupsUpgradeableProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof uupsUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof uupsUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: uupsUpgradeableABI,
    functionName: 'proxiableUUID',
    ...config
  } as UseContractReadConfig<typeof uupsUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof uupsUpgradeableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof uupsUpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof uupsUpgradeableABI, TFunctionName, TMode>({
    abi: uupsUpgradeableABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useUupsUpgradeableUpgradeTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof uupsUpgradeableABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any
) {
  return useContractWrite<typeof uupsUpgradeableABI, 'upgradeTo', TMode>({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useUupsUpgradeableUpgradeToAndCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof uupsUpgradeableABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any
) {
  return useContractWrite<typeof uupsUpgradeableABI, 'upgradeToAndCall', TMode>({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function usePrepareUupsUpgradeableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: uupsUpgradeableABI, ...config } as UsePrepareContractWriteConfig<
    typeof uupsUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareUupsUpgradeableUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config
  } as UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareUupsUpgradeableUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeToAndCall',
    ...config
  } as UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof uupsUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: uupsUpgradeableABI, ...config } as UseContractEventConfig<
    typeof uupsUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useUupsUpgradeableAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'AdminChanged',
    ...config
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useUupsUpgradeableBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'BeaconUpgraded',
    ...config
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useUupsUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useUupsUpgradeableUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof uupsUpgradeableABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'Upgraded',
    ...config
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__.
 */
export function useErc20UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, TFunctionName>
>(
  config: Omit<UseContractReadConfig<typeof erc20UpgradeableABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: erc20UpgradeableABI, ...config } as UseContractReadConfig<
    typeof erc20UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20UpgradeableAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20UpgradeableABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof erc20UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20UpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20UpgradeableABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof erc20UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20UpgradeableDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20UpgradeableABI,
    functionName: 'decimals',
    ...config
  } as UseContractReadConfig<typeof erc20UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useErc20UpgradeableName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: erc20UpgradeableABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof erc20UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20UpgradeableSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20UpgradeableABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof erc20UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20UpgradeableTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20UpgradeableABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof erc20UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__.
 */
export function useErc20UpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20UpgradeableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20UpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof erc20UpgradeableABI, TFunctionName, TMode>({
    abi: erc20UpgradeableABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20UpgradeableApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20UpgradeableABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20UpgradeableABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof erc20UpgradeableABI, 'approve', TMode>({
    abi: erc20UpgradeableABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20UpgradeableDecreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20UpgradeableABI, 'decreaseAllowance'>['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof erc20UpgradeableABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof erc20UpgradeableABI, 'decreaseAllowance', TMode>({
    abi: erc20UpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20UpgradeableIncreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20UpgradeableABI, 'increaseAllowance'>['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof erc20UpgradeableABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof erc20UpgradeableABI, 'increaseAllowance', TMode>({
    abi: erc20UpgradeableABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20UpgradeableTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20UpgradeableABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof erc20UpgradeableABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof erc20UpgradeableABI, 'transfer', TMode>({
    abi: erc20UpgradeableABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20UpgradeableTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20UpgradeableABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc20UpgradeableABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof erc20UpgradeableABI, 'transferFrom', TMode>({
    abi: erc20UpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__.
 */
export function usePrepareErc20UpgradeableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20UpgradeableABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc20UpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20UpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20UpgradeableABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20UpgradeableDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20UpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20UpgradeableIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20UpgradeableABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20UpgradeableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20UpgradeableABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20UpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20UpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20UpgradeableABI}__.
 */
export function useErc20UpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc20UpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc20UpgradeableABI, ...config } as UseContractEventConfig<
    typeof erc20UpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20UpgradeableApprovalEvent(
  config: Omit<UseContractEventConfig<typeof erc20UpgradeableABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: erc20UpgradeableABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof erc20UpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc20UpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20UpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20UpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof erc20UpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20UpgradeableTransferEvent(
  config: Omit<UseContractEventConfig<typeof erc20UpgradeableABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: erc20UpgradeableABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof erc20UpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function useIerc20UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20UpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: ierc20UpgradeableABI, ...config } as UseContractReadConfig<
    typeof ierc20UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20UpgradeableAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof ierc20UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20UpgradeableABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof ierc20UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20UpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc20UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20UpgradeableABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof ierc20UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20UpgradeableTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ierc20UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20UpgradeableABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof ierc20UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function useIerc20UpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20UpgradeableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20UpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof ierc20UpgradeableABI, TFunctionName, TMode>({
    abi: ierc20UpgradeableABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20UpgradeableApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20UpgradeableABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc20UpgradeableABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof ierc20UpgradeableABI, 'approve', TMode>({
    abi: ierc20UpgradeableABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20UpgradeableTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20UpgradeableABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof ierc20UpgradeableABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof ierc20UpgradeableABI, 'transfer', TMode>({
    abi: ierc20UpgradeableABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20UpgradeableTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20UpgradeableABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof ierc20UpgradeableABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof ierc20UpgradeableABI, 'transferFrom', TMode>({
    abi: ierc20UpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function usePrepareIerc20UpgradeableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc20UpgradeableABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc20UpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20UpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20UpgradeableABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20UpgradeableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20UpgradeableABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20UpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20UpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function useIerc20UpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc20UpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ierc20UpgradeableABI, ...config } as UseContractEventConfig<
    typeof ierc20UpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20UpgradeableApprovalEvent(
  config: Omit<UseContractEventConfig<typeof ierc20UpgradeableABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: ierc20UpgradeableABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof ierc20UpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20UpgradeableTransferEvent(
  config: Omit<UseContractEventConfig<typeof ierc20UpgradeableABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: ierc20UpgradeableABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof ierc20UpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eip712UpgradeableABI}__.
 */
export function useEip712UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof eip712UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof eip712UpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: eip712UpgradeableABI, ...config } as UseContractReadConfig<
    typeof eip712UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eip712UpgradeableABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useEip712UpgradeableEip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<typeof eip712UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof eip712UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: eip712UpgradeableABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof eip712UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link eip712UpgradeableABI}__.
 */
export function useEip712UpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof eip712UpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: eip712UpgradeableABI, ...config } as UseContractEventConfig<
    typeof eip712UpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link eip712UpgradeableABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useEip712UpgradeableEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof eip712UpgradeableABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: eip712UpgradeableABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof eip712UpgradeableABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link eip712UpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useEip712UpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof eip712UpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: eip712UpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof eip712UpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165UpgradeableABI}__.
 */
export function useErc165UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc165UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc165UpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: erc165UpgradeableABI, ...config } as UseContractReadConfig<
    typeof erc165UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165UpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc165UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc165UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc165UpgradeableABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<typeof erc165UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc165UpgradeableABI}__.
 */
export function useErc165UpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc165UpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc165UpgradeableABI, ...config } as UseContractEventConfig<
    typeof erc165UpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc165UpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc165UpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc165UpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc165UpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof erc165UpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165UpgradeableABI}__.
 */
export function useIerc165UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165UpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: ierc165UpgradeableABI, ...config } as UseContractReadConfig<
    typeof ierc165UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165UpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc165UpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165UpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc165UpgradeableABI,
    functionName: 'supportsInterface',
    ...config
  } as UseContractReadConfig<typeof ierc165UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__.
 */
export function useErc20PermitUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20PermitUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: erc20PermitUpgradeableABI, ...config } as UseContractReadConfig<
    typeof erc20PermitUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useErc20PermitUpgradeableDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof erc20PermitUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config
  } as UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20PermitUpgradeableAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20PermitUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20PermitUpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20PermitUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20PermitUpgradeableDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20PermitUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'decimals',
    ...config
  } as UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useErc20PermitUpgradeableEip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<typeof erc20PermitUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'eip712Domain',
    ...config
  } as UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useErc20PermitUpgradeableName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20PermitUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"nonces"`.
 */
export function useErc20PermitUpgradeableNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof erc20PermitUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'nonces',
    ...config
  } as UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20PermitUpgradeableSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20PermitUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20PermitUpgradeableTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20PermitUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__.
 */
export function useErc20PermitUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20PermitUpgradeableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20PermitUpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof erc20PermitUpgradeableABI, TFunctionName, TMode>({
    abi: erc20PermitUpgradeableABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20PermitUpgradeableApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20PermitUpgradeableABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20PermitUpgradeableABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof erc20PermitUpgradeableABI, 'approve', TMode>({
    abi: erc20PermitUpgradeableABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20PermitUpgradeableDecreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20PermitUpgradeableABI, 'decreaseAllowance'>['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof erc20PermitUpgradeableABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof erc20PermitUpgradeableABI, 'decreaseAllowance', TMode>({
    abi: erc20PermitUpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20PermitUpgradeableIncreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20PermitUpgradeableABI, 'increaseAllowance'>['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof erc20PermitUpgradeableABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof erc20PermitUpgradeableABI, 'increaseAllowance', TMode>({
    abi: erc20PermitUpgradeableABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"permit"`.
 */
export function useErc20PermitUpgradeablePermit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20PermitUpgradeableABI, 'permit'>['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof erc20PermitUpgradeableABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<typeof erc20PermitUpgradeableABI, 'permit', TMode>({
    abi: erc20PermitUpgradeableABI,
    functionName: 'permit',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20PermitUpgradeableTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20PermitUpgradeableABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof erc20PermitUpgradeableABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof erc20PermitUpgradeableABI, 'transfer', TMode>({
    abi: erc20PermitUpgradeableABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20PermitUpgradeableTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20PermitUpgradeableABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc20PermitUpgradeableABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof erc20PermitUpgradeableABI, 'transferFrom', TMode>({
    abi: erc20PermitUpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__.
 */
export function usePrepareErc20PermitUpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({ abi: erc20PermitUpgradeableABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc20PermitUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20PermitUpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitUpgradeableABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20PermitUpgradeableDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitUpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20PermitUpgradeableIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitUpgradeableABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareErc20PermitUpgradeablePermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitUpgradeableABI,
    functionName: 'permit',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20PermitUpgradeableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitUpgradeableABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20PermitUpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20PermitUpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__.
 */
export function useErc20PermitUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc20PermitUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc20PermitUpgradeableABI, ...config } as UseContractEventConfig<
    typeof erc20PermitUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20PermitUpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20PermitUpgradeableABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useErc20PermitUpgradeableEip712DomainChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'EIP712DomainChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20PermitUpgradeableABI,
    eventName: 'EIP712DomainChanged',
    ...config
  } as UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'EIP712DomainChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc20PermitUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20PermitUpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20PermitUpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20PermitUpgradeableABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__.
 */
export function useErc20BurnableUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20BurnableUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: erc20BurnableUpgradeableABI, ...config } as UseContractReadConfig<
    typeof erc20BurnableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20BurnableUpgradeableAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20BurnableUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BurnableUpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20BurnableUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20BurnableUpgradeableDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20BurnableUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'decimals',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useErc20BurnableUpgradeableName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20BurnableUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20BurnableUpgradeableSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20BurnableUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20BurnableUpgradeableTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20BurnableUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__.
 */
export function useErc20BurnableUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20BurnableUpgradeableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20BurnableUpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableUpgradeableABI, TFunctionName, TMode>({
    abi: erc20BurnableUpgradeableABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20BurnableUpgradeableApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20BurnableUpgradeableABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableUpgradeableABI, 'approve', TMode>({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"burn"`.
 */
export function useErc20BurnableUpgradeableBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20BurnableUpgradeableABI, 'burn'>['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableUpgradeableABI, 'burn', TMode>({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'burn',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useErc20BurnableUpgradeableBurnFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20BurnableUpgradeableABI, 'burnFrom'>['request']['abi'],
        'burnFrom',
        TMode
      > & { functionName?: 'burnFrom' }
    : UseContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'burnFrom', TMode> & {
        abi?: never
        functionName?: 'burnFrom'
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableUpgradeableABI, 'burnFrom', TMode>({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'burnFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20BurnableUpgradeableDecreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20BurnableUpgradeableABI, 'decreaseAllowance'>['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableUpgradeableABI, 'decreaseAllowance', TMode>({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20BurnableUpgradeableIncreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20BurnableUpgradeableABI, 'increaseAllowance'>['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableUpgradeableABI, 'increaseAllowance', TMode>({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'increaseAllowance',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20BurnableUpgradeableTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20BurnableUpgradeableABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableUpgradeableABI, 'transfer', TMode>({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20BurnableUpgradeableTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20BurnableUpgradeableABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableUpgradeableABI, 'transferFrom', TMode>({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__.
 */
export function usePrepareErc20BurnableUpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableUpgradeableABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20BurnableUpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc20BurnableUpgradeableBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'burn',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareErc20BurnableUpgradeableBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'burnFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'burnFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'burnFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20BurnableUpgradeableDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20BurnableUpgradeableIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'increaseAllowance',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20BurnableUpgradeableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20BurnableUpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableUpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof erc20BurnableUpgradeableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__.
 */
export function useErc20BurnableUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc20BurnableUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc20BurnableUpgradeableABI, ...config } as UseContractEventConfig<
    typeof erc20BurnableUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20BurnableUpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableUpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20BurnableUpgradeableABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof erc20BurnableUpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc20BurnableUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20BurnableUpgradeableABI,
    eventName: 'Initialized',
    ...config
  } as UseContractEventConfig<typeof erc20BurnableUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableUpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20BurnableUpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableUpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20BurnableUpgradeableABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof erc20BurnableUpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__.
 */
export function useIerc20MetadataUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20MetadataUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: ierc20MetadataUpgradeableABI, ...config } as UseContractReadConfig<
    typeof ierc20MetadataUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20MetadataUpgradeableAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof ierc20MetadataUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'allowance',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20MetadataUpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc20MetadataUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'balanceOf',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"decimals"`.
 */
export function useIerc20MetadataUpgradeableDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof ierc20MetadataUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'decimals',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useIerc20MetadataUpgradeableName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof ierc20MetadataUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'name',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc20MetadataUpgradeableSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof ierc20MetadataUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'symbol',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20MetadataUpgradeableTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ierc20MetadataUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'totalSupply',
    ...config
  } as UseContractReadConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__.
 */
export function useIerc20MetadataUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20MetadataUpgradeableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof ierc20MetadataUpgradeableABI, TFunctionName, TMode>({
    abi: ierc20MetadataUpgradeableABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20MetadataUpgradeableApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20MetadataUpgradeableABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc20MetadataUpgradeableABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof ierc20MetadataUpgradeableABI, 'approve', TMode>({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'approve',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20MetadataUpgradeableTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20MetadataUpgradeableABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof ierc20MetadataUpgradeableABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof ierc20MetadataUpgradeableABI, 'transfer', TMode>({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'transfer',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20MetadataUpgradeableTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20MetadataUpgradeableABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof ierc20MetadataUpgradeableABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof ierc20MetadataUpgradeableABI, 'transferFrom', TMode>({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__.
 */
export function usePrepareIerc20MetadataUpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataUpgradeableABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataUpgradeableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20MetadataUpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataUpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'approve',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataUpgradeableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20MetadataUpgradeableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataUpgradeableABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'transfer',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataUpgradeableABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20MetadataUpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataUpgradeableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'transferFrom',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataUpgradeableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__.
 */
export function useIerc20MetadataUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc20MetadataUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ierc20MetadataUpgradeableABI, ...config } as UseContractEventConfig<
    typeof ierc20MetadataUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20MetadataUpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataUpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc20MetadataUpgradeableABI,
    eventName: 'Approval',
    ...config
  } as UseContractEventConfig<typeof ierc20MetadataUpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20MetadataUpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataUpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc20MetadataUpgradeableABI,
    eventName: 'Transfer',
    ...config
  } as UseContractEventConfig<typeof ierc20MetadataUpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__.
 */
export function useIerc20PermitUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20PermitUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: ierc20PermitUpgradeableABI, ...config } as UseContractReadConfig<
    typeof ierc20PermitUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useIerc20PermitUpgradeableDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof ierc20PermitUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20PermitUpgradeableABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config
  } as UseContractReadConfig<typeof ierc20PermitUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__ and `functionName` set to `"nonces"`.
 */
export function useIerc20PermitUpgradeableNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof ierc20PermitUpgradeableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitUpgradeableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20PermitUpgradeableABI,
    functionName: 'nonces',
    ...config
  } as UseContractReadConfig<typeof ierc20PermitUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__.
 */
export function useIerc20PermitUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20PermitUpgradeableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20PermitUpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof ierc20PermitUpgradeableABI, TFunctionName, TMode>({
    abi: ierc20PermitUpgradeableABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__ and `functionName` set to `"permit"`.
 */
export function useIerc20PermitUpgradeablePermit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20PermitUpgradeableABI, 'permit'>['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof ierc20PermitUpgradeableABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<typeof ierc20PermitUpgradeableABI, 'permit', TMode>({
    abi: ierc20PermitUpgradeableABI,
    functionName: 'permit',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__.
 */
export function usePrepareIerc20PermitUpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20PermitUpgradeableABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20PermitUpgradeableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareIerc20PermitUpgradeablePermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitUpgradeableABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20PermitUpgradeableABI,
    functionName: 'permit',
    ...config
  } as UsePrepareContractWriteConfig<typeof ierc20PermitUpgradeableABI, 'permit'>)
}
